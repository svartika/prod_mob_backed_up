/* This file was generated by PyBindGen 0.17.0.887 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX < 0x020400F0

#define PyEval_ThreadsInitialized() 1

#define Py_CLEAR(op)				\
        do {                            	\
                if (op) {			\
                        PyObject *tmp = (PyObject *)(op);	\
                        (op) = NULL;		\
                        Py_DECREF(tmp);		\
                }				\
        } while (0)


#define Py_VISIT(op)							\
        do { 								\
                if (op) {						\
                        int vret = visit((PyObject *)(op), arg);	\
                        if (vret)					\
                                return vret;				\
                }							\
        } while (0)

#endif



#if PY_VERSION_HEX < 0x020500F0

typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intobjargproc ssizeobjargproc;

#endif


#ifndef PyVarObject_HEAD_INIT
#define PyVarObject_HEAD_INIT(type, size) \
        PyObject_HEAD_INIT(type) size,
#endif


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "ns3/ndnSIM-module.h"
#include <ostream>
#include <sstream>
#include <typeinfo>
#include <map>
#include <iostream>
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Address;


extern PyTypeObject *_PyNs3Address_Type;
#define PyNs3Address_Type (*_PyNs3Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;
#define PyNs3Address_wrapper_registry (*_PyNs3Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ApplicationContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ApplicationContainer;


extern PyTypeObject *_PyNs3ApplicationContainer_Type;
#define PyNs3ApplicationContainer_Type (*_PyNs3ApplicationContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3ApplicationContainer_wrapper_registry;
#define PyNs3ApplicationContainer_wrapper_registry (*_PyNs3ApplicationContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionList;


extern PyTypeObject *_PyNs3AttributeConstructionList_Type;
#define PyNs3AttributeConstructionList_Type (*_PyNs3AttributeConstructionList_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;
#define PyNs3AttributeConstructionList_wrapper_registry (*_PyNs3AttributeConstructionList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::AttributeConstructionList::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeConstructionListItem;


extern PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
#define PyNs3AttributeConstructionListItem_Type (*_PyNs3AttributeConstructionListItem_Type)

extern std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;
#define PyNs3AttributeConstructionListItem_wrapper_registry (*_PyNs3AttributeConstructionListItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Buffer;


extern PyTypeObject *_PyNs3Buffer_Type;
#define PyNs3Buffer_Type (*_PyNs3Buffer_Type)

extern std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;
#define PyNs3Buffer_wrapper_registry (*_PyNs3Buffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Buffer::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BufferIterator;


extern PyTypeObject *_PyNs3BufferIterator_Type;
#define PyNs3BufferIterator_Type (*_PyNs3BufferIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;
#define PyNs3BufferIterator_wrapper_registry (*_PyNs3BufferIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIterator;


extern PyTypeObject *_PyNs3ByteTagIterator_Type;
#define PyNs3ByteTagIterator_Type (*_PyNs3ByteTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;
#define PyNs3ByteTagIterator_wrapper_registry (*_PyNs3ByteTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagIteratorItem;


extern PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
#define PyNs3ByteTagIteratorItem_Type (*_PyNs3ByteTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;
#define PyNs3ByteTagIteratorItem_wrapper_registry (*_PyNs3ByteTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagList;


extern PyTypeObject *_PyNs3ByteTagList_Type;
#define PyNs3ByteTagList_Type (*_PyNs3ByteTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;
#define PyNs3ByteTagList_wrapper_registry (*_PyNs3ByteTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIterator;


extern PyTypeObject *_PyNs3ByteTagListIterator_Type;
#define PyNs3ByteTagListIterator_Type (*_PyNs3ByteTagListIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;
#define PyNs3ByteTagListIterator_wrapper_registry (*_PyNs3ByteTagListIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ByteTagList::Iterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ByteTagListIteratorItem;


extern PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
#define PyNs3ByteTagListIteratorItem_Type (*_PyNs3ByteTagListIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;
#define PyNs3ByteTagListIteratorItem_wrapper_registry (*_PyNs3ByteTagListIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::CallbackBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBase;


extern PyTypeObject *_PyNs3CallbackBase_Type;
#define PyNs3CallbackBase_Type (*_PyNs3CallbackBase_Type)

extern std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;
#define PyNs3CallbackBase_wrapper_registry (*_PyNs3CallbackBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::EventId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventId;


extern PyTypeObject *_PyNs3EventId_Type;
#define PyNs3EventId_Type (*_PyNs3EventId_Type)

extern std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;
#define PyNs3EventId_wrapper_registry (*_PyNs3EventId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Hasher *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Hasher;


extern PyTypeObject *_PyNs3Hasher_Type;
#define PyNs3Hasher_Type (*_PyNs3Hasher_Type)

extern std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;
#define PyNs3Hasher_wrapper_registry (*_PyNs3Hasher_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Address;


extern PyTypeObject *_PyNs3Ipv4Address_Type;
#define PyNs3Ipv4Address_Type (*_PyNs3Ipv4Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;
#define PyNs3Ipv4Address_wrapper_registry (*_PyNs3Ipv4Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv4Mask *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4Mask;


extern PyTypeObject *_PyNs3Ipv4Mask_Type;
#define PyNs3Ipv4Mask_Type (*_PyNs3Ipv4Mask_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;
#define PyNs3Ipv4Mask_wrapper_registry (*_PyNs3Ipv4Mask_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Address *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Address;


extern PyTypeObject *_PyNs3Ipv6Address_Type;
#define PyNs3Ipv6Address_Type (*_PyNs3Ipv6Address_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;
#define PyNs3Ipv6Address_wrapper_registry (*_PyNs3Ipv6Address_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Ipv6Prefix *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6Prefix;


extern PyTypeObject *_PyNs3Ipv6Prefix_Type;
#define PyNs3Ipv6Prefix_Type (*_PyNs3Ipv6Prefix_Type)

extern std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;
#define PyNs3Ipv6Prefix_wrapper_registry (*_PyNs3Ipv6Prefix_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NetDeviceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDeviceContainer;


extern PyTypeObject *_PyNs3NetDeviceContainer_Type;
#define PyNs3NetDeviceContainer_Type (*_PyNs3NetDeviceContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;
#define PyNs3NetDeviceContainer_wrapper_registry (*_PyNs3NetDeviceContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::NodeContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NodeContainer;


extern PyTypeObject *_PyNs3NodeContainer_Type;
#define PyNs3NodeContainer_Type (*_PyNs3NodeContainer_Type)

extern std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;
#define PyNs3NodeContainer_wrapper_registry (*_PyNs3NodeContainer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectBase *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectBase;


extern PyTypeObject *_PyNs3ObjectBase_Type;
#define PyNs3ObjectBase_Type (*_PyNs3ObjectBase_Type)

class PyNs3ObjectBase__PythonHelper : public ns3::ObjectBase
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3ObjectBase__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};

extern std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;
#define PyNs3ObjectBase_wrapper_registry (*_PyNs3ObjectBase_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectDeleter *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectDeleter;


extern PyTypeObject *_PyNs3ObjectDeleter_Type;
#define PyNs3ObjectDeleter_Type (*_PyNs3ObjectDeleter_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;
#define PyNs3ObjectDeleter_wrapper_registry (*_PyNs3ObjectDeleter_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ObjectFactory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactory;


extern PyTypeObject *_PyNs3ObjectFactory_Type;
#define PyNs3ObjectFactory_Type (*_PyNs3ObjectFactory_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;
#define PyNs3ObjectFactory_wrapper_registry (*_PyNs3ObjectFactory_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadata;


extern PyTypeObject *_PyNs3PacketMetadata_Type;
#define PyNs3PacketMetadata_Type (*_PyNs3PacketMetadata_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;
#define PyNs3PacketMetadata_wrapper_registry (*_PyNs3PacketMetadata_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItem;


extern PyTypeObject *_PyNs3PacketMetadataItem_Type;
#define PyNs3PacketMetadataItem_Type (*_PyNs3PacketMetadataItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;
#define PyNs3PacketMetadataItem_wrapper_registry (*_PyNs3PacketMetadataItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketMetadata::ItemIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketMetadataItemIterator;


extern PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
#define PyNs3PacketMetadataItemIterator_Type (*_PyNs3PacketMetadataItemIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;
#define PyNs3PacketMetadataItemIterator_wrapper_registry (*_PyNs3PacketMetadataItemIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIterator;


extern PyTypeObject *_PyNs3PacketTagIterator_Type;
#define PyNs3PacketTagIterator_Type (*_PyNs3PacketTagIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;
#define PyNs3PacketTagIterator_wrapper_registry (*_PyNs3PacketTagIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagIterator::Item *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagIteratorItem;


extern PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
#define PyNs3PacketTagIteratorItem_Type (*_PyNs3PacketTagIteratorItem_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;
#define PyNs3PacketTagIteratorItem_wrapper_registry (*_PyNs3PacketTagIteratorItem_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagList;


extern PyTypeObject *_PyNs3PacketTagList_Type;
#define PyNs3PacketTagList_Type (*_PyNs3PacketTagList_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;
#define PyNs3PacketTagList_wrapper_registry (*_PyNs3PacketTagList_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::PacketTagList::TagData *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3PacketTagListTagData;


extern PyTypeObject *_PyNs3PacketTagListTagData_Type;
#define PyNs3PacketTagListTagData_Type (*_PyNs3PacketTagListTagData_Type)

extern std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;
#define PyNs3PacketTagListTagData_wrapper_registry (*_PyNs3PacketTagListTagData_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RandomVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariable;


extern PyTypeObject *_PyNs3RandomVariable_Type;
#define PyNs3RandomVariable_Type (*_PyNs3RandomVariable_Type)

extern std::map<void*, PyObject*> *_PyNs3RandomVariable_wrapper_registry;
#define PyNs3RandomVariable_wrapper_registry (*_PyNs3RandomVariable_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::RngSeedManager *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RngSeedManager;


extern PyTypeObject *_PyNs3RngSeedManager_Type;
#define PyNs3RngSeedManager_Type (*_PyNs3RngSeedManager_Type)

extern std::map<void*, PyObject*> *_PyNs3RngSeedManager_wrapper_registry;
#define PyNs3RngSeedManager_wrapper_registry (*_PyNs3RngSeedManager_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SequenceNumber32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequenceNumber32;


extern PyTypeObject *_PyNs3SequenceNumber32_Type;
#define PyNs3SequenceNumber32_Type (*_PyNs3SequenceNumber32_Type)

extern std::map<void*, PyObject*> *_PyNs3SequenceNumber32_wrapper_registry;
#define PyNs3SequenceNumber32_wrapper_registry (*_PyNs3SequenceNumber32_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::SequentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SequentialVariable;


extern PyTypeObject *_PyNs3SequentialVariable_Type;
#define PyNs3SequentialVariable_Type (*_PyNs3SequentialVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter > *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type)



#include <map>
#include <string>
#include <typeinfo>
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)
# include <cxxabi.h>
#endif

#define PBG_TYPEMAP_DEBUG 0

namespace pybindgen {

class TypeMap
{
   std::map<std::string, PyTypeObject *> m_map;

public:

   TypeMap() {}

   void register_wrapper(const std::type_info &cpp_type_info, PyTypeObject *python_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "register_wrapper(this=" << this << ", type_name=" << cpp_type_info.name()
             << ", python_wrapper=" << python_wrapper->tp_name << ")" << std::endl;
#endif

       m_map[std::string(cpp_type_info.name())] = python_wrapper;
   }



   PyTypeObject * lookup_wrapper(const std::type_info &cpp_type_info, PyTypeObject *fallback_wrapper)
   {

#if PBG_TYPEMAP_DEBUG
   std::cerr << "lookup_wrapper(this=" << this << ", type_name=" << cpp_type_info.name() << ")" << std::endl;
#endif

       PyTypeObject *python_wrapper = m_map[cpp_type_info.name()];
       if (python_wrapper)
           return python_wrapper;
       else {
#if defined(__GNUC__) && __GNUC__ >= 3 && !defined(__clang__)

           // Get closest (in the single inheritance tree provided by cxxabi.h)
           // registered python wrapper.
           const abi::__si_class_type_info *_typeinfo =
               dynamic_cast<const abi::__si_class_type_info*> (&cpp_type_info);
#if PBG_TYPEMAP_DEBUG
          std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           while (_typeinfo && (python_wrapper = m_map[std::string(_typeinfo->name())]) == 0) {
               _typeinfo = dynamic_cast<const abi::__si_class_type_info*> (_typeinfo->__base_type);
#if PBG_TYPEMAP_DEBUG
               std::cerr << "  -> looking at C++ type " << _typeinfo->name() << std::endl;
#endif
           }

#if PBG_TYPEMAP_DEBUG
          if (python_wrapper) {
              std::cerr << "  -> found match " << std::endl;
          } else {
              std::cerr << "  -> return fallback wrapper" << std::endl;
          }
#endif

           return python_wrapper? python_wrapper : fallback_wrapper;

#else // non gcc 3+ compilers can only match against explicitly registered classes, not hidden subclasses
           return fallback_wrapper;
#endif
       }
   }
};

}


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;

#define PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map (*_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Simulator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Simulator;


extern PyTypeObject *_PyNs3Simulator_Type;
#define PyNs3Simulator_Type (*_PyNs3Simulator_Type)

extern std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;
#define PyNs3Simulator_wrapper_registry (*_PyNs3Simulator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Tag *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Tag;


extern PyTypeObject *_PyNs3Tag_Type;
#define PyNs3Tag_Type (*_PyNs3Tag_Type)


typedef struct {
    PyObject_HEAD
    ns3::TagBuffer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TagBuffer;


extern PyTypeObject *_PyNs3TagBuffer_Type;
#define PyNs3TagBuffer_Type (*_PyNs3TagBuffer_Type)

extern std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;
#define PyNs3TagBuffer_wrapper_registry (*_PyNs3TagBuffer_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TriangularVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TriangularVariable;


extern PyTypeObject *_PyNs3TriangularVariable_Type;
#define PyNs3TriangularVariable_Type (*_PyNs3TriangularVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeId *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeId;


extern PyTypeObject *_PyNs3TypeId_Type;
#define PyNs3TypeId_Type (*_PyNs3TypeId_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;
#define PyNs3TypeId_wrapper_registry (*_PyNs3TypeId_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::AttributeInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdAttributeInformation;


extern PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
#define PyNs3TypeIdAttributeInformation_Type (*_PyNs3TypeIdAttributeInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;
#define PyNs3TypeIdAttributeInformation_wrapper_registry (*_PyNs3TypeIdAttributeInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TypeId::TraceSourceInformation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdTraceSourceInformation;


extern PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
#define PyNs3TypeIdTraceSourceInformation_Type (*_PyNs3TypeIdTraceSourceInformation_Type)

extern std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;
#define PyNs3TypeIdTraceSourceInformation_wrapper_registry (*_PyNs3TypeIdTraceSourceInformation_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::UniformVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UniformVariable;


extern PyTypeObject *_PyNs3UniformVariable_Type;
#define PyNs3UniformVariable_Type (*_PyNs3UniformVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::WeibullVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3WeibullVariable;


extern PyTypeObject *_PyNs3WeibullVariable_Type;
#define PyNs3WeibullVariable_Type (*_PyNs3WeibullVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ZetaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZetaVariable;


extern PyTypeObject *_PyNs3ZetaVariable_Type;
#define PyNs3ZetaVariable_Type (*_PyNs3ZetaVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ZipfVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ZipfVariable;


extern PyTypeObject *_PyNs3ZipfVariable_Type;
#define PyNs3ZipfVariable_Type (*_PyNs3ZipfVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::empty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Empty;


extern PyTypeObject *_PyNs3Empty_Type;
#define PyNs3Empty_Type (*_PyNs3Empty_Type)

extern std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;
#define PyNs3Empty_wrapper_registry (*_PyNs3Empty_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::int64x64_t *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Int64x64_t;


extern PyTypeObject *_PyNs3Int64x64_t_Type;
#define PyNs3Int64x64_t_Type (*_PyNs3Int64x64_t_Type)

extern std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;
#define PyNs3Int64x64_t_wrapper_registry (*_PyNs3Int64x64_t_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::Chunk *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Chunk;


extern PyTypeObject *_PyNs3Chunk_Type;
#define PyNs3Chunk_Type (*_PyNs3Chunk_Type)


typedef struct {
    PyObject_HEAD
    ns3::ConstantVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ConstantVariable;


extern PyTypeObject *_PyNs3ConstantVariable_Type;
#define PyNs3ConstantVariable_Type (*_PyNs3ConstantVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::DeterministicVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DeterministicVariable;


extern PyTypeObject *_PyNs3DeterministicVariable_Type;
#define PyNs3DeterministicVariable_Type (*_PyNs3DeterministicVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmpiricalVariable;


extern PyTypeObject *_PyNs3EmpiricalVariable_Type;
#define PyNs3EmpiricalVariable_Type (*_PyNs3EmpiricalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ErlangVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ErlangVariable;


extern PyTypeObject *_PyNs3ErlangVariable_Type;
#define PyNs3ErlangVariable_Type (*_PyNs3ErlangVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::ExponentialVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ExponentialVariable;


extern PyTypeObject *_PyNs3ExponentialVariable_Type;
#define PyNs3ExponentialVariable_Type (*_PyNs3ExponentialVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::GammaVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3GammaVariable;


extern PyTypeObject *_PyNs3GammaVariable_Type;
#define PyNs3GammaVariable_Type (*_PyNs3GammaVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::Header *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Header;


extern PyTypeObject *_PyNs3Header_Type;
#define PyNs3Header_Type (*_PyNs3Header_Type)


typedef struct {
    PyObject_HEAD
    ns3::IntEmpiricalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntEmpiricalVariable;


extern PyTypeObject *_PyNs3IntEmpiricalVariable_Type;
#define PyNs3IntEmpiricalVariable_Type (*_PyNs3IntEmpiricalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::LogNormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3LogNormalVariable;


extern PyTypeObject *_PyNs3LogNormalVariable_Type;
#define PyNs3LogNormalVariable_Type (*_PyNs3LogNormalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::NormalVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NormalVariable;


extern PyTypeObject *_PyNs3NormalVariable_Type;
#define PyNs3NormalVariable_Type (*_PyNs3NormalVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::Object *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Object;


extern PyTypeObject *_PyNs3Object_Type;
#define PyNs3Object_Type (*_PyNs3Object_Type)

class PyNs3Object__PythonHelper : public ns3::Object
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Object__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::Object::AggregateIterator *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectAggregateIterator;


extern PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
#define PyNs3ObjectAggregateIterator_Type (*_PyNs3ObjectAggregateIterator_Type)

extern std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;
#define PyNs3ObjectAggregateIterator_wrapper_registry (*_PyNs3ObjectAggregateIterator_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::ParetoVariable *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ParetoVariable;


extern PyTypeObject *_PyNs3ParetoVariable_Type;
#define PyNs3ParetoVariable_Type (*_PyNs3ParetoVariable_Type)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TopologyReader, ns3::empty, ns3::DefaultDeleter<ns3::TopologyReader> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt___Type;
#define PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt___Type (*_PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::Interest, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Interest> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt__;


extern PyTypeObject *_PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt___Type;
#define PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt___Type (*_PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt___Type)


extern pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map;

#define PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map (*_PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map)


typedef struct {
    PyObject_HEAD
    ns3::Time *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Time;


extern PyTypeObject *_PyNs3Time_Type;
#define PyNs3Time_Type (*_PyNs3Time_Type)

extern std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;
#define PyNs3Time_wrapper_registry (*_PyNs3Time_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TopologyReader *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TopologyReader;


extern PyTypeObject *_PyNs3TopologyReader_Type;
#define PyNs3TopologyReader_Type (*_PyNs3TopologyReader_Type)


typedef struct {
    PyObject_HEAD
    ns3::TopologyReader::Link *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TopologyReaderLink;


extern PyTypeObject *_PyNs3TopologyReaderLink_Type;
#define PyNs3TopologyReaderLink_Type (*_PyNs3TopologyReaderLink_Type)

extern std::map<void*, PyObject*> *_PyNs3TopologyReaderLink_wrapper_registry;
#define PyNs3TopologyReaderLink_wrapper_registry (*_PyNs3TopologyReaderLink_wrapper_registry)

typedef struct {
    PyObject_HEAD
    ns3::TraceSourceAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TraceSourceAccessor;


extern PyTypeObject *_PyNs3TraceSourceAccessor_Type;
#define PyNs3TraceSourceAccessor_Type (*_PyNs3TraceSourceAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::Trailer *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Trailer;


extern PyTypeObject *_PyNs3Trailer_Type;
#define PyNs3Trailer_Type (*_PyNs3Trailer_Type)


typedef struct {
    PyObject_HEAD
    ns3::Application *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Application;


extern PyTypeObject *_PyNs3Application_Type;
#define PyNs3Application_Type (*_PyNs3Application_Type)

class PyNs3Application__PythonHelper : public ns3::Application
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Application__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::AttributeAccessor *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeAccessor;


extern PyTypeObject *_PyNs3AttributeAccessor_Type;
#define PyNs3AttributeAccessor_Type (*_PyNs3AttributeAccessor_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeChecker;


extern PyTypeObject *_PyNs3AttributeChecker_Type;
#define PyNs3AttributeChecker_Type (*_PyNs3AttributeChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AttributeValue;


extern PyTypeObject *_PyNs3AttributeValue_Type;
#define PyNs3AttributeValue_Type (*_PyNs3AttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanChecker;


extern PyTypeObject *_PyNs3BooleanChecker_Type;
#define PyNs3BooleanChecker_Type (*_PyNs3BooleanChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::BooleanValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3BooleanValue;


extern PyTypeObject *_PyNs3BooleanValue_Type;
#define PyNs3BooleanValue_Type (*_PyNs3BooleanValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackChecker;


extern PyTypeObject *_PyNs3CallbackChecker_Type;
#define PyNs3CallbackChecker_Type (*_PyNs3CallbackChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackImplBase *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackImplBase;


extern PyTypeObject *_PyNs3CallbackImplBase_Type;
#define PyNs3CallbackImplBase_Type (*_PyNs3CallbackImplBase_Type)


typedef struct {
    PyObject_HEAD
    ns3::CallbackValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackValue;


extern PyTypeObject *_PyNs3CallbackValue_Type;
#define PyNs3CallbackValue_Type (*_PyNs3CallbackValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::DoubleValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3DoubleValue;


extern PyTypeObject *_PyNs3DoubleValue_Type;
#define PyNs3DoubleValue_Type (*_PyNs3DoubleValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EmptyAttributeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EmptyAttributeValue;


extern PyTypeObject *_PyNs3EmptyAttributeValue_Type;
#define PyNs3EmptyAttributeValue_Type (*_PyNs3EmptyAttributeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumChecker;


extern PyTypeObject *_PyNs3EnumChecker_Type;
#define PyNs3EnumChecker_Type (*_PyNs3EnumChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::EnumValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EnumValue;


extern PyTypeObject *_PyNs3EnumValue_Type;
#define PyNs3EnumValue_Type (*_PyNs3EnumValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::EventImpl *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3EventImpl;


extern PyTypeObject *_PyNs3EventImpl_Type;
#define PyNs3EventImpl_Type (*_PyNs3EventImpl_Type)


typedef struct {
    PyObject_HEAD
    ns3::IntegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3IntegerValue;


extern PyTypeObject *_PyNs3IntegerValue_Type;
#define PyNs3IntegerValue_Type (*_PyNs3IntegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressChecker;


extern PyTypeObject *_PyNs3Ipv4AddressChecker_Type;
#define PyNs3Ipv4AddressChecker_Type (*_PyNs3Ipv4AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4AddressValue;


extern PyTypeObject *_PyNs3Ipv4AddressValue_Type;
#define PyNs3Ipv4AddressValue_Type (*_PyNs3Ipv4AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskChecker;


extern PyTypeObject *_PyNs3Ipv4MaskChecker_Type;
#define PyNs3Ipv4MaskChecker_Type (*_PyNs3Ipv4MaskChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv4MaskValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv4MaskValue;


extern PyTypeObject *_PyNs3Ipv4MaskValue_Type;
#define PyNs3Ipv4MaskValue_Type (*_PyNs3Ipv4MaskValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressChecker;


extern PyTypeObject *_PyNs3Ipv6AddressChecker_Type;
#define PyNs3Ipv6AddressChecker_Type (*_PyNs3Ipv6AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6AddressValue;


extern PyTypeObject *_PyNs3Ipv6AddressValue_Type;
#define PyNs3Ipv6AddressValue_Type (*_PyNs3Ipv6AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixChecker;


extern PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;
#define PyNs3Ipv6PrefixChecker_Type (*_PyNs3Ipv6PrefixChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::Ipv6PrefixValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Ipv6PrefixValue;


extern PyTypeObject *_PyNs3Ipv6PrefixValue_Type;
#define PyNs3Ipv6PrefixValue_Type (*_PyNs3Ipv6PrefixValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::NetDevice *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NetDevice;


extern PyTypeObject *_PyNs3NetDevice_Type;
#define PyNs3NetDevice_Type (*_PyNs3NetDevice_Type)


typedef struct {
    PyObject_HEAD
    ns3::NixVector *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NixVector;


extern PyTypeObject *_PyNs3NixVector_Type;
#define PyNs3NixVector_Type (*_PyNs3NixVector_Type)


typedef struct {
    PyObject_HEAD
    ns3::Node *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3Node;


extern PyTypeObject *_PyNs3Node_Type;
#define PyNs3Node_Type (*_PyNs3Node_Type)

class PyNs3Node__PythonHelper : public ns3::Node
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3Node__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }

};


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryChecker;


extern PyTypeObject *_PyNs3ObjectFactoryChecker_Type;
#define PyNs3ObjectFactoryChecker_Type (*_PyNs3ObjectFactoryChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::ObjectFactoryValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3ObjectFactoryValue;


extern PyTypeObject *_PyNs3ObjectFactoryValue_Type;
#define PyNs3ObjectFactoryValue_Type (*_PyNs3ObjectFactoryValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::Packet *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3Packet;


extern PyTypeObject *_PyNs3Packet_Type;
#define PyNs3Packet_Type (*_PyNs3Packet_Type)


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableChecker;


extern PyTypeObject *_PyNs3RandomVariableChecker_Type;
#define PyNs3RandomVariableChecker_Type (*_PyNs3RandomVariableChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::RandomVariableValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RandomVariableValue;


extern PyTypeObject *_PyNs3RandomVariableValue_Type;
#define PyNs3RandomVariableValue_Type (*_PyNs3RandomVariableValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TimeValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TimeValue;


extern PyTypeObject *_PyNs3TimeValue_Type;
#define PyNs3TimeValue_Type (*_PyNs3TimeValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdChecker;


extern PyTypeObject *_PyNs3TypeIdChecker_Type;
#define PyNs3TypeIdChecker_Type (*_PyNs3TypeIdChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::TypeIdValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TypeIdValue;


extern PyTypeObject *_PyNs3TypeIdValue_Type;
#define PyNs3TypeIdValue_Type (*_PyNs3TypeIdValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::UintegerValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3UintegerValue;


extern PyTypeObject *_PyNs3UintegerValue_Type;
#define PyNs3UintegerValue_Type (*_PyNs3UintegerValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressChecker;


extern PyTypeObject *_PyNs3AddressChecker_Type;
#define PyNs3AddressChecker_Type (*_PyNs3AddressChecker_Type)


typedef struct {
    PyObject_HEAD
    ns3::AddressValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AddressValue;


extern PyTypeObject *_PyNs3AddressValue_Type;
#define PyNs3AddressValue_Type (*_PyNs3AddressValue_Type)


typedef struct {
    PyObject_HEAD
    ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3TracedValue__Ns3NdnFibFaceMetricStatus;


extern PyTypeObject PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type;

extern std::map<void*, PyObject*> PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> > *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__;


extern PyTypeObject PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type;


extern pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map;


typedef struct {
    PyObject_HEAD
    ns3::AnnotatedTopologyReader *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3AnnotatedTopologyReader;


extern PyTypeObject PyNs3AnnotatedTopologyReader_Type;


typedef struct {
    PyObject_HEAD
    ns3::CallbackBasedApp *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3CallbackBasedApp;


extern PyTypeObject PyNs3CallbackBasedApp_Type;

class PyNs3CallbackBasedApp__PythonHelper : public ns3::CallbackBasedApp
{
public:
    PyObject *m_pyself;
    PyNs3CallbackBasedApp__PythonHelper(ns3::CallbackBasedApp const & arg0)
        : ns3::CallbackBasedApp(arg0), m_pyself(NULL)
        {}

    PyNs3CallbackBasedApp__PythonHelper()
        : ns3::CallbackBasedApp(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3CallbackBasedApp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3CallbackBasedApp *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_StartApplication(PyNs3CallbackBasedApp *self);
    inline void StartApplication__parent_caller()
    { ns3::CallbackBasedApp::StartApplication(); }

    static PyObject * _wrap_DoInitialize(PyNs3CallbackBasedApp *self);
    inline void DoInitialize__parent_caller()
    { ns3::Application::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3CallbackBasedApp *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_StopApplication(PyNs3CallbackBasedApp *self);
    inline void StopApplication__parent_caller()
    { ns3::CallbackBasedApp::StopApplication(); }

    static PyObject * _wrap_DoDispose(PyNs3CallbackBasedApp *self);
    inline void DoDispose__parent_caller()
    { ns3::Application::DoDispose(); }

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3CallbackBasedApp__PythonHelper")
        .SetParent< ns3::CallbackBasedApp > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3CallbackBasedApp__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::L2Tracer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3L2Tracer;


extern PyTypeObject PyNs3L2Tracer_Type;


typedef struct {
    PyObject_HEAD
    ns3::RocketfuelWeightsReader *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3RocketfuelWeightsReader;


extern PyTypeObject PyNs3RocketfuelWeightsReader_Type;


typedef struct {
    PyObject_HEAD
    ns3::L2RateTracer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3L2RateTracer;


extern PyTypeObject PyNs3L2RateTracer_Type;


typedef struct {
    PyObject_HEAD
    std::map< std::string, std::string > *obj;
} Pystd__map__lt___std__string__std__string___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__map__lt___std__string__std__string___gt__ *container;
    std::map< std::string, std::string >::iterator *iterator;
} Pystd__map__lt___std__string__std__string___gt__Iter;


extern PyTypeObject Pystd__map__lt___std__string__std__string___gt___Type;
extern PyTypeObject Pystd__map__lt___std__string__std__string___gt__Iter_Type;

int _wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(PyObject *arg, std::map< std::string, std::string > *container);

typedef struct {
    PyObject_HEAD
    std::list< ns3::TopologyReader::Link > *obj;
} Pystd__list__lt___ns3__TopologyReader__Link___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__list__lt___ns3__TopologyReader__Link___gt__ *container;
    std::list< ns3::TopologyReader::Link >::iterator *iterator;
} Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter;


extern PyTypeObject Pystd__list__lt___ns3__TopologyReader__Link___gt___Type;
extern PyTypeObject Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter_Type;

int _wrap_convert_py2c__std__list__lt___ns3__TopologyReader__Link___gt__(PyObject *arg, std::list< ns3::TopologyReader::Link > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Implementation *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashImplementation;


extern PyTypeObject *_PyNs3HashImplementation_Type;
#define PyNs3HashImplementation_Type (*_PyNs3HashImplementation_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Fnv1a *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionFnv1a;


extern PyTypeObject *_PyNs3HashFunctionFnv1a_Type;
#define PyNs3HashFunctionFnv1a_Type (*_PyNs3HashFunctionFnv1a_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash32 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash32;


extern PyTypeObject *_PyNs3HashFunctionHash32_Type;
#define PyNs3HashFunctionHash32_Type (*_PyNs3HashFunctionHash32_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Hash64 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionHash64;


extern PyTypeObject *_PyNs3HashFunctionHash64_Type;
#define PyNs3HashFunctionHash64_Type (*_PyNs3HashFunctionHash64_Type)


typedef struct {
    PyObject_HEAD
    ns3::Hash::Function::Murmur3 *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3HashFunctionMurmur3;


extern PyTypeObject *_PyNs3HashFunctionMurmur3_Type;
#define PyNs3HashFunctionMurmur3_Type (*_PyNs3HashFunctionMurmur3_Type)

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::App *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnApp;


extern PyTypeObject PyNs3NdnApp_Type;

class PyNs3NdnApp__PythonHelper : public ns3::ndn::App
{
public:
    PyObject *m_pyself;
    PyNs3NdnApp__PythonHelper(ns3::ndn::App const & arg0)
        : ns3::ndn::App(arg0), m_pyself(NULL)
        {}

    PyNs3NdnApp__PythonHelper()
        : ns3::ndn::App(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnApp__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnApp *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_StartApplication(PyNs3NdnApp *self);
    inline void StartApplication__parent_caller()
    { ns3::ndn::App::StartApplication(); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnApp *self);
    inline void DoInitialize__parent_caller()
    { ns3::Application::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnApp *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_StopApplication(PyNs3NdnApp *self);
    inline void StopApplication__parent_caller()
    { ns3::ndn::App::StopApplication(); }

    static PyObject * _wrap_DoDispose(PyNs3NdnApp *self);
    inline void DoDispose__parent_caller()
    { ns3::ndn::App::DoDispose(); }

    virtual void OnData(ns3::Ptr< ns3::ndn::Data const > contentObject);

    virtual void OnInterest(ns3::Ptr< ns3::ndn::Interest const > interest);

    virtual void OnNack(ns3::Ptr< ns3::ndn::Interest const > interest);

    virtual void DoDispose();

    virtual void StartApplication();

    virtual void StopApplication();

    virtual void DoInitialize();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnApp__PythonHelper")
        .SetParent< ns3::ndn::App > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnApp__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::AppDelayTracer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnAppDelayTracer;


extern PyTypeObject PyNs3NdnAppDelayTracer_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::AppHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnAppHelper;


extern PyTypeObject PyNs3NdnAppHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnAppHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::Blob *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnBlob;


extern PyTypeObject PyNs3NdnBlob_Type;

extern std::map<void*, PyObject*> PyNs3NdnBlob_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::ContentStore *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnContentStore;


extern PyTypeObject PyNs3NdnContentStore_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::CsTracer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnCsTracer;


extern PyTypeObject PyNs3NdnCsTracer_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::Data *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnData;


extern PyTypeObject PyNs3NdnData_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::DataException *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnDataException;


extern PyTypeObject PyNs3NdnDataException_Type;

extern std::map<void*, PyObject*> PyNs3NdnDataException_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::Exclude *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnExclude;


extern PyTypeObject PyNs3NdnExclude_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::Face *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFace;


extern PyTypeObject PyNs3NdnFace_Type;

class PyNs3NdnFace__PythonHelper : public ns3::ndn::Face
{
public:
    PyObject *m_pyself;
    PyNs3NdnFace__PythonHelper(ns3::Ptr< ns3::Node > node)
        : ns3::ndn::Face(node), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnFace__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnFace *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Receive(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs);
    inline bool Receive__parent_caller(ns3::Ptr< ns3::Packet const > p)
    { return ns3::ndn::Face::Receive(p); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnFace *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnFace *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_Send(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs);
    inline bool Send__parent_caller(ns3::Ptr< ns3::Packet > packet)
    { return ns3::ndn::Face::Send(packet); }

    static PyObject * _wrap_DoDispose(PyNs3NdnFace *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    static PyObject * _wrap_SetFlags(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs);
    inline void SetFlags__parent_caller(uint32_t flags)
    { ns3::ndn::Face::SetFlags(flags); }

    virtual uint16_t GetMetric() const;

    virtual bool ReceiveData(ns3::Ptr< ns3::ndn::Data > data);

    virtual bool ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest);

    virtual bool SendData(ns3::Ptr< ns3::ndn::Data const > data);

    virtual bool SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest);

    virtual void SetMetric(uint16_t metric);

    virtual void UnRegisterProtocolHandlers();

    virtual bool Receive(ns3::Ptr< ns3::Packet const > p);

    virtual bool Send(ns3::Ptr< ns3::Packet > packet);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnFace__PythonHelper")
        .SetParent< ns3::ndn::Face > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnFace__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::FaceContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFaceContainer;


extern PyTypeObject PyNs3NdnFaceContainer_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::Fib *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFib;


extern PyTypeObject PyNs3NdnFib_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::ForwardingStrategy *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnForwardingStrategy;


extern PyTypeObject PyNs3NdnForwardingStrategy_Type;

class PyNs3NdnForwardingStrategy__PythonHelper : public ns3::ndn::ForwardingStrategy
{
public:
    PyObject *m_pyself;
    PyNs3NdnForwardingStrategy__PythonHelper(ns3::ndn::ForwardingStrategy const & arg0)
        : ns3::ndn::ForwardingStrategy(arg0), m_pyself(NULL)
        {}

    PyNs3NdnForwardingStrategy__PythonHelper()
        : ns3::ndn::ForwardingStrategy(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnForwardingStrategy__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_ShouldSuppressIncomingInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline bool ShouldSuppressIncomingInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { return ns3::ndn::ForwardingStrategy::ShouldSuppressIncomingInterest(inFace, interest, pitEntry); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnForwardingStrategy *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_PropagateInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void PropagateInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::PropagateInterest(inFace, interest, pitEntry); }

    static PyObject * _wrap_TrySendOutInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline bool TrySendOutInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { return ns3::ndn::ForwardingStrategy::TrySendOutInterest(inFace, outFace, interest, pitEntry); }

    static PyObject * _wrap_WillSatisfyPendingInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void WillSatisfyPendingInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::WillSatisfyPendingInterest(inFace, pitEntry); }

    static PyObject * _wrap_DidSendOutInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidSendOutInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::DidSendOutInterest(inFace, outFace, interest, pitEntry); }

    static PyObject * _wrap_DidReceiveDuplicateInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidReceiveDuplicateInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::DidReceiveDuplicateInterest(inFace, interest, pitEntry); }

    static PyObject * _wrap_DidSendOutData(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidSendOutData__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Data const > data, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::DidSendOutData(inFace, outFace, data, pitEntry); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnForwardingStrategy *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::ndn::ForwardingStrategy::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3NdnForwardingStrategy *self);
    inline void DoDispose__parent_caller()
    { ns3::ndn::ForwardingStrategy::DoDispose(); }

    static PyObject * _wrap_SatisfyPendingInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void SatisfyPendingInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::SatisfyPendingInterest(inFace, data, pitEntry); }

    static PyObject * _wrap_DidSuppressSimilarInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidSuppressSimilarInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::DidSuppressSimilarInterest(inFace, interest, pitEntry); }

    static PyObject * _wrap_DidReceiveUnsolicitedData(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidReceiveUnsolicitedData__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, bool didCreateCacheEntry)
    { ns3::ndn::ForwardingStrategy::DidReceiveUnsolicitedData(inFace, data, didCreateCacheEntry); }

    static PyObject * _wrap_DidExhaustForwardingOptions(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidExhaustForwardingOptions__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::DidExhaustForwardingOptions(inFace, interest, pitEntry); }

    static PyObject * _wrap_CanSendOutInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline bool CanSendOutInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { return ns3::ndn::ForwardingStrategy::CanSendOutInterest(inFace, outFace, interest, pitEntry); }

    static PyObject * _wrap_DidCreatePitEntry(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidCreatePitEntry__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::DidCreatePitEntry(inFace, interest, pitEntry); }

    static PyObject * _wrap_DetectRetransmittedInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline bool DetectRetransmittedInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { return ns3::ndn::ForwardingStrategy::DetectRetransmittedInterest(inFace, interest, pitEntry); }

    static PyObject * _wrap_DidReceiveSolicitedData(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidReceiveSolicitedData__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, bool didCreateCacheEntry)
    { ns3::ndn::ForwardingStrategy::DidReceiveSolicitedData(inFace, data, didCreateCacheEntry); }

    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnForwardingStrategy *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_FailedToCreatePitEntry(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void FailedToCreatePitEntry__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest)
    { ns3::ndn::ForwardingStrategy::FailedToCreatePitEntry(inFace, interest); }

    static PyObject * _wrap_DidForwardSimilarInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs);
    inline void DidForwardSimilarInterest__parent_caller(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
    { ns3::ndn::ForwardingStrategy::DidForwardSimilarInterest(inFace, interest, pitEntry); }

    virtual void AddFace(ns3::Ptr< ns3::ndn::Face > face);

    virtual void DidAddFibEntry(ns3::Ptr< ns3::ndn::fib::Entry > fibEntry);

    virtual void OnData(ns3::Ptr< ns3::ndn::Face > face, ns3::Ptr< ns3::ndn::Data > data);

    virtual void OnInterest(ns3::Ptr< ns3::ndn::Face > face, ns3::Ptr< ns3::ndn::Interest > interest);

    virtual void RemoveFace(ns3::Ptr< ns3::ndn::Face > face);

    virtual void WillEraseTimedOutPendingInterest(ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void WillRemoveFibEntry(ns3::Ptr< ns3::ndn::fib::Entry > fibEntry);

    virtual bool CanSendOutInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual bool DetectRetransmittedInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DidCreatePitEntry(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DidExhaustForwardingOptions(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DidForwardSimilarInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DidReceiveDuplicateInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DidReceiveSolicitedData(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, bool didCreateCacheEntry);

    virtual void DidReceiveUnsolicitedData(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, bool didCreateCacheEntry);

    virtual void DidSendOutData(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Data const > data, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DidSendOutInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DidSuppressSimilarInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void DoDispose();

    virtual bool DoPropagateInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void FailedToCreatePitEntry(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest);

    virtual void NotifyNewAggregate();

    virtual void PropagateInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void SatisfyPendingInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual bool ShouldSuppressIncomingInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual bool TrySendOutInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual void WillSatisfyPendingInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnForwardingStrategy__PythonHelper")
        .SetParent< ns3::ndn::ForwardingStrategy > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnForwardingStrategy__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::GlobalRoutingHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnGlobalRoutingHelper;


extern PyTypeObject PyNs3NdnGlobalRoutingHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnGlobalRoutingHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::HeaderHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnHeaderHelper;


extern PyTypeObject PyNs3NdnHeaderHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnHeaderHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::Interest *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnInterest;


extern PyTypeObject PyNs3NdnInterest_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::InterestException *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnInterestException;


extern PyTypeObject PyNs3NdnInterestException_Type;

extern std::map<void*, PyObject*> PyNs3NdnInterestException_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::IpFacesHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnIpFacesHelper;


extern PyTypeObject PyNs3NdnIpFacesHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnIpFacesHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::L3Protocol *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnL3Protocol;


extern PyTypeObject PyNs3NdnL3Protocol_Type;
extern PyTypeObject PyNs3NdnL3ProtocolMeta_Type;

class PyNs3NdnL3Protocol__PythonHelper : public ns3::ndn::L3Protocol
{
public:
    PyObject *m_pyself;
    PyNs3NdnL3Protocol__PythonHelper()
        : ns3::ndn::L3Protocol(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnL3Protocol__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnL3Protocol *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnL3Protocol *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnL3Protocol *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::ndn::L3Protocol::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3NdnL3Protocol *self);
    inline void DoDispose__parent_caller()
    { ns3::ndn::L3Protocol::DoDispose(); }

    virtual uint32_t GetNFaces() const;

    virtual ns3::Ptr< ns3::ndn::Face > GetFace(uint32_t face) const;

    virtual ns3::Ptr< ns3::ndn::Face > GetFaceById(uint32_t face) const;

    virtual void RemoveFace(ns3::Ptr< ns3::ndn::Face > face);

    virtual ns3::Ptr< ns3::ndn::Face > GetFaceByNetDevice(ns3::Ptr< ns3::NetDevice > netDevice) const;

    virtual void DoDispose();

    virtual void NotifyNewAggregate();

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoInitialize();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnL3Protocol__PythonHelper")
        .SetParent< ns3::ndn::L3Protocol > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnL3Protocol__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::L3Tracer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnL3Tracer;


extern PyTypeObject PyNs3NdnL3Tracer_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::Limits *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnLimits;


extern PyTypeObject PyNs3NdnLimits_Type;

class PyNs3NdnLimits__PythonHelper : public ns3::ndn::Limits
{
public:
    PyObject *m_pyself;
    PyNs3NdnLimits__PythonHelper(ns3::ndn::Limits const & arg0)
        : ns3::ndn::Limits(arg0), m_pyself(NULL)
        {}

    PyNs3NdnLimits__PythonHelper()
        : ns3::ndn::Limits(), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnLimits__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnLimits *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnLimits *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnLimits *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_FireAvailableSlotCallback(PyNs3NdnLimits *self);
    inline void FireAvailableSlotCallback__parent_caller()
    { ns3::ndn::Limits::FireAvailableSlotCallback(); }

    static PyObject * _wrap_DoDispose(PyNs3NdnLimits *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void BorrowLimit();

    virtual double GetCurrentLimit() const;

    virtual double GetCurrentLimitRate() const;

    virtual double GetLinkDelay() const;

    virtual double GetMaxDelay() const;

    virtual double GetMaxLimit() const;

    virtual double GetMaxRate() const;

    virtual bool IsBelowLimit();

    virtual bool IsEnabled() const;

    virtual void ReturnLimit();

    virtual void SetLimits(double rate, double delay);

    virtual void SetLinkDelay(double delay);

    virtual void UpdateCurrentLimit(double limit);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnLimits__PythonHelper")
        .SetParent< ns3::ndn::Limits > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnLimits__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::LinkControlHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnLinkControlHelper;


extern PyTypeObject PyNs3NdnLinkControlHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnLinkControlHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::Name *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnName;


extern PyTypeObject PyNs3NdnName_Type;
extern PyTypeObject PyNs3NdnNameMeta_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::NameChecker *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNameChecker;


extern PyTypeObject PyNs3NdnNameChecker_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::NameValue *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNameValue;


extern PyTypeObject PyNs3NdnNameValue_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::NetDeviceFace *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNetDeviceFace;


extern PyTypeObject PyNs3NdnNetDeviceFace_Type;

class PyNs3NdnNetDeviceFace__PythonHelper : public ns3::ndn::NetDeviceFace
{
public:
    PyObject *m_pyself;

    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnNetDeviceFace__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnNetDeviceFace *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Receive(PyNs3NdnNetDeviceFace *self, PyObject *args, PyObject *kwargs);
    inline bool Receive__parent_caller(ns3::Ptr< ns3::Packet const > p)
    { return ns3::ndn::Face::Receive(p); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnNetDeviceFace *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnNetDeviceFace *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_Send(PyNs3NdnNetDeviceFace *self, PyObject *args, PyObject *kwargs);
    inline bool Send__parent_caller(ns3::Ptr< ns3::Packet > p)
    { return ns3::ndn::NetDeviceFace::Send(p); }

    static PyObject * _wrap_DoDispose(PyNs3NdnNetDeviceFace *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void UnRegisterProtocolHandlers();

    virtual bool Send(ns3::Ptr< ns3::Packet > p);

    virtual bool SendData(ns3::Ptr< ns3::ndn::Data const > data);

    virtual bool ReceiveData(ns3::Ptr< ns3::ndn::Data > data);

    virtual void SetMetric(uint16_t metric);

    virtual bool ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest);

    virtual uint16_t GetMetric() const;

    virtual bool SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest);

    virtual bool Receive(ns3::Ptr< ns3::Packet const > p);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnNetDeviceFace__PythonHelper")
        .SetParent< ns3::ndn::NetDeviceFace > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnNetDeviceFace__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::Pit *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnPit;


extern PyTypeObject PyNs3NdnPit_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::RttEstimator *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnRttEstimator;


extern PyTypeObject PyNs3NdnRttEstimator_Type;

class PyNs3NdnRttEstimator__PythonHelper : public ns3::ndn::RttEstimator
{
public:
    PyObject *m_pyself;
    PyNs3NdnRttEstimator__PythonHelper()
        : ns3::ndn::RttEstimator(), m_pyself(NULL)
        {}

    PyNs3NdnRttEstimator__PythonHelper(ns3::ndn::RttEstimator const & arg0)
        : ns3::ndn::RttEstimator(arg0), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnRttEstimator__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnRttEstimator *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnRttEstimator *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnRttEstimator *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_DoDispose(PyNs3NdnRttEstimator *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual ns3::Time AckSeq(ns3::SequenceNumber32 ackSeq);

    virtual void ClearSent();

    virtual ns3::Ptr< ns3::ndn::RttEstimator > Copy() const;

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void IncreaseMultiplier();

    virtual void Measurement(ns3::Time t);

    virtual void Reset();

    virtual void ResetMultiplier();

    virtual ns3::Time RetransmitTimeout();

    virtual void SentSeq(ns3::SequenceNumber32 seq, uint32_t size);

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnRttEstimator__PythonHelper")
        .SetParent< ns3::ndn::RttEstimator > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnRttEstimator__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::RttHistory *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnRttHistory;


extern PyTypeObject PyNs3NdnRttHistory_Type;

extern std::map<void*, PyObject*> PyNs3NdnRttHistory_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::StackHelper *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnStackHelper;


extern PyTypeObject PyNs3NdnStackHelper_Type;

extern std::map<void*, PyObject*> PyNs3NdnStackHelper_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::UnknownHeaderException *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnUnknownHeaderException;


extern PyTypeObject PyNs3NdnUnknownHeaderException_Type;

extern std::map<void*, PyObject*> PyNs3NdnUnknownHeaderException_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::Wire *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnWire;


extern PyTypeObject PyNs3NdnWire_Type;

extern std::map<void*, PyObject*> PyNs3NdnWire_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::ApiFace *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnApiFace;


extern PyTypeObject PyNs3NdnApiFace_Type;

class PyNs3NdnApiFace__PythonHelper : public ns3::ndn::ApiFace
{
public:
    PyObject *m_pyself;
    PyNs3NdnApiFace__PythonHelper(ns3::Ptr< ns3::Node > node)
        : ns3::ndn::ApiFace(node), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnApiFace__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnApiFace *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Receive(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs);
    inline bool Receive__parent_caller(ns3::Ptr< ns3::Packet const > p)
    { return ns3::ndn::Face::Receive(p); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnApiFace *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnApiFace *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_Send(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs);
    inline bool Send__parent_caller(ns3::Ptr< ns3::Packet > packet)
    { return ns3::ndn::Face::Send(packet); }

    static PyObject * _wrap_DoDispose(PyNs3NdnApiFace *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual void Shutdown();

    virtual bool SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest);

    virtual bool SendData(ns3::Ptr< ns3::ndn::Data const > data);

    virtual bool ReceiveData(ns3::Ptr< ns3::ndn::Data > data);

    virtual void SetMetric(uint16_t metric);

    virtual bool ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest);

    virtual uint16_t GetMetric() const;

    virtual void UnRegisterProtocolHandlers();

    virtual bool Receive(ns3::Ptr< ns3::Packet const > p);

    virtual bool Send(ns3::Ptr< ns3::Packet > packet);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnApiFace__PythonHelper")
        .SetParent< ns3::ndn::ApiFace > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnApiFace__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::AppFace *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnAppFace;


extern PyTypeObject PyNs3NdnAppFace_Type;

class PyNs3NdnAppFace__PythonHelper : public ns3::ndn::AppFace
{
public:
    PyObject *m_pyself;
    PyNs3NdnAppFace__PythonHelper(ns3::Ptr< ns3::ndn::App > app)
        : ns3::ndn::AppFace(app), m_pyself(NULL)
        {}


    void set_pyobj(PyObject *pyobj)
    {
        Py_XDECREF(m_pyself);
        Py_INCREF(pyobj);
        m_pyself = pyobj;
    }

    virtual ~PyNs3NdnAppFace__PythonHelper()
    {
        Py_CLEAR(m_pyself);
    }


    static PyObject * _wrap_NotifyConstructionCompleted(PyNs3NdnAppFace *self);
    inline void NotifyConstructionCompleted__parent_caller()
    { ns3::ObjectBase::NotifyConstructionCompleted(); }

    static PyObject * _wrap_Receive(PyNs3NdnAppFace *self, PyObject *args, PyObject *kwargs);
    inline bool Receive__parent_caller(ns3::Ptr< ns3::Packet const > p)
    { return ns3::ndn::Face::Receive(p); }

    static PyObject * _wrap_DoInitialize(PyNs3NdnAppFace *self);
    inline void DoInitialize__parent_caller()
    { ns3::Object::DoInitialize(); }

    static PyObject * _wrap_NotifyNewAggregate(PyNs3NdnAppFace *self);
    inline void NotifyNewAggregate__parent_caller()
    { ns3::Object::NotifyNewAggregate(); }

    static PyObject * _wrap_Send(PyNs3NdnAppFace *self, PyObject *args, PyObject *kwargs);
    inline bool Send__parent_caller(ns3::Ptr< ns3::Packet > packet)
    { return ns3::ndn::Face::Send(packet); }

    static PyObject * _wrap_DoDispose(PyNs3NdnAppFace *self);
    inline void DoDispose__parent_caller()
    { ns3::Object::DoDispose(); }

    virtual bool SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest);

    virtual bool SendData(ns3::Ptr< ns3::ndn::Data const > data);

    virtual bool ReceiveData(ns3::Ptr< ns3::ndn::Data > data);

    virtual void SetMetric(uint16_t metric);

    virtual bool ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest);

    virtual uint16_t GetMetric() const;

    virtual void UnRegisterProtocolHandlers();

    virtual bool Receive(ns3::Ptr< ns3::Packet const > p);

    virtual bool Send(ns3::Ptr< ns3::Packet > packet);

    virtual ns3::TypeId GetInstanceTypeId() const;

    virtual void DoDispose();

    virtual void DoInitialize();

    virtual void NotifyNewAggregate();

    virtual void NotifyConstructionCompleted();

    static ns3::TypeId GetTypeId (void)
    {
      static ns3::TypeId tid = ns3::TypeId ("PyNs3NdnAppFace__PythonHelper")
        .SetParent< ns3::ndn::AppFace > ()
        ;
      return tid;
    }
};

NS_OBJECT_ENSURE_REGISTERED (PyNs3NdnAppFace__PythonHelper);


typedef struct {
    PyObject_HEAD
    ns3::ndn::L3AggregateTracer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnL3AggregateTracer;


extern PyTypeObject PyNs3NdnL3AggregateTracer_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::L3RateTracer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnL3RateTracer;


extern PyTypeObject PyNs3NdnL3RateTracer_Type;


typedef struct {
    PyObject_HEAD
    std::vector< char > *obj;
} Pystd__vector__lt___char___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___char___gt__ *container;
    std::vector< char >::iterator *iterator;
} Pystd__vector__lt___char___gt__Iter;


extern PyTypeObject Pystd__vector__lt___char___gt___Type;
extern PyTypeObject Pystd__vector__lt___char___gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___char___gt__(PyObject *arg, std::vector< char > *container);

typedef struct {
    PyObject_HEAD
    std::vector< ns3::Ptr< ns3::ndn::Face > > *obj;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__;


typedef struct {
    PyObject_HEAD
    Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__ *container;
    std::vector< ns3::Ptr< ns3::ndn::Face > >::iterator *iterator;
} Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter;


extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt___Type;
extern PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter_Type;

int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::ndn::Face > > *container);
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::cs::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnCsEntry;


extern PyTypeObject PyNs3NdnCsEntry_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::cs::Stats *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnCsStats;


extern PyTypeObject PyNs3NdnCsStats_Type;

extern std::map<void*, PyObject*> PyNs3NdnCsStats_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::fib::Entry *obj;
    PyObject *inst_dict;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibEntry;


extern PyTypeObject PyNs3NdnFibEntry_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::fib::Entry::NoFaces *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibEntryNoFaces;


extern PyTypeObject PyNs3NdnFibEntryNoFaces_Type;

extern std::map<void*, PyObject*> PyNs3NdnFibEntryNoFaces_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::fib::FaceMetric *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibFaceMetric;


extern PyTypeObject PyNs3NdnFibFaceMetric_Type;

extern std::map<void*, PyObject*> PyNs3NdnFibFaceMetric_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::fib::FaceMetricContainer *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibFaceMetricContainer;


extern PyTypeObject PyNs3NdnFibFaceMetricContainer_Type;

extern std::map<void*, PyObject*> PyNs3NdnFibFaceMetricContainer_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::fib::i_face *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibI_face;


extern PyTypeObject PyNs3NdnFibI_face_Type;

extern std::map<void*, PyObject*> PyNs3NdnFibI_face_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::fib::i_metric *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibI_metric;


extern PyTypeObject PyNs3NdnFibI_metric_Type;

extern std::map<void*, PyObject*> PyNs3NdnFibI_metric_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::fib::i_nth *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFibI_nth;


extern PyTypeObject PyNs3NdnFibI_nth_Type;

extern std::map<void*, PyObject*> PyNs3NdnFibI_nth_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::fw::Tag *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnFwTag;


extern PyTypeObject PyNs3NdnFwTag_Type;

extern std::map<void*, PyObject*> PyNs3NdnFwTag_wrapper_registry;
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::name::Component *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnNameComponent;


extern PyTypeObject PyNs3NdnNameComponent_Type;

/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    ns3::ndn::pit::Entry *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnPitEntry;


extern PyTypeObject PyNs3NdnPitEntry_Type;


typedef struct {
    PyObject_HEAD
    ns3::ndn::pit::EntryIsNotEmpty *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnPitEntryIsNotEmpty;


extern PyTypeObject PyNs3NdnPitEntryIsNotEmpty_Type;

extern std::map<void*, PyObject*> PyNs3NdnPitEntryIsNotEmpty_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::pit::IncomingFace *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnPitIncomingFace;


extern PyTypeObject PyNs3NdnPitIncomingFace_Type;

extern std::map<void*, PyObject*> PyNs3NdnPitIncomingFace_wrapper_registry;

typedef struct {
    PyObject_HEAD
    ns3::ndn::pit::OutgoingFace *obj;
    PyBindGenWrapperFlags flags:8;
} PyNs3NdnPitOutgoingFace;


extern PyTypeObject PyNs3NdnPitOutgoingFace_Type;

extern std::map<void*, PyObject*> PyNs3NdnPitOutgoingFace_wrapper_registry;

typedef struct {
    PyObject_HEAD
    std::set< ns3::ndn::pit::IncomingFace > *obj;
} Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__ *container;
    std::set< ns3::ndn::pit::IncomingFace >::iterator *iterator;
} Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter;


extern PyTypeObject Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt___Type;
extern PyTypeObject Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___ns3__ndn__pit__IncomingFace___gt__(PyObject *arg, std::set< ns3::ndn::pit::IncomingFace > *container);

typedef struct {
    PyObject_HEAD
    std::set< ns3::ndn::pit::OutgoingFace > *obj;
} Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__ *container;
    std::set< ns3::ndn::pit::OutgoingFace >::iterator *iterator;
} Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter;


extern PyTypeObject Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt___Type;
extern PyTypeObject Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___ns3__ndn__pit__OutgoingFace___gt__(PyObject *arg, std::set< ns3::ndn::pit::OutgoingFace > *container);

typedef struct {
    PyObject_HEAD
    std::set< unsigned int > *obj;
} Pystd__set__lt___unsigned_int___gt__;


typedef struct {
    PyObject_HEAD
    Pystd__set__lt___unsigned_int___gt__ *container;
    std::set< unsigned int >::iterator *iterator;
} Pystd__set__lt___unsigned_int___gt__Iter;


extern PyTypeObject Pystd__set__lt___unsigned_int___gt___Type;
extern PyTypeObject Pystd__set__lt___unsigned_int___gt__Iter_Type;

int _wrap_convert_py2c__std__set__lt___unsigned_int___gt__(PyObject *arg, std::set< unsigned int > *container);

class PythonCallbackImpl0 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::ndn::Name const>, ns3::Ptr<ns3::ndn::Interest const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl0(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl0()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl0 *other = dynamic_cast<const PythonCallbackImpl0*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::ndn::Name const > arg1, ns3::Ptr< ns3::ndn::Interest const > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NdnName *py_Name;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3NdnInterest *py_Interest;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Name *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Name = NULL;
        } else {
            py_Name = (PyNs3NdnName *) wrapper_lookup_iter->second;
            Py_INCREF(py_Name);
        }

        if (py_Name == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Name *> (ns3::PeekPointer (arg1))), &PyNs3NdnName_Type);
            py_Name = PyObject_New(PyNs3NdnName, wrapper_type);

            py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Name *> (ns3::PeekPointer (arg1))->Ref();
            py_Name->obj = const_cast<ns3::ndn::Name *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Interest = NULL;
        } else {
            py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Interest);
        }

        if (py_Interest == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2))), &PyNs3NdnInterest_Type);
            py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);

            py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2))->Ref();
            py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
        }
        args = Py_BuildValue((char *) "(NN)", py_Name, py_Interest);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl1 : public ns3::CallbackImpl<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl1(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl1()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl1 *other = dynamic_cast<const PythonCallbackImpl1*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()()
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        args = Py_BuildValue((char *) "()");
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl2 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::ndn::Interest const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl2(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl2()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl2 *other = dynamic_cast<const PythonCallbackImpl2*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::ndn::Interest const > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NdnInterest *py_Interest;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Interest = NULL;
        } else {
            py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
            Py_INCREF(py_Interest);
        }

        if (py_Interest == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1))), &PyNs3NdnInterest_Type);
            py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);

            py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1))->Ref();
            py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
        }
        args = Py_BuildValue((char *) "(N)", py_Interest);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl3 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::ndn::Interest const>, ns3::Ptr<ns3::ndn::Data const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl3(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl3()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl3 *other = dynamic_cast<const PythonCallbackImpl3*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::ndn::Interest const > arg1, ns3::Ptr< ns3::ndn::Data const > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NdnInterest *py_Interest;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3NdnData *py_Data;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
            py_Interest = NULL;
        } else {
            py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
            Py_INCREF(py_Interest);
        }

        if (py_Interest == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1))), &PyNs3NdnInterest_Type);
            py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);

            py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1))->Ref();
            py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg1));
            PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Data = NULL;
        } else {
            py_Data = (PyNs3NdnData *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Data);
        }

        if (py_Data == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2))), &PyNs3NdnData_Type);
            py_Data = PyObject_New(PyNs3NdnData, wrapper_type2);

            py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2))->Ref();
            py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
        }
        args = Py_BuildValue((char *) "(NN)", py_Interest, py_Data);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl4 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::ndn::Face>, ns3::Ptr<ns3::ndn::Data>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl4(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl4()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl4 *other = dynamic_cast<const PythonCallbackImpl4*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::ndn::Face > arg1, ns3::Ptr< ns3::ndn::Data > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NdnFace *py_Face;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3NdnData *py_Data;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }

        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;

            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Data = NULL;
        } else {
            py_Data = (PyNs3NdnData *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Data);
        }

        if (py_Data == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2))), &PyNs3NdnData_Type);
            py_Data = PyObject_New(PyNs3NdnData, wrapper_type2);

            py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2))->Ref();
            py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
        }
        args = Py_BuildValue((char *) "(NN)", py_Face, py_Data);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl5 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::ndn::Face>, ns3::Ptr<ns3::ndn::Interest>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl5(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl5()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl5 *other = dynamic_cast<const PythonCallbackImpl5*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::ndn::Face > arg1, ns3::Ptr< ns3::ndn::Interest > arg2)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NdnFace *py_Face;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3NdnInterest *py_Interest;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }

        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;

            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Interest = NULL;
        } else {
            py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Interest);
        }

        if (py_Interest == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2))), &PyNs3NdnInterest_Type);
            py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);

            py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2))->Ref();
            py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
        }
        args = Py_BuildValue((char *) "(NN)", py_Face, py_Interest);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl6 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::Application>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl6(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl6()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl6 *other = dynamic_cast<const PythonCallbackImpl6*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::Application > arg1)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3Application *py_Application;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Application *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Application = NULL;
        } else {
            py_Application = (PyNs3Application *) wrapper_lookup_iter->second;
            Py_INCREF(py_Application);
        }

        if (py_Application == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Application *> (ns3::PeekPointer (arg1))), &PyNs3Application_Type);
            py_Application = PyObject_GC_New(PyNs3Application, wrapper_type);
            py_Application->inst_dict = NULL;

            py_Application->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Application *> (ns3::PeekPointer (arg1))->Ref();
            py_Application->obj = const_cast<ns3::Application *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Application->obj] = (PyObject *) py_Application;
        }
        args = Py_BuildValue((char *) "(N)", py_Application);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


class PythonCallbackImpl7 : public ns3::CallbackImpl<void, ns3::Ptr<ns3::NetDevice>, ns3::Ptr<ns3::Packet const>, unsigned short, ns3::Address const&, ns3::Address const&, ns3::NetDevice::PacketType, ns3::empty, ns3::empty, ns3::empty>
{
public:
    PyObject *m_callback;
    PythonCallbackImpl7(PyObject *callback)
    {
        Py_INCREF(callback);
        m_callback = callback;
    }
    virtual ~PythonCallbackImpl7()
    {
        PyGILState_STATE __py_gil_state;
        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        Py_DECREF(m_callback);
        m_callback = NULL;
        PyGILState_Release(__py_gil_state);
    }

    virtual bool IsEqual(ns3::Ptr<const ns3::CallbackImplBase> other_base) const
    {
        const PythonCallbackImpl7 *other = dynamic_cast<const PythonCallbackImpl7*> (ns3::PeekPointer (other_base));
        if (other != NULL)
            return (other->m_callback == m_callback);
        else
            return false;
    }


    void
    operator()(ns3::Ptr< ns3::NetDevice > arg1, ns3::Ptr< ns3::Packet const > arg2, unsigned short arg3, ns3::Address const & arg4, ns3::Address const & arg5, ns3::NetDevice::PacketType arg6)
    {
        PyGILState_STATE __py_gil_state;
        PyObject *py_retval;
        PyNs3NetDevice *py_NetDevice;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
        PyTypeObject *wrapper_type = 0;
        PyNs3Packet *py_Packet;
        std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
        PyTypeObject *wrapper_type2 = 0;
        PyNs3Address *py_Address;
        PyNs3Address *py_Address2;
        PyObject *args;

        __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_NetDevice = NULL;
        } else {
            py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
            Py_INCREF(py_NetDevice);
        }

        if (py_NetDevice == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))), &PyNs3NetDevice_Type);
            py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
            py_NetDevice->inst_dict = NULL;

            py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1))->Ref();
            py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (arg1));
            PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
        }
        wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (arg2)));
        if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
            py_Packet = NULL;
        } else {
            py_Packet = (PyNs3Packet *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Packet);
        }

        if (py_Packet == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))), &PyNs3Packet_Type);
            py_Packet = PyObject_New(PyNs3Packet, wrapper_type2);

            py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Packet *> (ns3::PeekPointer (arg2))->Ref();
            py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (arg2));
            PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
        }
        py_Address = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address->obj = new ns3::Address(arg4);
        PyNs3Address_wrapper_registry[(void *) py_Address->obj] = (PyObject *) py_Address;
        py_Address2 = PyObject_New(PyNs3Address, &PyNs3Address_Type);
        py_Address2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        py_Address2->obj = new ns3::Address(arg5);
        PyNs3Address_wrapper_registry[(void *) py_Address2->obj] = (PyObject *) py_Address2;
        args = Py_BuildValue((char *) "(NNiNNi)", py_NetDevice, py_Packet, (int) arg3, py_Address, py_Address2, arg6);
        py_retval = PyObject_CallObject(m_callback, args);
        if (py_retval == NULL) {
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        if (py_retval != Py_None) {
            PyErr_SetString(PyExc_TypeError, "function/method should return None");
            Py_DECREF(py_retval);
            Py_DECREF(args);
            if (PyEval_ThreadsInitialized())
                PyGILState_Release(__py_gil_state);
            return;
        }
        Py_DECREF(py_retval);
        Py_DECREF(args);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
};


int _wrap_convert_py2c__ns3__ndn__pit__IncomingFace(PyObject *value, ns3::ndn::pit::IncomingFace *address);


int _wrap_convert_py2c__ns3__ndn__pit__OutgoingFace(PyObject *value, ns3::ndn::pit::OutgoingFace *address);


int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address);


PyObject* _wrap_convert_c2py__ns3__ndn__Name(ns3::ndn::Name *cvalue);


int _wrap_convert_py2c__ns3__ndn__Name(PyObject *value, ns3::ndn::Name *address);


int _wrap_convert_py2c__char(PyObject *value, char *address);


int _wrap_convert_py2c__ns3__Ptr__lt___ns3__ndn__Face___gt__(PyObject *value, ns3::Ptr< ns3::ndn::Face > *address);


int _wrap_convert_py2c__std__string(PyObject *value, std::string *address);


int _wrap_convert_py2c__ns3__TopologyReader__Link(PyObject *value, ns3::TopologyReader::Link *address);

