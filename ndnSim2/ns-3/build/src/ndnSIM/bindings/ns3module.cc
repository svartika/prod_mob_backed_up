#include "ns3module.h"
static PyMethodDef ndnSIM_FatalImpl_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_FatalImpl_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.FatalImpl",
    NULL,
    -1,
    ndnSIM_FatalImpl_functions,
};
#endif

static PyObject *
initndnSIM_FatalImpl(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_FatalImpl_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.FatalImpl", ndnSIM_FatalImpl_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef ndnSIM_Hash_Function_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashFunctionFnv1a_Type;


PyTypeObject *_PyNs3HashFunctionHash32_Type;


PyTypeObject *_PyNs3HashFunctionHash64_Type;


PyTypeObject *_PyNs3HashFunctionMurmur3_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_Hash_Function_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.Hash.Function",
    NULL,
    -1,
    ndnSIM_Hash_Function_functions,
};
#endif

static PyObject *
initndnSIM_Hash_Function(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_Hash_Function_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.Hash.Function", ndnSIM_Hash_Function_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Function::Fnv1a' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionFnv1a_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Fnv1a");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash32' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash32_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash32");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Hash64' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionHash64_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hash64");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Hash::Function::Murmur3' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashFunctionMurmur3_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Murmur3");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    return m;
}
static PyMethodDef ndnSIM_Hash_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3HashImplementation_Type;

#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_Hash_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.Hash",
    NULL,
    -1,
    ndnSIM_Hash_functions,
};
#endif

static PyObject *
initndnSIM_Hash(void)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_Hash_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.Hash", ndnSIM_Hash_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Import the 'ns3::Hash::Implementation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return NULL;
        }
        _PyNs3HashImplementation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Implementation");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    submodule = initndnSIM_Hash_Function();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Function", submodule);
    return m;
}
static PyMethodDef ndnSIM_internal_functions[] = {
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_internal_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.internal",
    NULL,
    -1,
    ndnSIM_internal_functions,
};
#endif

static PyObject *
initndnSIM_internal(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_internal_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.internal", ndnSIM_internal_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
static PyMethodDef ndnSIM_ndn_cs_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */




static int
_wrap_PyNs3NdnCsEntry__tp_init__0(PyNs3NdnCsEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnCsEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnCsEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::cs::Entry(*((PyNs3NdnCsEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnCsEntry__tp_init__1(PyNs3NdnCsEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnContentStore *cs;
    ns3::ndn::ContentStore *cs_ptr;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    const char *keywords[] = {"cs", "data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnContentStore_Type, &cs, &PyNs3NdnData_Type, &data)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    cs_ptr = (cs ? cs->obj : NULL);
    data_ptr = (data ? data->obj : NULL);
    self->obj = new ns3::ndn::cs::Entry(ns3::Ptr< ns3::ndn::ContentStore  > (cs_ptr), ns3::Ptr< ns3::ndn::Data  > (data_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnCsEntry__tp_init(PyNs3NdnCsEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnCsEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnCsEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnCsEntry_GetContentStore(PyNs3NdnCsEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::ContentStore > retval;
    PyNs3NdnContentStore *py_ContentStore;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetContentStore();
    if (!(const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_ContentStore = NULL;
    } else {
        py_ContentStore = (PyNs3NdnContentStore *) wrapper_lookup_iter->second;
        Py_INCREF(py_ContentStore);
    }
    
    if (py_ContentStore == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval)))), &PyNs3NdnContentStore_Type);
        py_ContentStore = PyObject_GC_New(PyNs3NdnContentStore, wrapper_type);
        py_ContentStore->inst_dict = NULL;
    
        py_ContentStore->inst_dict = NULL;
        py_ContentStore->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval))->Ref();
        py_ContentStore->obj = const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_ContentStore->obj] = (PyObject *) py_ContentStore;
    }
    py_retval = Py_BuildValue((char *) "N", py_ContentStore);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnCsEntry_GetName(PyNs3NdnCsEntry *self)
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    
    ns3::ndn::Name const & retval = self->obj->GetName();
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnCsEntry_GetData(PyNs3NdnCsEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Data const > retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetData();
    if (!(const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = Py_BuildValue((char *) "N", py_Data);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnCsEntry__copy__(PyNs3NdnCsEntry *self)
{

    PyNs3NdnCsEntry *py_copy;
    py_copy = PyObject_New(PyNs3NdnCsEntry, &PyNs3NdnCsEntry_Type);
    
    py_copy->obj = new ns3::ndn::cs::Entry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnCsEntry_methods[] = {
    {(char *) "GetContentStore", (PyCFunction) _wrap_PyNs3NdnCsEntry_GetContentStore, METH_NOARGS, NULL },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3NdnCsEntry_GetName, METH_NOARGS, NULL },
    {(char *) "GetData", (PyCFunction) _wrap_PyNs3NdnCsEntry_GetData, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnCsEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnCsEntry__tp_dealloc(PyNs3NdnCsEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::cs::Entry *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnCsEntry__tp_richcompare (PyNs3NdnCsEntry *PYBINDGEN_UNUSED(self), PyNs3NdnCsEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnCsEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnCsEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.cs.Entry",            /* tp_name */
    sizeof(PyNs3NdnCsEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnCsEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnCsEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnCsEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnCsEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnCsStats_wrapper_registry;
static PyObject* _wrap_PyNs3NdnCsStats__get_m_cacheHits(PyNs3NdnCsStats *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->m_cacheHits);
    return py_retval;
}
static int _wrap_PyNs3NdnCsStats__set_m_cacheHits(PyNs3NdnCsStats *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->m_cacheHits)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnCsStats__get_m_cacheMisses(PyNs3NdnCsStats *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "d", self->obj->m_cacheMisses);
    return py_retval;
}
static int _wrap_PyNs3NdnCsStats__set_m_cacheMisses(PyNs3NdnCsStats *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &self->obj->m_cacheMisses)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3NdnCsStats__getsets[] = {
    {
        (char*) "m_cacheHits", /* attribute name */
        (getter) _wrap_PyNs3NdnCsStats__get_m_cacheHits, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnCsStats__set_m_cacheHits, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_cacheMisses", /* attribute name */
        (getter) _wrap_PyNs3NdnCsStats__get_m_cacheMisses, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnCsStats__set_m_cacheMisses, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3NdnCsStats__tp_init__0(PyNs3NdnCsStats *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::cs::Stats();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnCsStats__tp_init__1(PyNs3NdnCsStats *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnCsStats *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnCsStats_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::cs::Stats(*((PyNs3NdnCsStats *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnCsStats__tp_init(PyNs3NdnCsStats *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnCsStats__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnCsStats__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnCsStats_Reset(PyNs3NdnCsStats *self)
{
    PyObject *py_retval;
    
    self->obj->Reset();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnCsStats__copy__(PyNs3NdnCsStats *self)
{

    PyNs3NdnCsStats *py_copy;
    py_copy = PyObject_New(PyNs3NdnCsStats, &PyNs3NdnCsStats_Type);
    py_copy->obj = new ns3::ndn::cs::Stats(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnCsStats_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnCsStats_methods[] = {
    {(char *) "Reset", (PyCFunction) _wrap_PyNs3NdnCsStats_Reset, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnCsStats__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnCsStats__tp_dealloc(PyNs3NdnCsStats *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnCsStats_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnCsStats_wrapper_registry.end()) {
        PyNs3NdnCsStats_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::cs::Stats *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnCsStats__tp_richcompare (PyNs3NdnCsStats *PYBINDGEN_UNUSED(self), PyNs3NdnCsStats *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnCsStats_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnCsStats_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.cs.Stats",            /* tp_name */
    sizeof(PyNs3NdnCsStats),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnCsStats__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnCsStats__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnCsStats_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3NdnCsStats__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnCsStats__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_ndn_cs_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.ndn.cs",
    NULL,
    -1,
    ndnSIM_ndn_cs_functions,
};
#endif

static PyObject *
initndnSIM_ndn_cs(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_ndn_cs_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.ndn.cs", ndnSIM_ndn_cs_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map.register_wrapper(typeid(ns3::ndn::cs::Entry), &PyNs3NdnCsEntry_Type);
    /* Register the 'ns3::ndn::cs::Entry' class */
    PyNs3NdnCsEntry_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type;
    if (PyType_Ready(&PyNs3NdnCsEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Entry", (PyObject *) &PyNs3NdnCsEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnCsStats_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnCsStats_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::cs::Stats' class */
    if (PyType_Ready(&PyNs3NdnCsStats_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Stats", (PyObject *) &PyNs3NdnCsStats_Type);
    return m;
}
static PyMethodDef ndnSIM_ndn_fib_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


static PyObject* _wrap_PyNs3NdnFibEntry__get_m_fib(PyNs3NdnFibEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnFib *py_Fib;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (self->obj->m_fib)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (self->obj->m_fib)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Fib = NULL;
    } else {
        py_Fib = (PyNs3NdnFib *) wrapper_lookup_iter->second;
        Py_INCREF(py_Fib);
    }
    
    if (py_Fib == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (self->obj->m_fib)))), &PyNs3NdnFib_Type);
        py_Fib = PyObject_GC_New(PyNs3NdnFib, wrapper_type);
        py_Fib->inst_dict = NULL;
    
        py_Fib->inst_dict = NULL;
        py_Fib->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (self->obj->m_fib))->Ref();
        py_Fib->obj = const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (self->obj->m_fib));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Fib->obj] = (PyObject *) py_Fib;
    }
    py_retval = Py_BuildValue((char *) "N", py_Fib);
    return py_retval;
}
static int _wrap_PyNs3NdnFibEntry__set_m_fib(PyNs3NdnFibEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnFib *tmp_Fib;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnFib_Type, &tmp_Fib)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->m_fib = ns3::Ptr< ns3::ndn::Fib  > (tmp_Fib->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnFibEntry__get_m_needsProbing(PyNs3NdnFibEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_needsProbing));
    return py_retval;
}
static int _wrap_PyNs3NdnFibEntry__set_m_needsProbing(PyNs3NdnFibEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_needsProbing = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnFibEntry__get_m_prefix(PyNs3NdnFibEntry *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::ndn::Name *> (ns3::PeekPointer (self->obj->m_prefix)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Name *> (ns3::PeekPointer (self->obj->m_prefix)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Name = NULL;
    } else {
        py_Name = (PyNs3NdnName *) wrapper_lookup_iter->second;
        Py_INCREF(py_Name);
    }
    
    if (py_Name == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Name *> (ns3::PeekPointer (self->obj->m_prefix)))), &PyNs3NdnName_Type);
        py_Name = PyObject_New(PyNs3NdnName, wrapper_type);
    
        py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Name *> (ns3::PeekPointer (self->obj->m_prefix))->Ref();
        py_Name->obj = const_cast<ns3::ndn::Name *> (ns3::PeekPointer (self->obj->m_prefix));
        PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    }
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}
static int _wrap_PyNs3NdnFibEntry__set_m_prefix(PyNs3NdnFibEntry *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnName *tmp_Name;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnName_Type, &tmp_Name)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->m_prefix = ns3::Ptr< ns3::ndn::Name  > (tmp_Name->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3NdnFibEntry__getsets[] = {
    {
        (char*) "m_needsProbing", /* attribute name */
        (getter) _wrap_PyNs3NdnFibEntry__get_m_needsProbing, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnFibEntry__set_m_needsProbing, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_prefix", /* attribute name */
        (getter) _wrap_PyNs3NdnFibEntry__get_m_prefix, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnFibEntry__set_m_prefix, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_fib", /* attribute name */
        (getter) _wrap_PyNs3NdnFibEntry__get_m_fib, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnFibEntry__set_m_fib, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

static int
_wrap_PyNs3NdnFibEntry__tp_init(PyNs3NdnFibEntry *self, PyObject *args, PyObject *kwargs)
{
    PyNs3NdnFibEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibEntry_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::ndn::fib::Entry(*((PyNs3NdnFibEntry *) arg0)->obj);
    self->obj->Ref ();
    ns3::CompleteConstruct(self->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3NdnFibEntry_Invalidate(PyNs3NdnFibEntry *self)
{
    PyObject *py_retval;
    
    self->obj->Invalidate();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibEntry_GetFib(PyNs3NdnFibEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Fib > retval;
    PyNs3NdnFib *py_Fib;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetFib();
    if (!(const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Fib = NULL;
    } else {
        py_Fib = (PyNs3NdnFib *) wrapper_lookup_iter->second;
        Py_INCREF(py_Fib);
    }
    
    if (py_Fib == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval)))), &PyNs3NdnFib_Type);
        py_Fib = PyObject_GC_New(PyNs3NdnFib, wrapper_type);
        py_Fib->inst_dict = NULL;
    
        py_Fib->inst_dict = NULL;
        py_Fib->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval))->Ref();
        py_Fib->obj = const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Fib->obj] = (PyObject *) py_Fib;
    }
    py_retval = Py_BuildValue((char *) "N", py_Fib);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibEntry_FindBestCandidate(PyNs3NdnFibEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int skip = 0;
    const char *keywords[] = {"skip", NULL};
    PyNs3NdnFibFaceMetric *py_FaceMetric;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|I", (char **) keywords, &skip)) {
        return NULL;
    }
    ns3::ndn::fib::FaceMetric const & retval = self->obj->FindBestCandidate(skip);
    py_FaceMetric = PyObject_New(PyNs3NdnFibFaceMetric, &PyNs3NdnFibFaceMetric_Type);
    py_FaceMetric->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_FaceMetric->obj = new ns3::ndn::fib::FaceMetric(retval);
    PyNs3NdnFibFaceMetric_wrapper_registry[(void *) py_FaceMetric->obj] = (PyObject *) py_FaceMetric;
    py_retval = Py_BuildValue((char *) "N", py_FaceMetric);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibEntry_AddOrUpdateRoutingMetric(PyNs3NdnFibEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    int32_t metric;
    const char *keywords[] = {"face", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3NdnFace_Type, &face, &metric)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->AddOrUpdateRoutingMetric(ns3::Ptr< ns3::ndn::Face  > (face_ptr), metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibEntry_SetRealDelayToProducer(PyNs3NdnFibEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    PyNs3Time *delay;
    const char *keywords[] = {"face", "delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnFace_Type, &face, &PyNs3Time_Type, &delay)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->SetRealDelayToProducer(ns3::Ptr< ns3::ndn::Face  > (face_ptr), *((PyNs3Time *) delay)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibEntry_GetPrefix(PyNs3NdnFibEntry *self)
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    
    ns3::ndn::Name const & retval = self->obj->GetPrefix();
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibEntry_UpdateFaceRtt(PyNs3NdnFibEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    PyNs3Time *sample;
    const char *keywords[] = {"face", "sample", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnFace_Type, &face, &PyNs3Time_Type, &sample)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->UpdateFaceRtt(ns3::Ptr< ns3::ndn::Face  > (face_ptr), *((PyNs3Time *) sample)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibEntry_UpdateStatus(PyNs3NdnFibEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    ns3::ndn::fib::FaceMetric::Status status;
    const char *keywords[] = {"face", "status", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3NdnFace_Type, &face, &status)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->UpdateStatus(ns3::Ptr< ns3::ndn::Face  > (face_ptr), status);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnFibEntry__copy__(PyNs3NdnFibEntry *self)
{

    PyNs3NdnFibEntry *py_copy;
    py_copy = PyObject_GC_New(PyNs3NdnFibEntry, &PyNs3NdnFibEntry_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ndn::fib::Entry(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFibEntry_methods[] = {
    {(char *) "Invalidate", (PyCFunction) _wrap_PyNs3NdnFibEntry_Invalidate, METH_NOARGS, NULL },
    {(char *) "GetFib", (PyCFunction) _wrap_PyNs3NdnFibEntry_GetFib, METH_NOARGS, NULL },
    {(char *) "FindBestCandidate", (PyCFunction) _wrap_PyNs3NdnFibEntry_FindBestCandidate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddOrUpdateRoutingMetric", (PyCFunction) _wrap_PyNs3NdnFibEntry_AddOrUpdateRoutingMetric, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetRealDelayToProducer", (PyCFunction) _wrap_PyNs3NdnFibEntry_SetRealDelayToProducer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPrefix", (PyCFunction) _wrap_PyNs3NdnFibEntry_GetPrefix, METH_NOARGS, NULL },
    {(char *) "UpdateFaceRtt", (PyCFunction) _wrap_PyNs3NdnFibEntry_UpdateFaceRtt, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UpdateStatus", (PyCFunction) _wrap_PyNs3NdnFibEntry_UpdateStatus, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFibEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnFibEntry__tp_clear(PyNs3NdnFibEntry *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::fib::Entry *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnFibEntry__tp_traverse(PyNs3NdnFibEntry *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3NdnFibEntry__tp_dealloc(PyNs3NdnFibEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnFibEntry__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnFibEntry__tp_str(PyNs3NdnFibEntry *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnFibEntry__tp_richcompare (PyNs3NdnFibEntry *PYBINDGEN_UNUSED(self), PyNs3NdnFibEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFibEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFibEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fib.Entry",            /* tp_name */
    sizeof(PyNs3NdnFibEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFibEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnFibEntry__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnFibEntry__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnFibEntry__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFibEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFibEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3NdnFibEntry__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnFibEntry, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFibEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnFibEntryNoFaces_wrapper_registry;


static int
_wrap_PyNs3NdnFibEntryNoFaces__tp_init__0(PyNs3NdnFibEntryNoFaces *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::Entry::NoFaces();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFibEntryNoFaces__tp_init__1(PyNs3NdnFibEntryNoFaces *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFibEntryNoFaces *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibEntryNoFaces_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::Entry::NoFaces(*((PyNs3NdnFibEntryNoFaces *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFibEntryNoFaces__tp_init(PyNs3NdnFibEntryNoFaces *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFibEntryNoFaces__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFibEntryNoFaces__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnFibEntryNoFaces__copy__(PyNs3NdnFibEntryNoFaces *self)
{

    PyNs3NdnFibEntryNoFaces *py_copy;
    py_copy = PyObject_New(PyNs3NdnFibEntryNoFaces, &PyNs3NdnFibEntryNoFaces_Type);
    py_copy->obj = new ns3::ndn::fib::Entry::NoFaces(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnFibEntryNoFaces_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFibEntryNoFaces_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFibEntryNoFaces__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFibEntryNoFaces__tp_dealloc(PyNs3NdnFibEntryNoFaces *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnFibEntryNoFaces_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnFibEntryNoFaces_wrapper_registry.end()) {
        PyNs3NdnFibEntryNoFaces_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::fib::Entry::NoFaces *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnFibEntryNoFaces__tp_richcompare (PyNs3NdnFibEntryNoFaces *PYBINDGEN_UNUSED(self), PyNs3NdnFibEntryNoFaces *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFibEntryNoFaces_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFibEntryNoFaces_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fib.Entry.NoFaces",            /* tp_name */
    sizeof(PyNs3NdnFibEntryNoFaces),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFibEntryNoFaces__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFibEntryNoFaces__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFibEntryNoFaces_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFibEntryNoFaces__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnFibFaceMetric_wrapper_registry;


static int
_wrap_PyNs3NdnFibFaceMetric__tp_init__0(PyNs3NdnFibFaceMetric *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFibFaceMetric *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibFaceMetric_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::FaceMetric(*((PyNs3NdnFibFaceMetric *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFibFaceMetric__tp_init__1(PyNs3NdnFibFaceMetric *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    int32_t cost;
    const char *keywords[] = {"face", "cost", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!i", (char **) keywords, &PyNs3NdnFace_Type, &face, &cost)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj = new ns3::ndn::fib::FaceMetric(ns3::Ptr< ns3::ndn::Face  > (face_ptr), cost);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFibFaceMetric__tp_init(PyNs3NdnFibFaceMetric *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFibFaceMetric__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFibFaceMetric__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_SetRealDelay(PyNs3NdnFibFaceMetric *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *realDelay;
    const char *keywords[] = {"realDelay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &realDelay)) {
        return NULL;
    }
    self->obj->SetRealDelay(*((PyNs3Time *) realDelay)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_GetStatusTrace(PyNs3NdnFibFaceMetric *self)
{
    PyObject *py_retval;
    PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *py_TracedValue;
    
    ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status > & retval = self->obj->GetStatusTrace();
    py_TracedValue = PyObject_New(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus, &PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type);
    py_TracedValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TracedValue->obj = new ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status >(retval);
    PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry[(void *) py_TracedValue->obj] = (PyObject *) py_TracedValue;
    py_retval = Py_BuildValue((char *) "N", py_TracedValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_GetStatus(PyNs3NdnFibFaceMetric *self)
{
    PyObject *py_retval;
    ns3::ndn::fib::FaceMetric::Status retval;
    
    retval = self->obj->GetStatus();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_GetRoutingCost(PyNs3NdnFibFaceMetric *self)
{
    PyObject *py_retval;
    int32_t retval;
    
    retval = self->obj->GetRoutingCost();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_GetRealDelay(PyNs3NdnFibFaceMetric *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetRealDelay();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_SetRoutingCost(PyNs3NdnFibFaceMetric *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int32_t routingCost;
    const char *keywords[] = {"routingCost", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &routingCost)) {
        return NULL;
    }
    self->obj->SetRoutingCost(routingCost);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_GetFace(PyNs3NdnFibFaceMetric *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Face > retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetFace();
    if (!(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = reinterpret_cast< PyNs3NdnFace* >(reinterpret_cast< PyNs3NdnFace__PythonHelper* >(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->inst_dict = NULL;
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Face);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_UpdateRtt(PyNs3NdnFibFaceMetric *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *rttSample;
    const char *keywords[] = {"rttSample", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &rttSample)) {
        return NULL;
    }
    self->obj->UpdateRtt(*((PyNs3Time *) rttSample)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFibFaceMetric_SetStatus(PyNs3NdnFibFaceMetric *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ndn::fib::FaceMetric::Status status;
    const char *keywords[] = {"status", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &status)) {
        return NULL;
    }
    self->obj->SetStatus(status);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnFibFaceMetric__copy__(PyNs3NdnFibFaceMetric *self)
{

    PyNs3NdnFibFaceMetric *py_copy;
    py_copy = PyObject_New(PyNs3NdnFibFaceMetric, &PyNs3NdnFibFaceMetric_Type);
    py_copy->obj = new ns3::ndn::fib::FaceMetric(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnFibFaceMetric_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFibFaceMetric_methods[] = {
    {(char *) "SetRealDelay", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_SetRealDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetStatusTrace", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_GetStatusTrace, METH_NOARGS, NULL },
    {(char *) "GetStatus", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_GetStatus, METH_NOARGS, NULL },
    {(char *) "GetRoutingCost", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_GetRoutingCost, METH_NOARGS, NULL },
    {(char *) "GetRealDelay", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_GetRealDelay, METH_NOARGS, NULL },
    {(char *) "SetRoutingCost", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_SetRoutingCost, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFace", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_GetFace, METH_NOARGS, NULL },
    {(char *) "UpdateRtt", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_UpdateRtt, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetStatus", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric_SetStatus, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFibFaceMetric__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFibFaceMetric__tp_dealloc(PyNs3NdnFibFaceMetric *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnFibFaceMetric_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnFibFaceMetric_wrapper_registry.end()) {
        PyNs3NdnFibFaceMetric_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::fib::FaceMetric *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnFibFaceMetric__tp_str(PyNs3NdnFibFaceMetric *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnFibFaceMetric__tp_richcompare (PyNs3NdnFibFaceMetric *PYBINDGEN_UNUSED(self), PyNs3NdnFibFaceMetric *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFibFaceMetric_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFibFaceMetric_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fib.FaceMetric",            /* tp_name */
    sizeof(PyNs3NdnFibFaceMetric),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFibFaceMetric__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnFibFaceMetric__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFibFaceMetric__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFibFaceMetric_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFibFaceMetric__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnFibFaceMetricContainer_wrapper_registry;


static int
_wrap_PyNs3NdnFibFaceMetricContainer__tp_init__0(PyNs3NdnFibFaceMetricContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::FaceMetricContainer();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFibFaceMetricContainer__tp_init__1(PyNs3NdnFibFaceMetricContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFibFaceMetricContainer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibFaceMetricContainer_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::FaceMetricContainer(*((PyNs3NdnFibFaceMetricContainer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFibFaceMetricContainer__tp_init(PyNs3NdnFibFaceMetricContainer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFibFaceMetricContainer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFibFaceMetricContainer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnFibFaceMetricContainer__copy__(PyNs3NdnFibFaceMetricContainer *self)
{

    PyNs3NdnFibFaceMetricContainer *py_copy;
    py_copy = PyObject_New(PyNs3NdnFibFaceMetricContainer, &PyNs3NdnFibFaceMetricContainer_Type);
    py_copy->obj = new ns3::ndn::fib::FaceMetricContainer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnFibFaceMetricContainer_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFibFaceMetricContainer_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFibFaceMetricContainer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFibFaceMetricContainer__tp_dealloc(PyNs3NdnFibFaceMetricContainer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnFibFaceMetricContainer_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnFibFaceMetricContainer_wrapper_registry.end()) {
        PyNs3NdnFibFaceMetricContainer_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::fib::FaceMetricContainer *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnFibFaceMetricContainer__tp_richcompare (PyNs3NdnFibFaceMetricContainer *PYBINDGEN_UNUSED(self), PyNs3NdnFibFaceMetricContainer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFibFaceMetricContainer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFibFaceMetricContainer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fib.FaceMetricContainer",            /* tp_name */
    sizeof(PyNs3NdnFibFaceMetricContainer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFibFaceMetricContainer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFibFaceMetricContainer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFibFaceMetricContainer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFibFaceMetricContainer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnFibI_face_wrapper_registry;


static int
_wrap_PyNs3NdnFibI_face__tp_init__0(PyNs3NdnFibI_face *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::i_face();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFibI_face__tp_init__1(PyNs3NdnFibI_face *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFibI_face *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibI_face_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::i_face(*((PyNs3NdnFibI_face *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFibI_face__tp_init(PyNs3NdnFibI_face *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFibI_face__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFibI_face__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnFibI_face__copy__(PyNs3NdnFibI_face *self)
{

    PyNs3NdnFibI_face *py_copy;
    py_copy = PyObject_New(PyNs3NdnFibI_face, &PyNs3NdnFibI_face_Type);
    py_copy->obj = new ns3::ndn::fib::i_face(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnFibI_face_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFibI_face_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFibI_face__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFibI_face__tp_dealloc(PyNs3NdnFibI_face *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnFibI_face_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnFibI_face_wrapper_registry.end()) {
        PyNs3NdnFibI_face_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::fib::i_face *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnFibI_face__tp_richcompare (PyNs3NdnFibI_face *PYBINDGEN_UNUSED(self), PyNs3NdnFibI_face *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFibI_face_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFibI_face_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fib.I_face",            /* tp_name */
    sizeof(PyNs3NdnFibI_face),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFibI_face__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFibI_face__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFibI_face_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFibI_face__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnFibI_metric_wrapper_registry;


static int
_wrap_PyNs3NdnFibI_metric__tp_init__0(PyNs3NdnFibI_metric *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::i_metric();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFibI_metric__tp_init__1(PyNs3NdnFibI_metric *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFibI_metric *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibI_metric_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::i_metric(*((PyNs3NdnFibI_metric *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFibI_metric__tp_init(PyNs3NdnFibI_metric *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFibI_metric__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFibI_metric__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnFibI_metric__copy__(PyNs3NdnFibI_metric *self)
{

    PyNs3NdnFibI_metric *py_copy;
    py_copy = PyObject_New(PyNs3NdnFibI_metric, &PyNs3NdnFibI_metric_Type);
    py_copy->obj = new ns3::ndn::fib::i_metric(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnFibI_metric_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFibI_metric_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFibI_metric__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFibI_metric__tp_dealloc(PyNs3NdnFibI_metric *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnFibI_metric_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnFibI_metric_wrapper_registry.end()) {
        PyNs3NdnFibI_metric_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::fib::i_metric *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnFibI_metric__tp_richcompare (PyNs3NdnFibI_metric *PYBINDGEN_UNUSED(self), PyNs3NdnFibI_metric *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFibI_metric_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFibI_metric_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fib.I_metric",            /* tp_name */
    sizeof(PyNs3NdnFibI_metric),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFibI_metric__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFibI_metric__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFibI_metric_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFibI_metric__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnFibI_nth_wrapper_registry;


static int
_wrap_PyNs3NdnFibI_nth__tp_init__0(PyNs3NdnFibI_nth *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::i_nth();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFibI_nth__tp_init__1(PyNs3NdnFibI_nth *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFibI_nth *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibI_nth_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fib::i_nth(*((PyNs3NdnFibI_nth *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFibI_nth__tp_init(PyNs3NdnFibI_nth *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFibI_nth__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFibI_nth__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnFibI_nth__copy__(PyNs3NdnFibI_nth *self)
{

    PyNs3NdnFibI_nth *py_copy;
    py_copy = PyObject_New(PyNs3NdnFibI_nth, &PyNs3NdnFibI_nth_Type);
    py_copy->obj = new ns3::ndn::fib::i_nth(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnFibI_nth_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFibI_nth_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFibI_nth__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFibI_nth__tp_dealloc(PyNs3NdnFibI_nth *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnFibI_nth_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnFibI_nth_wrapper_registry.end()) {
        PyNs3NdnFibI_nth_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::fib::i_nth *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnFibI_nth__tp_richcompare (PyNs3NdnFibI_nth *PYBINDGEN_UNUSED(self), PyNs3NdnFibI_nth *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFibI_nth_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFibI_nth_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fib.I_nth",            /* tp_name */
    sizeof(PyNs3NdnFibI_nth),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFibI_nth__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFibI_nth__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFibI_nth_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFibI_nth__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */



#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_ndn_fib_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.ndn.fib",
    NULL,
    -1,
    ndnSIM_ndn_fib_functions,
};
#endif

static PyObject *
initndnSIM_ndn_fib(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_ndn_fib_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.ndn.fib", ndnSIM_ndn_fib_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::fib::Entry), &PyNs3NdnFibEntry_Type);
    /* Register the 'ns3::ndn::fib::Entry' class */
    PyNs3NdnFibEntry_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnFibEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Entry", (PyObject *) &PyNs3NdnFibEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnFibEntryNoFaces_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnFibEntryNoFaces_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::fib::Entry::NoFaces' class */
    if (PyType_Ready(&PyNs3NdnFibEntryNoFaces_Type)) {
        return NULL;
    }
    PyDict_SetItemString((PyObject*) PyNs3NdnFibEntry_Type.tp_dict, (char *) "NoFaces", (PyObject *) &PyNs3NdnFibEntryNoFaces_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnFibFaceMetric_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnFibFaceMetric_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::fib::FaceMetric' class */
    if (PyType_Ready(&PyNs3NdnFibFaceMetric_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FaceMetric", (PyObject *) &PyNs3NdnFibFaceMetric_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnFibFaceMetricContainer_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnFibFaceMetricContainer_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::fib::FaceMetricContainer' class */
    if (PyType_Ready(&PyNs3NdnFibFaceMetricContainer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FaceMetricContainer", (PyObject *) &PyNs3NdnFibFaceMetricContainer_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnFibI_face_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnFibI_face_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::fib::i_face' class */
    if (PyType_Ready(&PyNs3NdnFibI_face_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "i_face", (PyObject *) &PyNs3NdnFibI_face_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnFibI_metric_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnFibI_metric_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::fib::i_metric' class */
    if (PyType_Ready(&PyNs3NdnFibI_metric_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "i_metric", (PyObject *) &PyNs3NdnFibI_metric_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnFibI_nth_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnFibI_nth_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::fib::i_nth' class */
    if (PyType_Ready(&PyNs3NdnFibI_nth_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "i_nth", (PyObject *) &PyNs3NdnFibI_nth_Type);
    {
        PyObject *tmp_value;
         // ns3::ndn::fib::FaceMetric::NDN_FIB_GREEN
        tmp_value = PyLong_FromLong(ns3::ndn::fib::FaceMetric::NDN_FIB_GREEN);
        PyDict_SetItemString((PyObject*) PyNs3NdnFibFaceMetric_Type.tp_dict, "NDN_FIB_GREEN", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::fib::FaceMetric::NDN_FIB_YELLOW
        tmp_value = PyLong_FromLong(ns3::ndn::fib::FaceMetric::NDN_FIB_YELLOW);
        PyDict_SetItemString((PyObject*) PyNs3NdnFibFaceMetric_Type.tp_dict, "NDN_FIB_YELLOW", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::fib::FaceMetric::NDN_FIB_RED
        tmp_value = PyLong_FromLong(ns3::ndn::fib::FaceMetric::NDN_FIB_RED);
        PyDict_SetItemString((PyObject*) PyNs3NdnFibFaceMetric_Type.tp_dict, "NDN_FIB_RED", tmp_value);
        Py_DECREF(tmp_value);
    }
    return m;
}
static PyMethodDef ndnSIM_ndn_fw_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


std::map<void*, PyObject*> PyNs3NdnFwTag_wrapper_registry;


static int
_wrap_PyNs3NdnFwTag__tp_init__0(PyNs3NdnFwTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fw::Tag();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFwTag__tp_init__1(PyNs3NdnFwTag *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFwTag *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFwTag_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::fw::Tag(*((PyNs3NdnFwTag *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFwTag__tp_init(PyNs3NdnFwTag *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFwTag__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFwTag__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnFwTag__copy__(PyNs3NdnFwTag *self)
{

    PyNs3NdnFwTag *py_copy;
    py_copy = PyObject_New(PyNs3NdnFwTag, &PyNs3NdnFwTag_Type);
    py_copy->obj = new ns3::ndn::fw::Tag(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnFwTag_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFwTag_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFwTag__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFwTag__tp_dealloc(PyNs3NdnFwTag *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnFwTag_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnFwTag_wrapper_registry.end()) {
        PyNs3NdnFwTag_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::fw::Tag *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnFwTag__tp_richcompare (PyNs3NdnFwTag *PYBINDGEN_UNUSED(self), PyNs3NdnFwTag *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFwTag_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFwTag_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.fw.Tag",            /* tp_name */
    sizeof(PyNs3NdnFwTag),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFwTag__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFwTag__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFwTag_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFwTag__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_ndn_fw_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.ndn.fw",
    NULL,
    -1,
    ndnSIM_ndn_fw_functions,
};
#endif

static PyObject *
initndnSIM_ndn_fw(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_ndn_fw_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.ndn.fw", ndnSIM_ndn_fw_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "_PyNs3NdnFwTag_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnFwTag_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::fw::Tag' class */
    if (PyType_Ready(&PyNs3NdnFwTag_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Tag", (PyObject *) &PyNs3NdnFwTag_Type);
    return m;
}
static PyMethodDef ndnSIM_ndn_name_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */




static int
_wrap_PyNs3NdnNameComponent__tp_init__0(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnNameComponent *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::name::Component(*((PyNs3NdnNameComponent *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnNameComponent__tp_init__1(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::name::Component();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnNameComponent__tp_init__2(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *uri;
    Py_ssize_t uri_len;
    std::string uri_std;
    const char *keywords[] = {"uri", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &uri, &uri_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    uri_std = std::string(uri, uri_len);
    self->obj = new ns3::ndn::name::Component(uri_std);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnNameComponent__tp_init(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnNameComponent__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnNameComponent__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnNameComponent__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnNameComponent_fromNumber(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t number;
    const char *keywords[] = {"number", NULL};
    PyNs3NdnNameComponent *py_Component;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &number)) {
        return NULL;
    }
    ns3::ndn::name::Component & retval = self->obj->fromNumber(number);
    py_Component = PyObject_New(PyNs3NdnNameComponent, &PyNs3NdnNameComponent_Type);
    py_Component->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Component->obj = new ns3::ndn::name::Component(retval);
    PyNs3NdnBlob_wrapper_registry[(void *) py_Component->obj] = (PyObject *) py_Component;
    py_retval = Py_BuildValue((char *) "N", py_Component);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_compare(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyNs3NdnNameComponent *other;
    const char *keywords[] = {"other", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &other)) {
        return NULL;
    }
    retval = self->obj->compare(*((PyNs3NdnNameComponent *) other)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toVersion(PyNs3NdnNameComponent *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->toVersion();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_fromUri(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *uri;
    Py_ssize_t uri_len;
    std::string uri_std;
    const char *keywords[] = {"uri", NULL};
    PyNs3NdnNameComponent *py_Component;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &uri, &uri_len)) {
        return NULL;
    }
    uri_std = std::string(uri, uri_len);
    ns3::ndn::name::Component & retval = self->obj->fromUri(uri_std);
    py_Component = PyObject_New(PyNs3NdnNameComponent, &PyNs3NdnNameComponent_Type);
    py_Component->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Component->obj = new ns3::ndn::name::Component(retval);
    PyNs3NdnBlob_wrapper_registry[(void *) py_Component->obj] = (PyObject *) py_Component;
    py_retval = Py_BuildValue((char *) "N", py_Component);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toBlob(PyNs3NdnNameComponent *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->toBlob();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toControlNum(PyNs3NdnNameComponent *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->toControlNum();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toUri(PyNs3NdnNameComponent *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->toUri();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toNumberWithMarker(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t retval;
    int marker;
    const char *keywords[] = {"marker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &marker)) {
        return NULL;
    }
    if (marker > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = self->obj->toNumberWithMarker(marker);
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toBlkId(PyNs3NdnNameComponent *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->toBlkId();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_fromNumberWithMarker(PyNs3NdnNameComponent *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t number;
    int marker;
    const char *keywords[] = {"number", "marker", NULL};
    PyNs3NdnNameComponent *py_Component;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Ki", (char **) keywords, &number, &marker)) {
        return NULL;
    }
    if (marker > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::ndn::name::Component & retval = self->obj->fromNumberWithMarker(number, marker);
    py_Component = PyObject_New(PyNs3NdnNameComponent, &PyNs3NdnNameComponent_Type);
    py_Component->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Component->obj = new ns3::ndn::name::Component(retval);
    PyNs3NdnBlob_wrapper_registry[(void *) py_Component->obj] = (PyObject *) py_Component;
    py_retval = Py_BuildValue((char *) "N", py_Component);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toSeqNum(PyNs3NdnNameComponent *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->toSeqNum();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameComponent_toNumber(PyNs3NdnNameComponent *self)
{
    PyObject *py_retval;
    uint64_t retval;
    
    retval = self->obj->toNumber();
    py_retval = Py_BuildValue((char *) "K", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnNameComponent__copy__(PyNs3NdnNameComponent *self)
{

    PyNs3NdnNameComponent *py_copy;
    py_copy = PyObject_New(PyNs3NdnNameComponent, &PyNs3NdnNameComponent_Type);
    py_copy->obj = new ns3::ndn::name::Component(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnBlob_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnNameComponent_methods[] = {
    {(char *) "fromNumber", (PyCFunction) _wrap_PyNs3NdnNameComponent_fromNumber, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "compare", (PyCFunction) _wrap_PyNs3NdnNameComponent_compare, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "toVersion", (PyCFunction) _wrap_PyNs3NdnNameComponent_toVersion, METH_NOARGS, NULL },
    {(char *) "fromUri", (PyCFunction) _wrap_PyNs3NdnNameComponent_fromUri, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "toBlob", (PyCFunction) _wrap_PyNs3NdnNameComponent_toBlob, METH_NOARGS, NULL },
    {(char *) "toControlNum", (PyCFunction) _wrap_PyNs3NdnNameComponent_toControlNum, METH_NOARGS, NULL },
    {(char *) "toUri", (PyCFunction) _wrap_PyNs3NdnNameComponent_toUri, METH_NOARGS, NULL },
    {(char *) "toNumberWithMarker", (PyCFunction) _wrap_PyNs3NdnNameComponent_toNumberWithMarker, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "toBlkId", (PyCFunction) _wrap_PyNs3NdnNameComponent_toBlkId, METH_NOARGS, NULL },
    {(char *) "fromNumberWithMarker", (PyCFunction) _wrap_PyNs3NdnNameComponent_fromNumberWithMarker, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "toSeqNum", (PyCFunction) _wrap_PyNs3NdnNameComponent_toSeqNum, METH_NOARGS, NULL },
    {(char *) "toNumber", (PyCFunction) _wrap_PyNs3NdnNameComponent_toNumber, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnNameComponent__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnNameComponent__tp_dealloc(PyNs3NdnNameComponent *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnBlob_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnBlob_wrapper_registry.end()) {
        PyNs3NdnBlob_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::name::Component *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnNameComponent__tp_str(PyNs3NdnNameComponent *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnNameComponent__tp_richcompare (PyNs3NdnNameComponent *PYBINDGEN_UNUSED(self), PyNs3NdnNameComponent *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnNameComponent_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        if (*self->obj <= *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        if (*self->obj >= *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GT:
        if (*self->obj > *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnNameComponent_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.name.Component",            /* tp_name */
    sizeof(PyNs3NdnNameComponent),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnNameComponent__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnNameComponent__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnNameComponent__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnNameComponent_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnNameComponent__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_ndn_name_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.ndn.name",
    NULL,
    -1,
    ndnSIM_ndn_name_functions,
};
#endif

static PyObject *
initndnSIM_ndn_name(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_ndn_name_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.ndn.name", ndnSIM_ndn_name_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    /* Register the 'ns3::ndn::name::Component' class */
    PyNs3NdnNameComponent_Type.tp_base = &PyNs3NdnBlob_Type;
    if (PyType_Ready(&PyNs3NdnNameComponent_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Component", (PyObject *) &PyNs3NdnNameComponent_Type);
    return m;
}
static PyMethodDef ndnSIM_ndn_pit_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */




static int
_wrap_PyNs3NdnPitEntry__tp_init__0(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnPitEntry *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::pit::Entry(*((PyNs3NdnPitEntry *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnPitEntry__tp_init__1(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnPit *container;
    PyNs3NdnInterest *header;
    ns3::ndn::Interest *header_ptr;
    PyNs3NdnFibEntry *fibEntry;
    ns3::ndn::fib::Entry *fibEntry_ptr;
    const char *keywords[] = {"container", "header", "fibEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnPit_Type, &container, &PyNs3NdnInterest_Type, &header, &PyNs3NdnFibEntry_Type, &fibEntry)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    header_ptr = (header ? header->obj : NULL);
    fibEntry_ptr = (fibEntry ? fibEntry->obj : NULL);
    self->obj = new ns3::ndn::pit::Entry(*((PyNs3NdnPit *) container)->obj, ns3::Ptr< ns3::ndn::Interest  > (header_ptr), ns3::Ptr< ns3::ndn::fib::Entry  > (fibEntry_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnPitEntry__tp_init(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnPitEntry__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnPitEntry__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnPitEntry_RemoveAllReferencesToFace(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->RemoveAllReferencesToFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetInterest(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Interest const > retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetInterest();
    if (!(const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = Py_BuildValue((char *) "N", py_Interest);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_RemoveIncoming(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->RemoveIncoming(ns3::Ptr< ns3::ndn::Face  > (face_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_OffsetLifetime(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *offsetTime;
    const char *keywords[] = {"offsetTime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &offsetTime)) {
        return NULL;
    }
    self->obj->OffsetLifetime(*((PyNs3Time *) offsetTime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_ClearIncoming(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    
    self->obj->ClearIncoming();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_SetWaitingInVain(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->SetWaitingInVain(ns3::Ptr< ns3::ndn::Face  > (face_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_ClearOutgoing(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    
    self->obj->ClearOutgoing();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_AreTherePromisingOutgoingFacesExcept(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    retval = self->obj->AreTherePromisingOutgoingFacesExcept(ns3::Ptr< ns3::ndn::Face  > (face_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetOutgoingCount(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetOutgoingCount();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_IsNonceSeen(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    unsigned int nonce;
    const char *keywords[] = {"nonce", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nonce)) {
        return NULL;
    }
    retval = self->obj->IsNonceSeen(nonce);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_UpdateLifetime(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *lifetime;
    const char *keywords[] = {"lifetime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &lifetime)) {
        return NULL;
    }
    self->obj->UpdateLifetime(*((PyNs3Time *) lifetime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetPrefix(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    
    ns3::ndn::Name const & retval = self->obj->GetPrefix();
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetIncoming(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    std::set< ns3::ndn::pit::IncomingFace > retval;
    Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__ *py_std__set__lt___ns3__ndn__pit__IncomingFace___gt__;
    
    retval = self->obj->GetIncoming();
    py_std__set__lt___ns3__ndn__pit__IncomingFace___gt__ = PyObject_New(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__, &Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt___Type);
    py_std__set__lt___ns3__ndn__pit__IncomingFace___gt__->obj = new std::set< ns3::ndn::pit::IncomingFace >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt___ns3__ndn__pit__IncomingFace___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_IncreaseAllowedRetxCount(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    
    self->obj->IncreaseAllowedRetxCount();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_AreAllOutgoingInVain(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->AreAllOutgoingInVain();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetMaxRetxCount(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetMaxRetxCount();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_AddSeenNonce(PyNs3NdnPitEntry *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nonce;
    const char *keywords[] = {"nonce", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nonce)) {
        return NULL;
    }
    self->obj->AddSeenNonce(nonce);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetFibEntry(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry > retval;
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetFibEntry();
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetExpireTime(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time const & retval = self->obj->GetExpireTime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPitEntry_GetOutgoing(PyNs3NdnPitEntry *self)
{
    PyObject *py_retval;
    std::set< ns3::ndn::pit::OutgoingFace > retval;
    Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__ *py_std__set__lt___ns3__ndn__pit__OutgoingFace___gt__;
    
    retval = self->obj->GetOutgoing();
    py_std__set__lt___ns3__ndn__pit__OutgoingFace___gt__ = PyObject_New(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__, &Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt___Type);
    py_std__set__lt___ns3__ndn__pit__OutgoingFace___gt__->obj = new std::set< ns3::ndn::pit::OutgoingFace >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__set__lt___ns3__ndn__pit__OutgoingFace___gt__);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnPitEntry__copy__(PyNs3NdnPitEntry *self)
{

    PyNs3NdnPitEntry *py_copy;
    py_copy = PyObject_New(PyNs3NdnPitEntry, &PyNs3NdnPitEntry_Type);
    
    py_copy->obj = new ns3::ndn::pit::Entry(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnPitEntry_methods[] = {
    {(char *) "RemoveAllReferencesToFace", (PyCFunction) _wrap_PyNs3NdnPitEntry_RemoveAllReferencesToFace, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInterest", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetInterest, METH_NOARGS, NULL },
    {(char *) "RemoveIncoming", (PyCFunction) _wrap_PyNs3NdnPitEntry_RemoveIncoming, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "OffsetLifetime", (PyCFunction) _wrap_PyNs3NdnPitEntry_OffsetLifetime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ClearIncoming", (PyCFunction) _wrap_PyNs3NdnPitEntry_ClearIncoming, METH_NOARGS, NULL },
    {(char *) "SetWaitingInVain", (PyCFunction) _wrap_PyNs3NdnPitEntry_SetWaitingInVain, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ClearOutgoing", (PyCFunction) _wrap_PyNs3NdnPitEntry_ClearOutgoing, METH_NOARGS, NULL },
    {(char *) "AreTherePromisingOutgoingFacesExcept", (PyCFunction) _wrap_PyNs3NdnPitEntry_AreTherePromisingOutgoingFacesExcept, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetOutgoingCount", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetOutgoingCount, METH_NOARGS, NULL },
    {(char *) "IsNonceSeen", (PyCFunction) _wrap_PyNs3NdnPitEntry_IsNonceSeen, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "UpdateLifetime", (PyCFunction) _wrap_PyNs3NdnPitEntry_UpdateLifetime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPrefix", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetPrefix, METH_NOARGS, NULL },
    {(char *) "GetIncoming", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetIncoming, METH_NOARGS, NULL },
    {(char *) "IncreaseAllowedRetxCount", (PyCFunction) _wrap_PyNs3NdnPitEntry_IncreaseAllowedRetxCount, METH_NOARGS, NULL },
    {(char *) "AreAllOutgoingInVain", (PyCFunction) _wrap_PyNs3NdnPitEntry_AreAllOutgoingInVain, METH_NOARGS, NULL },
    {(char *) "GetMaxRetxCount", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetMaxRetxCount, METH_NOARGS, NULL },
    {(char *) "AddSeenNonce", (PyCFunction) _wrap_PyNs3NdnPitEntry_AddSeenNonce, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFibEntry", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetFibEntry, METH_NOARGS, NULL },
    {(char *) "GetExpireTime", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetExpireTime, METH_NOARGS, NULL },
    {(char *) "GetOutgoing", (PyCFunction) _wrap_PyNs3NdnPitEntry_GetOutgoing, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnPitEntry__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnPitEntry__tp_dealloc(PyNs3NdnPitEntry *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::pit::Entry *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnPitEntry__tp_str(PyNs3NdnPitEntry *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnPitEntry__tp_richcompare (PyNs3NdnPitEntry *PYBINDGEN_UNUSED(self), PyNs3NdnPitEntry *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnPitEntry_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnPitEntry_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.Entry",            /* tp_name */
    sizeof(PyNs3NdnPitEntry),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnPitEntry__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnPitEntry__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnPitEntry__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnPitEntry_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnPitEntry__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnPitEntryIsNotEmpty_wrapper_registry;


static int
_wrap_PyNs3NdnPitEntryIsNotEmpty__tp_init__0(PyNs3NdnPitEntryIsNotEmpty *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::pit::EntryIsNotEmpty();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnPitEntryIsNotEmpty__tp_init__1(PyNs3NdnPitEntryIsNotEmpty *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnPitEntryIsNotEmpty *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitEntryIsNotEmpty_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::pit::EntryIsNotEmpty(*((PyNs3NdnPitEntryIsNotEmpty *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnPitEntryIsNotEmpty__tp_init(PyNs3NdnPitEntryIsNotEmpty *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnPitEntryIsNotEmpty__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnPitEntryIsNotEmpty__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnPitEntryIsNotEmpty___call__(PyNs3NdnPitEntryIsNotEmpty *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnPitEntry *entry;
    ns3::ndn::pit::Entry *entry_ptr;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitEntry_Type, &entry)) {
        return NULL;
    }
    entry_ptr = (entry ? entry->obj : NULL);
    retval = self->obj->operator()(ns3::Ptr< ns3::ndn::pit::Entry  > (entry_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnPitEntryIsNotEmpty__copy__(PyNs3NdnPitEntryIsNotEmpty *self)
{

    PyNs3NdnPitEntryIsNotEmpty *py_copy;
    py_copy = PyObject_New(PyNs3NdnPitEntryIsNotEmpty, &PyNs3NdnPitEntryIsNotEmpty_Type);
    py_copy->obj = new ns3::ndn::pit::EntryIsNotEmpty(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnPitEntryIsNotEmpty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnPitEntryIsNotEmpty_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnPitEntryIsNotEmpty__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnPitEntryIsNotEmpty__tp_dealloc(PyNs3NdnPitEntryIsNotEmpty *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnPitEntryIsNotEmpty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnPitEntryIsNotEmpty_wrapper_registry.end()) {
        PyNs3NdnPitEntryIsNotEmpty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::pit::EntryIsNotEmpty *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnPitEntryIsNotEmpty__tp_richcompare (PyNs3NdnPitEntryIsNotEmpty *PYBINDGEN_UNUSED(self), PyNs3NdnPitEntryIsNotEmpty *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnPitEntryIsNotEmpty_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnPitEntryIsNotEmpty_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.EntryIsNotEmpty",            /* tp_name */
    sizeof(PyNs3NdnPitEntryIsNotEmpty),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnPitEntryIsNotEmpty__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)_wrap_PyNs3NdnPitEntryIsNotEmpty___call__,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnPitEntryIsNotEmpty__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnPitEntryIsNotEmpty_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnPitEntryIsNotEmpty__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnPitIncomingFace_wrapper_registry;
static PyObject* _wrap_PyNs3NdnPitIncomingFace__get_m_arrivalTime(PyNs3NdnPitIncomingFace *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_arrivalTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3NdnPitIncomingFace__set_m_arrivalTime(PyNs3NdnPitIncomingFace *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_arrivalTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnPitIncomingFace__get_m_face(PyNs3NdnPitIncomingFace *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = reinterpret_cast< PyNs3NdnFace* >(reinterpret_cast< PyNs3NdnFace__PythonHelper* >(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->inst_dict = NULL;
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Face);
    return py_retval;
}
static int _wrap_PyNs3NdnPitIncomingFace__set_m_face(PyNs3NdnPitIncomingFace *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnFace *tmp_Face;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnFace_Type, &tmp_Face)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->m_face = ns3::Ptr< ns3::ndn::Face  > (tmp_Face->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3NdnPitIncomingFace__getsets[] = {
    {
        (char*) "m_arrivalTime", /* attribute name */
        (getter) _wrap_PyNs3NdnPitIncomingFace__get_m_arrivalTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnPitIncomingFace__set_m_arrivalTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_face", /* attribute name */
        (getter) _wrap_PyNs3NdnPitIncomingFace__get_m_face, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnPitIncomingFace__set_m_face, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3NdnPitIncomingFace__tp_init__0(PyNs3NdnPitIncomingFace *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnPitIncomingFace *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitIncomingFace_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::pit::IncomingFace(*((PyNs3NdnPitIncomingFace *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnPitIncomingFace__tp_init__1(PyNs3NdnPitIncomingFace *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj = new ns3::ndn::pit::IncomingFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnPitIncomingFace__tp_init__2(PyNs3NdnPitIncomingFace *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::pit::IncomingFace();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnPitIncomingFace__tp_init(PyNs3NdnPitIncomingFace *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnPitIncomingFace__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnPitIncomingFace__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnPitIncomingFace__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnPitIncomingFace__copy__(PyNs3NdnPitIncomingFace *self)
{

    PyNs3NdnPitIncomingFace *py_copy;
    py_copy = PyObject_New(PyNs3NdnPitIncomingFace, &PyNs3NdnPitIncomingFace_Type);
    py_copy->obj = new ns3::ndn::pit::IncomingFace(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnPitIncomingFace_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnPitIncomingFace_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnPitIncomingFace__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnPitIncomingFace__tp_dealloc(PyNs3NdnPitIncomingFace *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnPitIncomingFace_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnPitIncomingFace_wrapper_registry.end()) {
        PyNs3NdnPitIncomingFace_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::pit::IncomingFace *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnPitIncomingFace__tp_richcompare (PyNs3NdnPitIncomingFace *PYBINDGEN_UNUSED(self), PyNs3NdnPitIncomingFace *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnPitIncomingFace_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnPitIncomingFace_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.IncomingFace",            /* tp_name */
    sizeof(PyNs3NdnPitIncomingFace),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnPitIncomingFace__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnPitIncomingFace__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnPitIncomingFace_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3NdnPitIncomingFace__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnPitIncomingFace__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnPitOutgoingFace_wrapper_registry;
static PyObject* _wrap_PyNs3NdnPitOutgoingFace__get_m_face(PyNs3NdnPitOutgoingFace *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = reinterpret_cast< PyNs3NdnFace* >(reinterpret_cast< PyNs3NdnFace__PythonHelper* >(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face)))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->inst_dict = NULL;
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (self->obj->m_face));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Face);
    return py_retval;
}
static int _wrap_PyNs3NdnPitOutgoingFace__set_m_face(PyNs3NdnPitOutgoingFace *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3NdnFace *tmp_Face;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnFace_Type, &tmp_Face)) {
        Py_DECREF(py_retval);
        return -1;
    }
    // dangerous!
    self->obj->m_face = ns3::Ptr< ns3::ndn::Face  > (tmp_Face->obj);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnPitOutgoingFace__get_m_retxCount(PyNs3NdnPitOutgoingFace *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->m_retxCount));
    return py_retval;
}
static int _wrap_PyNs3NdnPitOutgoingFace__set_m_retxCount(PyNs3NdnPitOutgoingFace *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->m_retxCount)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnPitOutgoingFace__get_m_sendTime(PyNs3NdnPitOutgoingFace *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->m_sendTime);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3NdnPitOutgoingFace__set_m_sendTime(PyNs3NdnPitOutgoingFace *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_sendTime = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnPitOutgoingFace__get_m_waitingInVain(PyNs3NdnPitOutgoingFace *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->m_waitingInVain));
    return py_retval;
}
static int _wrap_PyNs3NdnPitOutgoingFace__set_m_waitingInVain(PyNs3NdnPitOutgoingFace *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->m_waitingInVain = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3NdnPitOutgoingFace__getsets[] = {
    {
        (char*) "m_sendTime", /* attribute name */
        (getter) _wrap_PyNs3NdnPitOutgoingFace__get_m_sendTime, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnPitOutgoingFace__set_m_sendTime, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_face", /* attribute name */
        (getter) _wrap_PyNs3NdnPitOutgoingFace__get_m_face, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnPitOutgoingFace__set_m_face, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_waitingInVain", /* attribute name */
        (getter) _wrap_PyNs3NdnPitOutgoingFace__get_m_waitingInVain, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnPitOutgoingFace__set_m_waitingInVain, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "m_retxCount", /* attribute name */
        (getter) _wrap_PyNs3NdnPitOutgoingFace__get_m_retxCount, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnPitOutgoingFace__set_m_retxCount, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3NdnPitOutgoingFace__tp_init__0(PyNs3NdnPitOutgoingFace *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnPitOutgoingFace *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitOutgoingFace_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::pit::OutgoingFace(*((PyNs3NdnPitOutgoingFace *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnPitOutgoingFace__tp_init__1(PyNs3NdnPitOutgoingFace *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj = new ns3::ndn::pit::OutgoingFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnPitOutgoingFace__tp_init__2(PyNs3NdnPitOutgoingFace *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::pit::OutgoingFace();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnPitOutgoingFace__tp_init(PyNs3NdnPitOutgoingFace *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnPitOutgoingFace__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnPitOutgoingFace__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnPitOutgoingFace__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnPitOutgoingFace_UpdateOnRetransmit(PyNs3NdnPitOutgoingFace *self)
{
    PyObject *py_retval;
    
    self->obj->UpdateOnRetransmit();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnPitOutgoingFace__copy__(PyNs3NdnPitOutgoingFace *self)
{

    PyNs3NdnPitOutgoingFace *py_copy;
    py_copy = PyObject_New(PyNs3NdnPitOutgoingFace, &PyNs3NdnPitOutgoingFace_Type);
    py_copy->obj = new ns3::ndn::pit::OutgoingFace(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnPitOutgoingFace_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnPitOutgoingFace_methods[] = {
    {(char *) "UpdateOnRetransmit", (PyCFunction) _wrap_PyNs3NdnPitOutgoingFace_UpdateOnRetransmit, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnPitOutgoingFace__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnPitOutgoingFace__tp_dealloc(PyNs3NdnPitOutgoingFace *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnPitOutgoingFace_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnPitOutgoingFace_wrapper_registry.end()) {
        PyNs3NdnPitOutgoingFace_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::pit::OutgoingFace *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnPitOutgoingFace__tp_richcompare (PyNs3NdnPitOutgoingFace *PYBINDGEN_UNUSED(self), PyNs3NdnPitOutgoingFace *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnPitOutgoingFace_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnPitOutgoingFace_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.OutgoingFace",            /* tp_name */
    sizeof(PyNs3NdnPitOutgoingFace),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnPitOutgoingFace__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnPitOutgoingFace__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnPitOutgoingFace_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3NdnPitOutgoingFace__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnPitOutgoingFace__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_clear(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_traverse(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt____tp_dealloc(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_dealloc(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt____tp_iter(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__ *self)
{
    Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter *iter = PyObject_GC_New(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter, &Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::set< ns3::ndn::pit::IncomingFace >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_iter(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_iternext(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter *self)
{
    PyObject *py_retval;
    std::set< ns3::ndn::pit::IncomingFace >::iterator iter;
    PyNs3NdnPitIncomingFace *py_IncomingFace;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_IncomingFace = PyObject_New(PyNs3NdnPitIncomingFace, &PyNs3NdnPitIncomingFace_Type);
    py_IncomingFace->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_IncomingFace->obj = new ns3::ndn::pit::IncomingFace((*iter));
    PyNs3NdnPitIncomingFace_wrapper_registry[(void *) py_IncomingFace->obj] = (PyObject *) py_IncomingFace;
    py_retval = Py_BuildValue((char *) "N", py_IncomingFace);
    return py_retval;
}

int _wrap_convert_py2c__ns3__ndn__pit__IncomingFace(PyObject *value, ns3::ndn::pit::IncomingFace *address)
{
    PyObject *py_retval;
    PyNs3NdnPitIncomingFace *tmp_IncomingFace;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnPitIncomingFace_Type, &tmp_IncomingFace)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_IncomingFace->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__set__lt___ns3__ndn__pit__IncomingFace___gt__(PyObject *arg, std::set< ns3::ndn::pit::IncomingFace > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt___Type)) {
        *container = *((Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::ndn::pit::IncomingFace item;
            if (!_wrap_convert_py2c__ns3__ndn__pit__IncomingFace(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__set__lt___ns3__ndn__pit__IncomingFace___gt__ instance, or a list of ns3::ndn::pit::IncomingFace");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt____tp_init(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::set< ns3::ndn::pit::IncomingFace >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__set__lt___ns3__ndn__pit__IncomingFace___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.Std__set__lt___ns3__ndn__pit__IncomingFace___gt__",            /* tp_name */
    sizeof(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.Std__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter",            /* tp_name */
    sizeof(Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_clear(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_traverse(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt____tp_dealloc(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_dealloc(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt____tp_iter(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__ *self)
{
    Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter *iter = PyObject_GC_New(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter, &Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::set< ns3::ndn::pit::OutgoingFace >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_iter(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_iternext(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter *self)
{
    PyObject *py_retval;
    std::set< ns3::ndn::pit::OutgoingFace >::iterator iter;
    PyNs3NdnPitOutgoingFace *py_OutgoingFace;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_OutgoingFace = PyObject_New(PyNs3NdnPitOutgoingFace, &PyNs3NdnPitOutgoingFace_Type);
    py_OutgoingFace->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_OutgoingFace->obj = new ns3::ndn::pit::OutgoingFace((*iter));
    PyNs3NdnPitOutgoingFace_wrapper_registry[(void *) py_OutgoingFace->obj] = (PyObject *) py_OutgoingFace;
    py_retval = Py_BuildValue((char *) "N", py_OutgoingFace);
    return py_retval;
}

int _wrap_convert_py2c__ns3__ndn__pit__OutgoingFace(PyObject *value, ns3::ndn::pit::OutgoingFace *address)
{
    PyObject *py_retval;
    PyNs3NdnPitOutgoingFace *tmp_OutgoingFace;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnPitOutgoingFace_Type, &tmp_OutgoingFace)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_OutgoingFace->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__set__lt___ns3__ndn__pit__OutgoingFace___gt__(PyObject *arg, std::set< ns3::ndn::pit::OutgoingFace > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt___Type)) {
        *container = *((Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::ndn::pit::OutgoingFace item;
            if (!_wrap_convert_py2c__ns3__ndn__pit__OutgoingFace(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__set__lt___ns3__ndn__pit__OutgoingFace___gt__ instance, or a list of ns3::ndn::pit::OutgoingFace");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt____tp_init(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::set< ns3::ndn::pit::OutgoingFace >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__set__lt___ns3__ndn__pit__OutgoingFace___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.Std__set__lt___ns3__ndn__pit__OutgoingFace___gt__",            /* tp_name */
    sizeof(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.Std__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter",            /* tp_name */
    sizeof(Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__set__lt___unsigned_int___gt__Iter__tp_clear(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__set__lt___unsigned_int___gt__Iter__tp_traverse(Pystd__set__lt___unsigned_int___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__set__lt___unsigned_int___gt____tp_dealloc(Pystd__set__lt___unsigned_int___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_dealloc(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__set__lt___unsigned_int___gt____tp_iter(Pystd__set__lt___unsigned_int___gt__ *self)
{
    Pystd__set__lt___unsigned_int___gt__Iter *iter = PyObject_GC_New(Pystd__set__lt___unsigned_int___gt__Iter, &Pystd__set__lt___unsigned_int___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::set< unsigned int >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iter(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iternext(Pystd__set__lt___unsigned_int___gt__Iter *self)
{
    PyObject *py_retval;
    std::set< unsigned int >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong((*iter)));
    return py_retval;
}

int _wrap_convert_py2c__unsigned_int(PyObject *value, unsigned int *address)
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__set__lt___unsigned_int___gt__(PyObject *arg, std::set< unsigned int > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__set__lt___unsigned_int___gt___Type)) {
        *container = *((Pystd__set__lt___unsigned_int___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            unsigned int item;
            if (!_wrap_convert_py2c__unsigned_int(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__set__lt___unsigned_int___gt__ instance, or a list of unsigned int");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__set__lt___unsigned_int___gt____tp_init(Pystd__set__lt___unsigned_int___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::set< unsigned int >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__set__lt___unsigned_int___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__set__lt___unsigned_int___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.Std__set__lt___unsigned_int___gt__",            /* tp_name */
    sizeof(Pystd__set__lt___unsigned_int___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___unsigned_int___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___unsigned_int___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__set__lt___unsigned_int___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__set__lt___unsigned_int___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.pit.Std__set__lt___unsigned_int___gt__Iter",            /* tp_name */
    sizeof(Pystd__set__lt___unsigned_int___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__set__lt___unsigned_int___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__set__lt___unsigned_int___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__set__lt___unsigned_int___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_ndn_pit_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.ndn.pit",
    NULL,
    -1,
    ndnSIM_ndn_pit_functions,
};
#endif

static PyObject *
initndnSIM_ndn_pit(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_ndn_pit_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.ndn.pit", ndnSIM_ndn_pit_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.register_wrapper(typeid(ns3::ndn::pit::Entry), &PyNs3NdnPitEntry_Type);
    /* Register the 'ns3::ndn::pit::Entry' class */
    PyNs3NdnPitEntry_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type;
    if (PyType_Ready(&PyNs3NdnPitEntry_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Entry", (PyObject *) &PyNs3NdnPitEntry_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnPitEntryIsNotEmpty_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnPitEntryIsNotEmpty_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::pit::EntryIsNotEmpty' class */
    if (PyType_Ready(&PyNs3NdnPitEntryIsNotEmpty_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "EntryIsNotEmpty", (PyObject *) &PyNs3NdnPitEntryIsNotEmpty_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnPitIncomingFace_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnPitIncomingFace_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::pit::IncomingFace' class */
    if (PyType_Ready(&PyNs3NdnPitIncomingFace_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IncomingFace", (PyObject *) &PyNs3NdnPitIncomingFace_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnPitOutgoingFace_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnPitOutgoingFace_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::pit::OutgoingFace' class */
    if (PyType_Ready(&PyNs3NdnPitOutgoingFace_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "OutgoingFace", (PyObject *) &PyNs3NdnPitOutgoingFace_Type);
    /* Register the 'std::set< ns3::ndn::pit::IncomingFace >' class */
    if (PyType_Ready(&Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__set__lt___ns3__ndn__pit__IncomingFace___gt__", (PyObject *) &Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt___Type);
    PyModule_AddObject(m, (char *) "Std__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter", (PyObject *) &Pystd__set__lt___ns3__ndn__pit__IncomingFace___gt__Iter_Type);
    /* Register the 'std::set< ns3::ndn::pit::OutgoingFace >' class */
    if (PyType_Ready(&Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__set__lt___ns3__ndn__pit__OutgoingFace___gt__", (PyObject *) &Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt___Type);
    PyModule_AddObject(m, (char *) "Std__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter", (PyObject *) &Pystd__set__lt___ns3__ndn__pit__OutgoingFace___gt__Iter_Type);
    /* Register the 'std::set< unsigned int >' class */
    if (PyType_Ready(&Pystd__set__lt___unsigned_int___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__set__lt___unsigned_int___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__set__lt___unsigned_int___gt__", (PyObject *) &Pystd__set__lt___unsigned_int___gt___Type);
    PyModule_AddObject(m, (char *) "Std__set__lt___unsigned_int___gt__Iter", (PyObject *) &Pystd__set__lt___unsigned_int___gt__Iter_Type);
    return m;
}
/* --- module functions --- */


PyObject *
_wrap_ndnSIM_ndn_time_NowUnixTimestamp()
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = ns3::ndn::time::NowUnixTimestamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
PyObject * _wrap_ndnSIM_ndn_time_NowUnixTimestamp();

static PyMethodDef ndnSIM_ndn_time_functions[] = {
    {(char *) "NowUnixTimestamp", (PyCFunction) _wrap_ndnSIM_ndn_time_NowUnixTimestamp, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};
#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_ndn_time_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.ndn.time",
    NULL,
    -1,
    ndnSIM_ndn_time_functions,
};
#endif

static PyObject *
initndnSIM_ndn_time(void)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_ndn_time_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.ndn.time", ndnSIM_ndn_time_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    return m;
}
/* --- module functions --- */


PyObject *
_wrap_ndnSIM_ndn_MakeNameChecker()
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeChecker const > retval;
    PyNs3AttributeChecker *py_AttributeChecker;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = ns3::ndn::MakeNameChecker();
    if (!(const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeChecker = NULL;
    } else {
        py_AttributeChecker = (PyNs3AttributeChecker *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeChecker);
    }
    
    if (py_AttributeChecker == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval)))), &PyNs3AttributeChecker_Type);
        py_AttributeChecker = PyObject_New(PyNs3AttributeChecker, wrapper_type);
    
        py_AttributeChecker->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeChecker->obj = const_cast<ns3::AttributeChecker *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeChecker->obj] = (PyObject *) py_AttributeChecker;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeChecker);
    return py_retval;
}
PyObject * _wrap_ndnSIM_ndn_MakeNameChecker();


PyObject *
_wrap_ndnSIM_ndn_PacketToBuffer(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3Packet *pkt;
    ns3::Packet *pkt_ptr;
    const char *keywords[] = {"pkt", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &pkt)) {
        return NULL;
    }
    pkt_ptr = (pkt ? pkt->obj : NULL);
    retval = ns3::ndn::PacketToBuffer(ns3::Ptr< ns3::Packet  > (pkt_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}
PyObject * _wrap_ndnSIM_ndn_PacketToBuffer(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_ndnSIM_ndn_BufferToPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    const char *buffer;
    Py_ssize_t buffer_len;
    std::string buffer_std;
    const char *keywords[] = {"buffer", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &buffer, &buffer_len)) {
        return NULL;
    }
    buffer_std = std::string(buffer, buffer_len);
    retval = ns3::ndn::BufferToPacket(buffer_std);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}
PyObject * _wrap_ndnSIM_ndn_BufferToPacket(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);

static PyMethodDef ndnSIM_ndn_functions[] = {
    {(char *) "MakeNameChecker", (PyCFunction) _wrap_ndnSIM_ndn_MakeNameChecker, METH_NOARGS, NULL },
    {(char *) "PacketToBuffer", (PyCFunction) _wrap_ndnSIM_ndn_PacketToBuffer, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "BufferToPacket", (PyCFunction) _wrap_ndnSIM_ndn_BufferToPacket, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */



PyObject *
PyNs3NdnApp__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnApp *self)
{
    PyObject *py_retval;
    PyNs3NdnApp__PythonHelper *helper = dynamic_cast< PyNs3NdnApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApp__PythonHelper::_wrap_StartApplication(PyNs3NdnApp *self)
{
    PyObject *py_retval;
    PyNs3NdnApp__PythonHelper *helper = dynamic_cast< PyNs3NdnApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method StartApplication of class App is protected and can only be called by a subclass");
        return NULL;
    }
    helper->StartApplication__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApp__PythonHelper::_wrap_DoInitialize(PyNs3NdnApp *self)
{
    PyObject *py_retval;
    PyNs3NdnApp__PythonHelper *helper = dynamic_cast< PyNs3NdnApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Application is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApp__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnApp *self)
{
    PyObject *py_retval;
    PyNs3NdnApp__PythonHelper *helper = dynamic_cast< PyNs3NdnApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApp__PythonHelper::_wrap_StopApplication(PyNs3NdnApp *self)
{
    PyObject *py_retval;
    PyNs3NdnApp__PythonHelper *helper = dynamic_cast< PyNs3NdnApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method StopApplication of class App is protected and can only be called by a subclass");
        return NULL;
    }
    helper->StopApplication__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApp__PythonHelper::_wrap_DoDispose(PyNs3NdnApp *self)
{
    PyObject *py_retval;
    PyNs3NdnApp__PythonHelper *helper = dynamic_cast< PyNs3NdnApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class App is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3NdnApp__PythonHelper::OnData(ns3::Ptr< ns3::ndn::Data const > contentObject)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::App *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "OnData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::App::OnData(contentObject);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = (ns3::ndn::App*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (contentObject)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (contentObject))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (contentObject))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (contentObject));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "OnData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApp__PythonHelper::OnInterest(ns3::Ptr< ns3::ndn::Interest const > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::App *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "OnInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::App::OnInterest(interest);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = (ns3::ndn::App*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "OnInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApp__PythonHelper::OnNack(ns3::Ptr< ns3::ndn::Interest const > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::App *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "OnNack"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::App::OnNack(interest);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = (ns3::ndn::App*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "OnNack", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApp__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::App *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::App::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = (ns3::ndn::App*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApp__PythonHelper::StartApplication()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::App *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartApplication"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::App::StartApplication();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = (ns3::ndn::App*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartApplication", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApp__PythonHelper::StopApplication()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::App *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StopApplication"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::App::StopApplication();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = (ns3::ndn::App*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StopApplication", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApp__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Application *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Application::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Application* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Application* >(m_pyself)->obj = (ns3::Application*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3NdnApp__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnApp__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApp__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3NdnApp__tp_init__0(PyNs3NdnApp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnApp *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnApp_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnApp_Type)
    {
        self->obj = new PyNs3NdnApp__PythonHelper(*((PyNs3NdnApp *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnApp__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ndn::App(*((PyNs3NdnApp *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3NdnApp__tp_init__1(PyNs3NdnApp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnApp_Type)
    {
        self->obj = new PyNs3NdnApp__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnApp__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ndn::App();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3NdnApp__tp_init(PyNs3NdnApp *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnApp__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnApp__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnApp_OnNack(PyNs3NdnApp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnApp__PythonHelper *helper_class = dynamic_cast<PyNs3NdnApp__PythonHelper*> (self->obj);
    const char *keywords[] = {"interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    (helper_class == NULL)? (self->obj->OnNack(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr))) : (self->obj->ns3::ndn::App::OnNack(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApp_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::App::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApp_OnData(PyNs3NdnApp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnData *contentObject;
    ns3::ndn::Data *contentObject_ptr;
    PyNs3NdnApp__PythonHelper *helper_class = dynamic_cast<PyNs3NdnApp__PythonHelper*> (self->obj);
    const char *keywords[] = {"contentObject", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &contentObject)) {
        return NULL;
    }
    contentObject_ptr = (contentObject ? contentObject->obj : NULL);
    (helper_class == NULL)? (self->obj->OnData(ns3::Ptr< ns3::ndn::Data  > (contentObject_ptr))) : (self->obj->ns3::ndn::App::OnData(ns3::Ptr< ns3::ndn::Data  > (contentObject_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApp_GetId(PyNs3NdnApp *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetId();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApp_OnInterest(PyNs3NdnApp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnApp__PythonHelper *helper_class = dynamic_cast<PyNs3NdnApp__PythonHelper*> (self->obj);
    const char *keywords[] = {"interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    (helper_class == NULL)? (self->obj->OnInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr))) : (self->obj->ns3::ndn::App::OnInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnApp__copy__(PyNs3NdnApp *self)
{

    PyNs3NdnApp *py_copy;
    py_copy = PyObject_GC_New(PyNs3NdnApp, &PyNs3NdnApp_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::ndn::App(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnApp_methods[] = {
    {(char *) "OnNack", (PyCFunction) _wrap_PyNs3NdnApp_OnNack, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnApp_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "OnData", (PyCFunction) _wrap_PyNs3NdnApp_OnData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetId", (PyCFunction) _wrap_PyNs3NdnApp_GetId, METH_NOARGS, NULL },
    {(char *) "OnInterest", (PyCFunction) _wrap_PyNs3NdnApp_OnInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnApp__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "StartApplication", (PyCFunction) PyNs3NdnApp__PythonHelper::_wrap_StartApplication, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnApp__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnApp__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "StopApplication", (PyCFunction) PyNs3NdnApp__PythonHelper::_wrap_StopApplication, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnApp__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnApp__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnApp__tp_clear(PyNs3NdnApp *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::App *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnApp__tp_traverse(PyNs3NdnApp *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnApp__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnApp__tp_dealloc(PyNs3NdnApp *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnApp__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnApp__tp_richcompare (PyNs3NdnApp *PYBINDGEN_UNUSED(self), PyNs3NdnApp *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnApp_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnApp_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.App",            /* tp_name */
    sizeof(PyNs3NdnApp),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnApp__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnApp__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnApp__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnApp__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnApp_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnApp, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnApp__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnAppDelayTracer__tp_init(PyNs3NdnAppDelayTracer *self, PyObject *args, PyObject *kwargs)
{
    PyNs3NdnAppDelayTracer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnAppDelayTracer_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::ndn::AppDelayTracer(*((PyNs3NdnAppDelayTracer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3NdnAppDelayTracer_InstallAll(PyNs3NdnAppDelayTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    const char *keywords[] = {"file", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &file, &file_len)) {
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::AppDelayTracer::InstallAll(file_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnAppDelayTracer_Destroy(void)
{
    PyObject *py_retval;
    
    ns3::ndn::AppDelayTracer::Destroy();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnAppDelayTracer_Install__0(PyNs3NdnAppDelayTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *nodes;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    const char *keywords[] = {"nodes", "file", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#", (char **) keywords, &PyNs3NodeContainer_Type, &nodes, &file, &file_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::AppDelayTracer::Install(*((PyNs3NodeContainer *) nodes)->obj, file_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnAppDelayTracer_Install__1(PyNs3NdnAppDelayTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    const char *keywords[] = {"node", "file", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#", (char **) keywords, &PyNs3Node_Type, &node, &file, &file_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    file_std = std::string(file, file_len);
    ns3::ndn::AppDelayTracer::Install(ns3::Ptr< ns3::Node  > (node_ptr), file_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnAppDelayTracer_Install(PyNs3NdnAppDelayTracer *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnAppDelayTracer_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnAppDelayTracer_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3NdnAppDelayTracer__copy__(PyNs3NdnAppDelayTracer *self)
{

    PyNs3NdnAppDelayTracer *py_copy;
    py_copy = PyObject_New(PyNs3NdnAppDelayTracer, &PyNs3NdnAppDelayTracer_Type);
    
    py_copy->obj = new ns3::ndn::AppDelayTracer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnAppDelayTracer_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3NdnAppDelayTracer_InstallAll, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Destroy", (PyCFunction) _wrap_PyNs3NdnAppDelayTracer_Destroy, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnAppDelayTracer_Install, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnAppDelayTracer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnAppDelayTracer__tp_dealloc(PyNs3NdnAppDelayTracer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::AppDelayTracer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnAppDelayTracer__tp_richcompare (PyNs3NdnAppDelayTracer *PYBINDGEN_UNUSED(self), PyNs3NdnAppDelayTracer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnAppDelayTracer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnAppDelayTracer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.AppDelayTracer",            /* tp_name */
    sizeof(PyNs3NdnAppDelayTracer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnAppDelayTracer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnAppDelayTracer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnAppDelayTracer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnAppDelayTracer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnAppHelper_wrapper_registry;


static int
_wrap_PyNs3NdnAppHelper__tp_init__0(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnAppHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnAppHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::AppHelper(*((PyNs3NdnAppHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnAppHelper__tp_init__1(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    const char *keywords[] = {"prefix", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &prefix, &prefix_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    prefix_std = std::string(prefix, prefix_len);
    self->obj = new ns3::ndn::AppHelper(prefix_std);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnAppHelper__tp_init(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnAppHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnAppHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnAppHelper_SetAttribute(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *name;
    Py_ssize_t name_len;
    PyNs3AttributeValue *value;
    const char *keywords[] = {"name", "value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &name, &name_len, &PyNs3AttributeValue_Type, &value)) {
        return NULL;
    }
    self->obj->SetAttribute(std::string(name, name_len), *((PyNs3AttributeValue *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnAppHelper_SetPrefix(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    const char *keywords[] = {"prefix", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &prefix, &prefix_len)) {
        return NULL;
    }
    prefix_std = std::string(prefix, prefix_len);
    self->obj->SetPrefix(prefix_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnAppHelper_Install__0(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *c;
    const char *keywords[] = {"c", NULL};
    PyNs3ApplicationContainer *py_ApplicationContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::ApplicationContainer retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj);
    py_ApplicationContainer = PyObject_New(PyNs3ApplicationContainer, &PyNs3ApplicationContainer_Type);
    py_ApplicationContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ApplicationContainer->obj = new ns3::ApplicationContainer(retval);
    PyNs3ApplicationContainer_wrapper_registry[(void *) py_ApplicationContainer->obj] = (PyObject *) py_ApplicationContainer;
    py_retval = Py_BuildValue((char *) "N", py_ApplicationContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnAppHelper_Install__1(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3ApplicationContainer *py_ApplicationContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    ns3::ApplicationContainer retval = self->obj->Install(ns3::Ptr< ns3::Node  > (node_ptr));
    py_ApplicationContainer = PyObject_New(PyNs3ApplicationContainer, &PyNs3ApplicationContainer_Type);
    py_ApplicationContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ApplicationContainer->obj = new ns3::ApplicationContainer(retval);
    PyNs3ApplicationContainer_wrapper_registry[(void *) py_ApplicationContainer->obj] = (PyObject *) py_ApplicationContainer;
    py_retval = Py_BuildValue((char *) "N", py_ApplicationContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnAppHelper_Install__2(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *nodeName;
    Py_ssize_t nodeName_len;
    const char *keywords[] = {"nodeName", NULL};
    PyNs3ApplicationContainer *py_ApplicationContainer;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &nodeName, &nodeName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::ApplicationContainer retval = self->obj->Install(std::string(nodeName, nodeName_len));
    py_ApplicationContainer = PyObject_New(PyNs3ApplicationContainer, &PyNs3ApplicationContainer_Type);
    py_ApplicationContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_ApplicationContainer->obj = new ns3::ApplicationContainer(retval);
    PyNs3ApplicationContainer_wrapper_registry[(void *) py_ApplicationContainer->obj] = (PyObject *) py_ApplicationContainer;
    py_retval = Py_BuildValue((char *) "N", py_ApplicationContainer);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnAppHelper_Install(PyNs3NdnAppHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnAppHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnAppHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnAppHelper_Install__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3NdnAppHelper__copy__(PyNs3NdnAppHelper *self)
{

    PyNs3NdnAppHelper *py_copy;
    py_copy = PyObject_New(PyNs3NdnAppHelper, &PyNs3NdnAppHelper_Type);
    py_copy->obj = new ns3::ndn::AppHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnAppHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnAppHelper_methods[] = {
    {(char *) "SetAttribute", (PyCFunction) _wrap_PyNs3NdnAppHelper_SetAttribute, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetPrefix", (PyCFunction) _wrap_PyNs3NdnAppHelper_SetPrefix, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnAppHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnAppHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnAppHelper__tp_dealloc(PyNs3NdnAppHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnAppHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnAppHelper_wrapper_registry.end()) {
        PyNs3NdnAppHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::AppHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnAppHelper__tp_richcompare (PyNs3NdnAppHelper *PYBINDGEN_UNUSED(self), PyNs3NdnAppHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnAppHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnAppHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.AppHelper",            /* tp_name */
    sizeof(PyNs3NdnAppHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnAppHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnAppHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnAppHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnAppHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnBlob_wrapper_registry;


static int
_wrap_PyNs3NdnBlob__tp_init__0(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnBlob *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnBlob_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Blob(*((PyNs3NdnBlob *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnBlob__tp_init__1(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Blob();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnBlob__tp_init__2(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *data;
    Py_ssize_t data_len;
    std::string data_std;
    const char *keywords[] = {"data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &data, &data_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    data_std = std::string(data, data_len);
    self->obj = new ns3::ndn::Blob(data_std);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnBlob__tp_init(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnBlob__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnBlob__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnBlob__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnBlob_clear(PyNs3NdnBlob *self)
{
    PyObject *py_retval;
    
    self->obj->clear();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnBlob_push_back(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char val;
    const char *keywords[] = {"val", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "c", (char **) keywords, &val)) {
        return NULL;
    }
    self->obj->push_back(val);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnBlob_swap(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnBlob *x;
    const char *keywords[] = {"x", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnBlob_Type, &x)) {
        return NULL;
    }
    self->obj->swap(*((PyNs3NdnBlob *) x)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnBlob_getItem(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    char retval;
    unsigned PY_LONG_LONG pos;
    const char *keywords[] = {"pos", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &pos)) {
        return NULL;
    }
    retval = self->obj->getItem(pos);
    py_retval = Py_BuildValue((char *) "c", (int) retval);
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnBlob_buf__0(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    char *retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->buf();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnBlob_buf__1(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    char const *retval;
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->buf();
    py_retval = Py_BuildValue((char *) "s", retval);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnBlob_buf(PyNs3NdnBlob *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnBlob_buf__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnBlob_buf__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnBlob_empty(PyNs3NdnBlob *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->empty();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnBlob_size(PyNs3NdnBlob *self)
{
    PyObject *py_retval;
    size_t retval;
    
    retval = self->obj->size();
    py_retval = Py_BuildValue((char *) "K", ((unsigned PY_LONG_LONG) retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnBlob__copy__(PyNs3NdnBlob *self)
{

    PyNs3NdnBlob *py_copy;
    py_copy = PyObject_New(PyNs3NdnBlob, &PyNs3NdnBlob_Type);
    py_copy->obj = new ns3::ndn::Blob(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnBlob_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnBlob_methods[] = {
    {(char *) "clear", (PyCFunction) _wrap_PyNs3NdnBlob_clear, METH_NOARGS, NULL },
    {(char *) "push_back", (PyCFunction) _wrap_PyNs3NdnBlob_push_back, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "swap", (PyCFunction) _wrap_PyNs3NdnBlob_swap, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "getItem", (PyCFunction) _wrap_PyNs3NdnBlob_getItem, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "buf", (PyCFunction) _wrap_PyNs3NdnBlob_buf, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "empty", (PyCFunction) _wrap_PyNs3NdnBlob_empty, METH_NOARGS, NULL },
    {(char *) "size", (PyCFunction) _wrap_PyNs3NdnBlob_size, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnBlob__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnBlob__tp_dealloc(PyNs3NdnBlob *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnBlob_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnBlob_wrapper_registry.end()) {
        PyNs3NdnBlob_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::Blob *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnBlob__tp_richcompare (PyNs3NdnBlob *PYBINDGEN_UNUSED(self), PyNs3NdnBlob *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnBlob_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        if (*self->obj <= *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        if (*self->obj >= *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GT:
        if (*self->obj > *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnBlob_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Blob",            /* tp_name */
    sizeof(PyNs3NdnBlob),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnBlob__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnBlob__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnBlob_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnBlob__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnContentStore__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'ContentStore' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3NdnContentStore_Begin(PyNs3NdnContentStore *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::cs::Entry > retval;
    PyNs3NdnCsEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Begin();
    if (!(const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnCsEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnCsEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnCsEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnContentStore_End(PyNs3NdnContentStore *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::cs::Entry > retval;
    PyNs3NdnCsEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->End();
    if (!(const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnCsEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnCsEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnCsEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnContentStore_GetContentStore(PyNs3NdnContentStore *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::ContentStore > retval;
    PyNs3Object *node;
    ns3::Object *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3NdnContentStore *py_ContentStore;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Object_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    retval = ns3::ndn::ContentStore::GetContentStore(ns3::Ptr< ns3::Object  > (node_ptr));
    if (!(const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_ContentStore = NULL;
    } else {
        py_ContentStore = (PyNs3NdnContentStore *) wrapper_lookup_iter->second;
        Py_INCREF(py_ContentStore);
    }
    
    if (py_ContentStore == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval)))), &PyNs3NdnContentStore_Type);
        py_ContentStore = PyObject_GC_New(PyNs3NdnContentStore, wrapper_type);
        py_ContentStore->inst_dict = NULL;
    
        py_ContentStore->inst_dict = NULL;
        py_ContentStore->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval))->Ref();
        py_ContentStore->obj = const_cast<ns3::ndn::ContentStore *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_ContentStore->obj] = (PyObject *) py_ContentStore;
    }
    py_retval = Py_BuildValue((char *) "N", py_ContentStore);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnContentStore_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::ContentStore::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnContentStore_Next(PyNs3NdnContentStore *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::cs::Entry > retval;
    PyNs3NdnCsEntry *arg0;
    ns3::ndn::cs::Entry *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    PyNs3NdnCsEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnCsEntry_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    retval = self->obj->Next(ns3::Ptr< ns3::ndn::cs::Entry  > (arg0_ptr));
    if (!(const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnCsEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnCsEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnCsEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::cs::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnContentStore_GetSize(PyNs3NdnContentStore *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnContentStore_Add(PyNs3NdnContentStore *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    const char *keywords[] = {"data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &data)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    retval = self->obj->Add(ns3::Ptr< ns3::ndn::Data  > (data_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnContentStore_Lookup(PyNs3NdnContentStore *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Data > retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    const char *keywords[] = {"interest", NULL};
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    retval = self->obj->Lookup(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr));
    if (!(const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = Py_BuildValue((char *) "N", py_Data);
    return py_retval;
}

static PyMethodDef PyNs3NdnContentStore_methods[] = {
    {(char *) "Begin", (PyCFunction) _wrap_PyNs3NdnContentStore_Begin, METH_NOARGS, NULL },
    {(char *) "End", (PyCFunction) _wrap_PyNs3NdnContentStore_End, METH_NOARGS, NULL },
    {(char *) "GetContentStore", (PyCFunction) _wrap_PyNs3NdnContentStore_GetContentStore, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnContentStore_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Next", (PyCFunction) _wrap_PyNs3NdnContentStore_Next, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3NdnContentStore_GetSize, METH_NOARGS, NULL },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3NdnContentStore_Add, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Lookup", (PyCFunction) _wrap_PyNs3NdnContentStore_Lookup, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnContentStore__tp_clear(PyNs3NdnContentStore *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::ContentStore *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnContentStore__tp_traverse(PyNs3NdnContentStore *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3NdnContentStore__tp_dealloc(PyNs3NdnContentStore *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnContentStore__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnContentStore__tp_str(PyNs3NdnContentStore *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnContentStore__tp_richcompare (PyNs3NdnContentStore *PYBINDGEN_UNUSED(self), PyNs3NdnContentStore *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnContentStore_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnContentStore_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.ContentStore",            /* tp_name */
    sizeof(PyNs3NdnContentStore),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnContentStore__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnContentStore__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnContentStore__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnContentStore__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnContentStore__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnContentStore_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnContentStore, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnContentStore__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnCsTracer__tp_init(PyNs3NdnCsTracer *self, PyObject *args, PyObject *kwargs)
{
    PyNs3NdnCsTracer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnCsTracer_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::ndn::CsTracer(*((PyNs3NdnCsTracer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3NdnCsTracer_InstallAll(PyNs3NdnCsTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|O!", (char **) keywords, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::CsTracer::InstallAll(file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnCsTracer_Destroy(void)
{
    PyObject *py_retval;
    
    ns3::ndn::CsTracer::Destroy();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnCsTracer_Install__0(PyNs3NdnCsTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *nodes;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"nodes", "file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#|O!", (char **) keywords, &PyNs3NodeContainer_Type, &nodes, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::CsTracer::Install(*((PyNs3NodeContainer *) nodes)->obj, file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnCsTracer_Install__1(PyNs3NdnCsTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"node", "file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#|O!", (char **) keywords, &PyNs3Node_Type, &node, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    file_std = std::string(file, file_len);
    ns3::ndn::CsTracer::Install(ns3::Ptr< ns3::Node  > (node_ptr), file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnCsTracer_Install(PyNs3NdnCsTracer *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnCsTracer_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnCsTracer_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3NdnCsTracer__copy__(PyNs3NdnCsTracer *self)
{

    PyNs3NdnCsTracer *py_copy;
    py_copy = PyObject_New(PyNs3NdnCsTracer, &PyNs3NdnCsTracer_Type);
    
    py_copy->obj = new ns3::ndn::CsTracer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnCsTracer_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3NdnCsTracer_InstallAll, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Destroy", (PyCFunction) _wrap_PyNs3NdnCsTracer_Destroy, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnCsTracer_Install, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnCsTracer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnCsTracer__tp_dealloc(PyNs3NdnCsTracer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::CsTracer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnCsTracer__tp_str(PyNs3NdnCsTracer *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnCsTracer__tp_richcompare (PyNs3NdnCsTracer *PYBINDGEN_UNUSED(self), PyNs3NdnCsTracer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnCsTracer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnCsTracer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.CsTracer",            /* tp_name */
    sizeof(PyNs3NdnCsTracer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnCsTracer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnCsTracer__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnCsTracer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnCsTracer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnCsTracer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3NdnData__tp_init__0(PyNs3NdnData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *payload = NULL;
    ns3::Packet *payload_ptr;
    const char *keywords[] = {"payload", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!", (char **) keywords, &PyNs3Packet_Type, &payload)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    payload_ptr = (payload ? payload->obj : NULL);
    self->obj = new ns3::ndn::Data(ns3::Ptr< ns3::Packet  > (payload_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnData__tp_init__1(PyNs3NdnData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnData *other;
    const char *keywords[] = {"other", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &other)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Data(*((PyNs3NdnData *) other)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnData__tp_init(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnData__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnData__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnData_SetTimestamp(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *timestamp;
    const char *keywords[] = {"timestamp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &timestamp)) {
        return NULL;
    }
    self->obj->SetTimestamp(*((PyNs3Time *) timestamp)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_SetWire(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->SetWire(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnData_SetName__0(PyNs3NdnData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnName *name;
    ns3::ndn::Name *name_ptr;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &name)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    name_ptr = (name ? name->obj : NULL);
    self->obj->SetName(ns3::Ptr< ns3::ndn::Name  > (name_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnData_SetName__1(PyNs3NdnData *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnName *name;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &name)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->SetName(*((PyNs3NdnName *) name)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnData_SetName(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnData_SetName__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnData_SetName__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnData_SetFreshness(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *freshness;
    const char *keywords[] = {"freshness", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &freshness)) {
        return NULL;
    }
    self->obj->SetFreshness(*((PyNs3Time *) freshness)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetName(PyNs3NdnData *self)
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    
    ns3::ndn::Name const & retval = self->obj->GetName();
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetNamePtr(PyNs3NdnData *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Name const > retval;
    PyNs3NdnName *py_Name;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNamePtr();
    if (!(const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Name = NULL;
    } else {
        py_Name = (PyNs3NdnName *) wrapper_lookup_iter->second;
        Py_INCREF(py_Name);
    }
    
    if (py_Name == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))), &PyNs3NdnName_Type);
        py_Name = PyObject_New(PyNs3NdnName, wrapper_type);
    
        py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval))->Ref();
        py_Name->obj = const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    }
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetWire(PyNs3NdnData *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetWire();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetSignature(PyNs3NdnData *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSignature();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_SetPayload(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *payload;
    ns3::Packet *payload_ptr;
    const char *keywords[] = {"payload", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &payload)) {
        return NULL;
    }
    payload_ptr = (payload ? payload->obj : NULL);
    self->obj->SetPayload(ns3::Ptr< ns3::Packet  > (payload_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetTimestamp(PyNs3NdnData *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetTimestamp();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_SetSignature(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int signature;
    const char *keywords[] = {"signature", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &signature)) {
        return NULL;
    }
    self->obj->SetSignature(signature);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetPayload(PyNs3NdnData *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPayload();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetKeyLocator(PyNs3NdnData *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Name const > retval;
    PyNs3NdnName *py_Name;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetKeyLocator();
    if (!(const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Name = NULL;
    } else {
        py_Name = (PyNs3NdnName *) wrapper_lookup_iter->second;
        Py_INCREF(py_Name);
    }
    
    if (py_Name == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))), &PyNs3NdnName_Type);
        py_Name = PyObject_New(PyNs3NdnName, wrapper_type);
    
        py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval))->Ref();
        py_Name->obj = const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    }
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_SetKeyLocator(PyNs3NdnData *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnName *keyLocator;
    ns3::ndn::Name *keyLocator_ptr;
    const char *keywords[] = {"keyLocator", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &keyLocator)) {
        return NULL;
    }
    keyLocator_ptr = (keyLocator ? keyLocator->obj : NULL);
    self->obj->SetKeyLocator(ns3::Ptr< ns3::ndn::Name  > (keyLocator_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnData_GetFreshness(PyNs3NdnData *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetFreshness();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnData__copy__(PyNs3NdnData *self)
{

    PyNs3NdnData *py_copy;
    py_copy = PyObject_New(PyNs3NdnData, &PyNs3NdnData_Type);
    
    py_copy->obj = new ns3::ndn::Data(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnData_methods[] = {
    {(char *) "SetTimestamp", (PyCFunction) _wrap_PyNs3NdnData_SetTimestamp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWire", (PyCFunction) _wrap_PyNs3NdnData_SetWire, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetName", (PyCFunction) _wrap_PyNs3NdnData_SetName, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetFreshness", (PyCFunction) _wrap_PyNs3NdnData_SetFreshness, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3NdnData_GetName, METH_NOARGS, NULL },
    {(char *) "GetNamePtr", (PyCFunction) _wrap_PyNs3NdnData_GetNamePtr, METH_NOARGS, NULL },
    {(char *) "GetWire", (PyCFunction) _wrap_PyNs3NdnData_GetWire, METH_NOARGS, NULL },
    {(char *) "GetSignature", (PyCFunction) _wrap_PyNs3NdnData_GetSignature, METH_NOARGS, NULL },
    {(char *) "SetPayload", (PyCFunction) _wrap_PyNs3NdnData_SetPayload, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTimestamp", (PyCFunction) _wrap_PyNs3NdnData_GetTimestamp, METH_NOARGS, NULL },
    {(char *) "SetSignature", (PyCFunction) _wrap_PyNs3NdnData_SetSignature, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPayload", (PyCFunction) _wrap_PyNs3NdnData_GetPayload, METH_NOARGS, NULL },
    {(char *) "GetKeyLocator", (PyCFunction) _wrap_PyNs3NdnData_GetKeyLocator, METH_NOARGS, NULL },
    {(char *) "SetKeyLocator", (PyCFunction) _wrap_PyNs3NdnData_SetKeyLocator, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFreshness", (PyCFunction) _wrap_PyNs3NdnData_GetFreshness, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnData__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnData__tp_dealloc(PyNs3NdnData *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::Data *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnData__tp_str(PyNs3NdnData *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnData__tp_richcompare (PyNs3NdnData *PYBINDGEN_UNUSED(self), PyNs3NdnData *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnData_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnData_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Data",            /* tp_name */
    sizeof(PyNs3NdnData),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnData__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnData__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnData__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnData_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnData__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnDataException_wrapper_registry;


static int
_wrap_PyNs3NdnDataException__tp_init__0(PyNs3NdnDataException *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::DataException();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnDataException__tp_init__1(PyNs3NdnDataException *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnDataException *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnDataException_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::DataException(*((PyNs3NdnDataException *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnDataException__tp_init(PyNs3NdnDataException *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnDataException__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnDataException__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnDataException__copy__(PyNs3NdnDataException *self)
{

    PyNs3NdnDataException *py_copy;
    py_copy = PyObject_New(PyNs3NdnDataException, &PyNs3NdnDataException_Type);
    py_copy->obj = new ns3::ndn::DataException(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnDataException_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnDataException_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnDataException__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnDataException__tp_dealloc(PyNs3NdnDataException *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnDataException_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnDataException_wrapper_registry.end()) {
        PyNs3NdnDataException_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::DataException *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnDataException__tp_richcompare (PyNs3NdnDataException *PYBINDGEN_UNUSED(self), PyNs3NdnDataException *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnDataException_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnDataException_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.DataException",            /* tp_name */
    sizeof(PyNs3NdnDataException),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnDataException__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnDataException__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnDataException_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnDataException__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3NdnExclude__tp_init__0(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnExclude *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnExclude_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Exclude(*((PyNs3NdnExclude *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnExclude__tp_init__1(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Exclude();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnExclude__tp_init(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnExclude__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnExclude__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnExclude_excludeAfter(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnNameComponent *from;
    const char *keywords[] = {"from", NULL};
    PyNs3NdnExclude *py_Exclude;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &from)) {
        return NULL;
    }
    ns3::ndn::Exclude & retval = self->obj->excludeAfter(*((PyNs3NdnNameComponent *) from)->obj);
    py_Exclude = PyObject_New(PyNs3NdnExclude, &PyNs3NdnExclude_Type);
    
    py_Exclude->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Exclude->obj = new ns3::ndn::Exclude(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Exclude->obj] = (PyObject *) py_Exclude;
    py_retval = Py_BuildValue((char *) "N", py_Exclude);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnExclude_excludeBefore(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnNameComponent *to;
    const char *keywords[] = {"to", NULL};
    PyNs3NdnExclude *py_Exclude;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &to)) {
        return NULL;
    }
    ns3::ndn::Exclude & retval = self->obj->excludeBefore(*((PyNs3NdnNameComponent *) to)->obj);
    py_Exclude = PyObject_New(PyNs3NdnExclude, &PyNs3NdnExclude_Type);
    
    py_Exclude->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Exclude->obj = new ns3::ndn::Exclude(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Exclude->obj] = (PyObject *) py_Exclude;
    py_retval = Py_BuildValue((char *) "N", py_Exclude);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnExclude_appendExclude(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnNameComponent *name;
    bool any;
    PyObject *py_any;
    const char *keywords[] = {"name", "any", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3NdnNameComponent_Type, &name, &py_any)) {
        return NULL;
    }
    any = (bool) PyObject_IsTrue(py_any);
    self->obj->appendExclude(*((PyNs3NdnNameComponent *) name)->obj, any);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnExclude_isExcluded(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnNameComponent *comp;
    const char *keywords[] = {"comp", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &comp)) {
        return NULL;
    }
    retval = self->obj->isExcluded(*((PyNs3NdnNameComponent *) comp)->obj);
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnExclude_excludeRange(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnNameComponent *from;
    PyNs3NdnNameComponent *to;
    const char *keywords[] = {"from", "to", NULL};
    PyNs3NdnExclude *py_Exclude;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &from, &PyNs3NdnNameComponent_Type, &to)) {
        return NULL;
    }
    ns3::ndn::Exclude & retval = self->obj->excludeRange(*((PyNs3NdnNameComponent *) from)->obj, *((PyNs3NdnNameComponent *) to)->obj);
    py_Exclude = PyObject_New(PyNs3NdnExclude, &PyNs3NdnExclude_Type);
    
    py_Exclude->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Exclude->obj = new ns3::ndn::Exclude(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Exclude->obj] = (PyObject *) py_Exclude;
    py_retval = Py_BuildValue((char *) "N", py_Exclude);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnExclude_excludeOne(PyNs3NdnExclude *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnNameComponent *comp;
    const char *keywords[] = {"comp", NULL};
    PyNs3NdnExclude *py_Exclude;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &comp)) {
        return NULL;
    }
    ns3::ndn::Exclude & retval = self->obj->excludeOne(*((PyNs3NdnNameComponent *) comp)->obj);
    py_Exclude = PyObject_New(PyNs3NdnExclude, &PyNs3NdnExclude_Type);
    
    py_Exclude->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Exclude->obj = new ns3::ndn::Exclude(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Exclude->obj] = (PyObject *) py_Exclude;
    py_retval = Py_BuildValue((char *) "N", py_Exclude);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnExclude_size(PyNs3NdnExclude *self)
{
    PyObject *py_retval;
    size_t retval;
    
    retval = self->obj->size();
    py_retval = Py_BuildValue((char *) "K", ((unsigned PY_LONG_LONG) retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnExclude__copy__(PyNs3NdnExclude *self)
{

    PyNs3NdnExclude *py_copy;
    py_copy = PyObject_New(PyNs3NdnExclude, &PyNs3NdnExclude_Type);
    
    py_copy->obj = new ns3::ndn::Exclude(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnExclude_methods[] = {
    {(char *) "excludeAfter", (PyCFunction) _wrap_PyNs3NdnExclude_excludeAfter, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "excludeBefore", (PyCFunction) _wrap_PyNs3NdnExclude_excludeBefore, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "appendExclude", (PyCFunction) _wrap_PyNs3NdnExclude_appendExclude, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "isExcluded", (PyCFunction) _wrap_PyNs3NdnExclude_isExcluded, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "excludeRange", (PyCFunction) _wrap_PyNs3NdnExclude_excludeRange, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "excludeOne", (PyCFunction) _wrap_PyNs3NdnExclude_excludeOne, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "size", (PyCFunction) _wrap_PyNs3NdnExclude_size, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnExclude__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnExclude__tp_dealloc(PyNs3NdnExclude *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::Exclude *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnExclude__tp_str(PyNs3NdnExclude *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnExclude__tp_richcompare (PyNs3NdnExclude *PYBINDGEN_UNUSED(self), PyNs3NdnExclude *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnExclude_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnExclude_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Exclude",            /* tp_name */
    sizeof(PyNs3NdnExclude),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnExclude__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnExclude__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnExclude__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnExclude_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnExclude__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnFace__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    PyNs3NdnFace__PythonHelper *helper = dynamic_cast< PyNs3NdnFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnFace__PythonHelper::_wrap_Receive(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3NdnFace__PythonHelper *helper = dynamic_cast< PyNs3NdnFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Receive of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Receive__parent_caller(ns3::Ptr< ns3::Packet  > (p_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnFace__PythonHelper::_wrap_DoInitialize(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    PyNs3NdnFace__PythonHelper *helper = dynamic_cast< PyNs3NdnFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnFace__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    PyNs3NdnFace__PythonHelper *helper = dynamic_cast< PyNs3NdnFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnFace__PythonHelper::_wrap_Send(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3NdnFace__PythonHelper *helper = dynamic_cast< PyNs3NdnFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Send of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Send__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnFace__PythonHelper::_wrap_DoDispose(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    PyNs3NdnFace__PythonHelper *helper = dynamic_cast< PyNs3NdnFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnFace__PythonHelper::_wrap_SetFlags(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int flags;
    PyNs3NdnFace__PythonHelper *helper = dynamic_cast< PyNs3NdnFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"flags", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &flags)) {
        return NULL;
    }
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SetFlags of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SetFlags__parent_caller(flags);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint16_t
PyNs3NdnFace__PythonHelper::GetMetric() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = const_cast< ns3::ndn::Face* >((const ns3::ndn::Face*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMetric", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnFace__PythonHelper::ReceiveData(ns3::Ptr< ns3::ndn::Data > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnFace__PythonHelper::ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnFace__PythonHelper::SendData(ns3::Ptr< ns3::ndn::Data const > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnFace__PythonHelper::SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnFace__PythonHelper::SetMetric(uint16_t metric)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Face::SetMetric(metric);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMetric", (char *) "i", (int) metric);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnFace__PythonHelper::UnRegisterProtocolHandlers()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "UnRegisterProtocolHandlers"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Face::UnRegisterProtocolHandlers();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "UnRegisterProtocolHandlers", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnFace__PythonHelper::Receive(ns3::Ptr< ns3::Packet const > p)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (p)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (p))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (p))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (p));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnFace__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NdnFace__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnFace__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnFace__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnFace__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnFace__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3NdnFace__tp_init(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return -1;
    }
    node_ptr = (node ? node->obj : NULL);
    if (Py_TYPE(self) != &PyNs3NdnFace_Type)
    {
        self->obj = new PyNs3NdnFace__PythonHelper(ns3::Ptr< ns3::Node  > (node_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnFace__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ndn::Face(ns3::Ptr< ns3::Node  > (node_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3NdnFace_SendData(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    PyNs3NdnFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &data)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->SendData(ns3::Ptr< ns3::ndn::Data  > (data_ptr))) : (self->obj->ns3::ndn::Face::SendData(ns3::Ptr< ns3::ndn::Data  > (data_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_ReceiveData(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    PyNs3NdnFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &data)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->ReceiveData(ns3::Ptr< ns3::ndn::Data  > (data_ptr))) : (self->obj->ns3::ndn::Face::ReceiveData(ns3::Ptr< ns3::ndn::Data  > (data_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_SetMetric(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int metric;
    PyNs3NdnFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &metric)) {
        return NULL;
    }
    if (metric > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetMetric(metric)) : (self->obj->ns3::ndn::Face::SetMetric(metric));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_ReceiveInterest(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->ReceiveInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr))) : (self->obj->ns3::ndn::Face::ReceiveInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_SetUp(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool up;
    PyObject *py_up = NULL;
    const char *keywords[] = {"up", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &py_up)) {
        return NULL;
    }
    up = py_up? (bool) PyObject_IsTrue(py_up) : true;
    self->obj->SetUp(up);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::Face::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_GetId(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetId();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_GetMetric(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    uint16_t retval;
    PyNs3NdnFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnFace__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMetric()) : (self->obj->ns3::ndn::Face::GetMetric());
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_IsUp(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsUp();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_UnRegisterProtocolHandlers(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    PyNs3NdnFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnFace__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->UnRegisterProtocolHandlers()) : (self->obj->ns3::ndn::Face::UnRegisterProtocolHandlers());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_SendInterest(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->SendInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr))) : (self->obj->ns3::ndn::Face::SendInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_SetId(PyNs3NdnFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int id;
    const char *keywords[] = {"id", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &id)) {
        return NULL;
    }
    self->obj->SetId(id);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_GetFlags(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetFlags();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFace_GetNode(PyNs3NdnFace *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Node > retval;
    PyNs3Node *py_Node;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNode();
    if (!(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3Node__PythonHelper).name())
    {
        py_Node = reinterpret_cast< PyNs3Node* >(reinterpret_cast< PyNs3Node__PythonHelper* >(const_cast<ns3::Node *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Node);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::Node *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Node = NULL;
        } else {
            py_Node = (PyNs3Node *) wrapper_lookup_iter->second;
            Py_INCREF(py_Node);
        }
    
        if (py_Node == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Node *> (ns3::PeekPointer (retval)))), &PyNs3Node_Type);
            py_Node = PyObject_GC_New(PyNs3Node, wrapper_type);
            py_Node->inst_dict = NULL;
    
            py_Node->inst_dict = NULL;
            py_Node->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::Node *> (ns3::PeekPointer (retval))->Ref();
            py_Node->obj = const_cast<ns3::Node *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Node->obj] = (PyObject *) py_Node;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Node);
    return py_retval;
}

static PyMethodDef PyNs3NdnFace_methods[] = {
    {(char *) "SendData", (PyCFunction) _wrap_PyNs3NdnFace_SendData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReceiveData", (PyCFunction) _wrap_PyNs3NdnFace_ReceiveData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMetric", (PyCFunction) _wrap_PyNs3NdnFace_SetMetric, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ReceiveInterest", (PyCFunction) _wrap_PyNs3NdnFace_ReceiveInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetUp", (PyCFunction) _wrap_PyNs3NdnFace_SetUp, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnFace_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetId", (PyCFunction) _wrap_PyNs3NdnFace_GetId, METH_NOARGS, NULL },
    {(char *) "GetMetric", (PyCFunction) _wrap_PyNs3NdnFace_GetMetric, METH_NOARGS, NULL },
    {(char *) "IsUp", (PyCFunction) _wrap_PyNs3NdnFace_IsUp, METH_NOARGS, NULL },
    {(char *) "UnRegisterProtocolHandlers", (PyCFunction) _wrap_PyNs3NdnFace_UnRegisterProtocolHandlers, METH_NOARGS, NULL },
    {(char *) "SendInterest", (PyCFunction) _wrap_PyNs3NdnFace_SendInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetId", (PyCFunction) _wrap_PyNs3NdnFace_SetId, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFlags", (PyCFunction) _wrap_PyNs3NdnFace_GetFlags, METH_NOARGS, NULL },
    {(char *) "GetNode", (PyCFunction) _wrap_PyNs3NdnFace_GetNode, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnFace__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "Receive", (PyCFunction) PyNs3NdnFace__PythonHelper::_wrap_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnFace__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnFace__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "Send", (PyCFunction) PyNs3NdnFace__PythonHelper::_wrap_Send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnFace__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "SetFlags", (PyCFunction) PyNs3NdnFace__PythonHelper::_wrap_SetFlags, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnFace__tp_clear(PyNs3NdnFace *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::Face *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnFace__tp_traverse(PyNs3NdnFace *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnFace__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnFace__tp_dealloc(PyNs3NdnFace *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnFace__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnFace__tp_str(PyNs3NdnFace *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnFace__tp_richcompare (PyNs3NdnFace *PYBINDGEN_UNUSED(self), PyNs3NdnFace *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFace_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        if (*self->obj != *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFace_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Face",            /* tp_name */
    sizeof(PyNs3NdnFace),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFace__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnFace__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnFace__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnFace__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFace__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFace_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnFace, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFace__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3NdnFaceContainer__tp_init__0(PyNs3NdnFaceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::FaceContainer();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnFaceContainer__tp_init__1(PyNs3NdnFaceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnFaceContainer *other;
    const char *keywords[] = {"other", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFaceContainer_Type, &other)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::FaceContainer(*((PyNs3NdnFaceContainer *) other)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnFaceContainer__tp_init(PyNs3NdnFaceContainer *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFaceContainer__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFaceContainer__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}



PyObject *
_wrap_PyNs3NdnFaceContainer_AddAll__0(PyNs3NdnFaceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnFaceContainer *other;
    ns3::ndn::FaceContainer *other_ptr;
    const char *keywords[] = {"other", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFaceContainer_Type, &other)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    other_ptr = (other ? other->obj : NULL);
    self->obj->AddAll(ns3::Ptr< ns3::ndn::FaceContainer  > (other_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnFaceContainer_AddAll__1(PyNs3NdnFaceContainer *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnFaceContainer *other;
    const char *keywords[] = {"other", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFaceContainer_Type, &other)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->AddAll(*((PyNs3NdnFaceContainer *) other)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnFaceContainer_AddAll(PyNs3NdnFaceContainer *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFaceContainer_AddAll__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFaceContainer_AddAll__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnFaceContainer_GetN(PyNs3NdnFaceContainer *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetN();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnFaceContainer__copy__(PyNs3NdnFaceContainer *self)
{

    PyNs3NdnFaceContainer *py_copy;
    py_copy = PyObject_New(PyNs3NdnFaceContainer, &PyNs3NdnFaceContainer_Type);
    
    py_copy->obj = new ns3::ndn::FaceContainer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnFaceContainer_methods[] = {
    {(char *) "AddAll", (PyCFunction) _wrap_PyNs3NdnFaceContainer_AddAll, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetN", (PyCFunction) _wrap_PyNs3NdnFaceContainer_GetN, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnFaceContainer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnFaceContainer__tp_dealloc(PyNs3NdnFaceContainer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::FaceContainer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnFaceContainer__tp_richcompare (PyNs3NdnFaceContainer *PYBINDGEN_UNUSED(self), PyNs3NdnFaceContainer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFaceContainer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFaceContainer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.FaceContainer",            /* tp_name */
    sizeof(PyNs3NdnFaceContainer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFaceContainer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFaceContainer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFaceContainer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFaceContainer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnFib__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Fib' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3NdnFib_GetFib(PyNs3NdnFib *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Fib > retval;
    PyNs3Object *node;
    ns3::Object *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3NdnFib *py_Fib;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Object_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    retval = ns3::ndn::Fib::GetFib(ns3::Ptr< ns3::Object  > (node_ptr));
    if (!(const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Fib = NULL;
    } else {
        py_Fib = (PyNs3NdnFib *) wrapper_lookup_iter->second;
        Py_INCREF(py_Fib);
    }
    
    if (py_Fib == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval)))), &PyNs3NdnFib_Type);
        py_Fib = PyObject_GC_New(PyNs3NdnFib, wrapper_type);
        py_Fib->inst_dict = NULL;
    
        py_Fib->inst_dict = NULL;
        py_Fib->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval))->Ref();
        py_Fib->obj = const_cast<ns3::ndn::Fib *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Fib->obj] = (PyObject *) py_Fib;
    }
    py_retval = Py_BuildValue((char *) "N", py_Fib);
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnFib_Begin__0(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry const > retval;
    const char *keywords[] = {NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Begin();
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnFib_Begin__1(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry > retval;
    const char *keywords[] = {NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Begin();
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnFib_Begin(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFib_Begin__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFib_Begin__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}



PyObject *
_wrap_PyNs3NdnFib_End__0(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry const > retval;
    const char *keywords[] = {NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->End();
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnFib_End__1(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry > retval;
    const char *keywords[] = {NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->End();
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnFib_End(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFib_End__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFib_End__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnFib_InvalidateAll(PyNs3NdnFib *self)
{
    PyObject *py_retval;
    
    self->obj->InvalidateAll();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFib_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::Fib::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFib_LongestPrefixMatch(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry > retval;
    PyNs3NdnInterest *interest;
    const char *keywords[] = {"interest", NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    retval = self->obj->LongestPrefixMatch(*((PyNs3NdnInterest *) interest)->obj);
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnFib_Next__0(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry const > retval;
    PyNs3NdnFibEntry *arg0;
    ns3::ndn::fib::Entry *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    retval = self->obj->Next(ns3::Ptr< ns3::ndn::fib::Entry  > (arg0_ptr));
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnFib_Next__1(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry > retval;
    PyNs3NdnFibEntry *arg0;
    ns3::ndn::fib::Entry *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibEntry_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    retval = self->obj->Next(ns3::Ptr< ns3::ndn::fib::Entry  > (arg0_ptr));
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnFib_Next(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnFib_Next__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnFib_Next__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnFib_GetSize(PyNs3NdnFib *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFib_Add(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry > retval;
    PyNs3NdnName *prefix;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    int32_t metric;
    const char *keywords[] = {"prefix", "face", "metric", NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!i", (char **) keywords, &PyNs3NdnName_Type, &prefix, &PyNs3NdnFace_Type, &face, &metric)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    retval = self->obj->Add(*((PyNs3NdnName *) prefix)->obj, ns3::Ptr< ns3::ndn::Face  > (face_ptr), metric);
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFib_RemoveFromAll(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    self->obj->RemoveFromAll(ns3::Ptr< ns3::ndn::Face  > (face_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnFib_Find(PyNs3NdnFib *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::fib::Entry > retval;
    PyNs3NdnName *prefix;
    const char *keywords[] = {"prefix", NULL};
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &prefix)) {
        return NULL;
    }
    retval = self->obj->Find(*((PyNs3NdnName *) prefix)->obj);
    if (!(const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->inst_dict = NULL;
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

static PyMethodDef PyNs3NdnFib_methods[] = {
    {(char *) "GetFib", (PyCFunction) _wrap_PyNs3NdnFib_GetFib, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Begin", (PyCFunction) _wrap_PyNs3NdnFib_Begin, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "End", (PyCFunction) _wrap_PyNs3NdnFib_End, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "InvalidateAll", (PyCFunction) _wrap_PyNs3NdnFib_InvalidateAll, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnFib_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "LongestPrefixMatch", (PyCFunction) _wrap_PyNs3NdnFib_LongestPrefixMatch, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Next", (PyCFunction) _wrap_PyNs3NdnFib_Next, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3NdnFib_GetSize, METH_NOARGS, NULL },
    {(char *) "Add", (PyCFunction) _wrap_PyNs3NdnFib_Add, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RemoveFromAll", (PyCFunction) _wrap_PyNs3NdnFib_RemoveFromAll, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Find", (PyCFunction) _wrap_PyNs3NdnFib_Find, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnFib__tp_clear(PyNs3NdnFib *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::Fib *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnFib__tp_traverse(PyNs3NdnFib *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3NdnFib__tp_dealloc(PyNs3NdnFib *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnFib__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnFib__tp_str(PyNs3NdnFib *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnFib__tp_richcompare (PyNs3NdnFib *PYBINDGEN_UNUSED(self), PyNs3NdnFib *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnFib_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnFib_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Fib",            /* tp_name */
    sizeof(PyNs3NdnFib),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnFib__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnFib__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnFib__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnFib__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnFib__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnFib_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnFib, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnFib__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_ShouldSuppressIncomingInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method ShouldSuppressIncomingInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->ShouldSuppressIncomingInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DoInitialize(PyNs3NdnForwardingStrategy *self)
{
    PyObject *py_retval;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_PropagateInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method PropagateInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->PropagateInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_TrySendOutInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnFace *outFace;
    ns3::ndn::Face *outFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "outFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnFace_Type, &outFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    outFace_ptr = (outFace ? outFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method TrySendOutInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->TrySendOutInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Face  > (outFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_WillSatisfyPendingInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method WillSatisfyPendingInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->WillSatisfyPendingInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidSendOutInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnFace *outFace;
    ns3::ndn::Face *outFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "outFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnFace_Type, &outFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    outFace_ptr = (outFace ? outFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidSendOutInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidSendOutInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Face  > (outFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidReceiveDuplicateInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidReceiveDuplicateInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidReceiveDuplicateInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidSendOutData(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnFace *outFace;
    ns3::ndn::Face *outFace_ptr;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "outFace", "data", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnFace_Type, &outFace, &PyNs3NdnData_Type, &data, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    outFace_ptr = (outFace ? outFace->obj : NULL);
    data_ptr = (data ? data->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidSendOutData of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidSendOutData__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Face  > (outFace_ptr), ns3::Ptr< ns3::ndn::Data  > (data_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnForwardingStrategy *self)
{
    PyObject *py_retval;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DoDispose(PyNs3NdnForwardingStrategy *self)
{
    PyObject *py_retval;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_SatisfyPendingInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "data", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnData_Type, &data, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    data_ptr = (data ? data->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method SatisfyPendingInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->SatisfyPendingInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Data  > (data_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidSuppressSimilarInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidSuppressSimilarInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidSuppressSimilarInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidReceiveUnsolicitedData(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    bool didCreateCacheEntry;
    PyObject *py_didCreateCacheEntry;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "data", "didCreateCacheEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnData_Type, &data, &py_didCreateCacheEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    data_ptr = (data ? data->obj : NULL);
    didCreateCacheEntry = (bool) PyObject_IsTrue(py_didCreateCacheEntry);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidReceiveUnsolicitedData of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidReceiveUnsolicitedData__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Data  > (data_ptr), didCreateCacheEntry);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidExhaustForwardingOptions(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidExhaustForwardingOptions of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidExhaustForwardingOptions__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_CanSendOutInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnFace *outFace;
    ns3::ndn::Face *outFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "outFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnFace_Type, &outFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    outFace_ptr = (outFace ? outFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method CanSendOutInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->CanSendOutInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Face  > (outFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidCreatePitEntry(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidCreatePitEntry of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidCreatePitEntry__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DetectRetransmittedInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DetectRetransmittedInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->DetectRetransmittedInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidReceiveSolicitedData(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    bool didCreateCacheEntry;
    PyObject *py_didCreateCacheEntry;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "data", "didCreateCacheEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnData_Type, &data, &py_didCreateCacheEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    data_ptr = (data ? data->obj : NULL);
    didCreateCacheEntry = (bool) PyObject_IsTrue(py_didCreateCacheEntry);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidReceiveSolicitedData of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidReceiveSolicitedData__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Data  > (data_ptr), didCreateCacheEntry);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnForwardingStrategy *self)
{
    PyObject *py_retval;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_FailedToCreatePitEntry(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method FailedToCreatePitEntry of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->FailedToCreatePitEntry__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidForwardSimilarInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *inFace;
    ns3::ndn::Face *inFace_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper = dynamic_cast< PyNs3NdnForwardingStrategy__PythonHelper* >(self->obj);
    const char *keywords[] = {"inFace", "interest", "pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!", (char **) keywords, &PyNs3NdnFace_Type, &inFace, &PyNs3NdnInterest_Type, &interest, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    inFace_ptr = (inFace ? inFace->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DidForwardSimilarInterest of class ForwardingStrategy is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DidForwardSimilarInterest__parent_caller(ns3::Ptr< ns3::ndn::Face  > (inFace_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::AddFace(ns3::Ptr< ns3::ndn::Face > face)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AddFace"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::AddFace(face);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AddFace", (char *) "N", py_Face);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidAddFibEntry(ns3::Ptr< ns3::ndn::fib::Entry > fibEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidAddFibEntry"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidAddFibEntry(fibEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidAddFibEntry", (char *) "N", py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::OnData(ns3::Ptr< ns3::ndn::Face > face, ns3::Ptr< ns3::ndn::Data > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "OnData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::OnData(face, data);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type2);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "OnData", (char *) "NN", py_Face, py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::OnInterest(ns3::Ptr< ns3::ndn::Face > face, ns3::Ptr< ns3::ndn::Interest > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "OnInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::OnInterest(face, interest);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "OnInterest", (char *) "NN", py_Face, py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::RemoveFace(ns3::Ptr< ns3::ndn::Face > face)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "RemoveFace"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::RemoveFace(face);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "RemoveFace", (char *) "N", py_Face);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::WillEraseTimedOutPendingInterest(ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "WillEraseTimedOutPendingInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::WillEraseTimedOutPendingInterest(pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "WillEraseTimedOutPendingInterest", (char *) "N", py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::WillRemoveFibEntry(ns3::Ptr< ns3::ndn::fib::Entry > fibEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFibEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "WillRemoveFibEntry"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::WillRemoveFibEntry(fibEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnFibEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry))), &PyNs3NdnFibEntry_Type);
        py_Entry = PyObject_GC_New(PyNs3NdnFibEntry, wrapper_type);
        py_Entry->inst_dict = NULL;
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::fib::Entry *> (ns3::PeekPointer (fibEntry));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "WillRemoveFibEntry", (char *) "N", py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnForwardingStrategy__PythonHelper::CanSendOutInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnFace *py_Face2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter4;
    PyTypeObject *wrapper_type4 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "CanSendOutInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::CanSendOutInterest(inFace, outFace, interest, pitEntry);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face2 = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))->m_pyself);
        py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
        Py_INCREF(py_Face2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face2 = NULL;
        } else {
            py_Face2 = (PyNs3NdnFace *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Face2);
        }
    
        if (py_Face2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))), &PyNs3NdnFace_Type);
            py_Face2 = PyObject_GC_New(PyNs3NdnFace, wrapper_type2);
            py_Face2->inst_dict = NULL;
    
            py_Face2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))->Ref();
            py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face2->obj] = (PyObject *) py_Face2;
        }
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type3);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter4 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter4 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter4->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type4 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type4);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "CanSendOutInterest", (char *) "NNNN", py_Face, py_Face2, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::CanSendOutInterest(inFace, outFace, interest, pitEntry);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::CanSendOutInterest(inFace, outFace, interest, pitEntry);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnForwardingStrategy__PythonHelper::DetectRetransmittedInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DetectRetransmittedInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::DetectRetransmittedInterest(inFace, interest, pitEntry);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DetectRetransmittedInterest", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::DetectRetransmittedInterest(inFace, interest, pitEntry);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::DetectRetransmittedInterest(inFace, interest, pitEntry);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidCreatePitEntry(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidCreatePitEntry"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidCreatePitEntry(inFace, interest, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidCreatePitEntry", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidExhaustForwardingOptions(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidExhaustForwardingOptions"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidExhaustForwardingOptions(inFace, interest, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidExhaustForwardingOptions", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidForwardSimilarInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidForwardSimilarInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidForwardSimilarInterest(inFace, interest, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidForwardSimilarInterest", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidReceiveDuplicateInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidReceiveDuplicateInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidReceiveDuplicateInterest(inFace, interest, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidReceiveDuplicateInterest", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidReceiveSolicitedData(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, bool didCreateCacheEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidReceiveSolicitedData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidReceiveSolicitedData(inFace, data, didCreateCacheEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type2);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidReceiveSolicitedData", (char *) "NNN", py_Face, py_Data, PyBool_FromLong(didCreateCacheEntry));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidReceiveUnsolicitedData(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, bool didCreateCacheEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidReceiveUnsolicitedData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidReceiveUnsolicitedData(inFace, data, didCreateCacheEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type2);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidReceiveUnsolicitedData", (char *) "NNN", py_Face, py_Data, PyBool_FromLong(didCreateCacheEntry));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidSendOutData(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Data const > data, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnFace *py_Face2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter4;
    PyTypeObject *wrapper_type4 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidSendOutData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidSendOutData(inFace, outFace, data, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face2 = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))->m_pyself);
        py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
        Py_INCREF(py_Face2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face2 = NULL;
        } else {
            py_Face2 = (PyNs3NdnFace *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Face2);
        }
    
        if (py_Face2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))), &PyNs3NdnFace_Type);
            py_Face2 = PyObject_GC_New(PyNs3NdnFace, wrapper_type2);
            py_Face2->inst_dict = NULL;
    
            py_Face2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))->Ref();
            py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face2->obj] = (PyObject *) py_Face2;
        }
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type3);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    wrapper_lookup_iter4 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter4 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter4->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type4 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type4);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidSendOutData", (char *) "NNNN", py_Face, py_Face2, py_Data, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidSendOutInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnFace *py_Face2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter4;
    PyTypeObject *wrapper_type4 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidSendOutInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidSendOutInterest(inFace, outFace, interest, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face2 = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))->m_pyself);
        py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
        Py_INCREF(py_Face2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face2 = NULL;
        } else {
            py_Face2 = (PyNs3NdnFace *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Face2);
        }
    
        if (py_Face2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))), &PyNs3NdnFace_Type);
            py_Face2 = PyObject_GC_New(PyNs3NdnFace, wrapper_type2);
            py_Face2->inst_dict = NULL;
    
            py_Face2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))->Ref();
            py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face2->obj] = (PyObject *) py_Face2;
        }
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type3);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter4 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter4 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter4->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type4 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type4);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidSendOutInterest", (char *) "NNNN", py_Face, py_Face2, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DidSuppressSimilarInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DidSuppressSimilarInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DidSuppressSimilarInterest(inFace, interest, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DidSuppressSimilarInterest", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnForwardingStrategy__PythonHelper::DoPropagateInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoPropagateInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoPropagateInterest", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::FailedToCreatePitEntry(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "FailedToCreatePitEntry"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::FailedToCreatePitEntry(inFace, interest);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "FailedToCreatePitEntry", (char *) "NN", py_Face, py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::PropagateInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "PropagateInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::PropagateInterest(inFace, interest, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "PropagateInterest", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::SatisfyPendingInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Data const > data, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SatisfyPendingInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::SatisfyPendingInterest(inFace, data, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type2);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SatisfyPendingInterest", (char *) "NNN", py_Face, py_Data, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnForwardingStrategy__PythonHelper::ShouldSuppressIncomingInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ShouldSuppressIncomingInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::ShouldSuppressIncomingInterest(inFace, interest, pitEntry);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type2);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type3);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ShouldSuppressIncomingInterest", (char *) "NNN", py_Face, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::ShouldSuppressIncomingInterest(inFace, interest, pitEntry);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::ShouldSuppressIncomingInterest(inFace, interest, pitEntry);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnForwardingStrategy__PythonHelper::TrySendOutInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::Face > outFace, ns3::Ptr< ns3::ndn::Interest const > interest, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnFace *py_Face2;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter3;
    PyTypeObject *wrapper_type3 = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter4;
    PyTypeObject *wrapper_type4 = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "TrySendOutInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::TrySendOutInterest(inFace, outFace, interest, pitEntry);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face2 = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)))->m_pyself);
        py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
        Py_INCREF(py_Face2);
    } else {
        wrapper_lookup_iter2 = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace)));
        if (wrapper_lookup_iter2 == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face2 = NULL;
        } else {
            py_Face2 = (PyNs3NdnFace *) wrapper_lookup_iter2->second;
            Py_INCREF(py_Face2);
        }
    
        if (py_Face2 == NULL)
        {
            wrapper_type2 = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))), &PyNs3NdnFace_Type);
            py_Face2 = PyObject_GC_New(PyNs3NdnFace, wrapper_type2);
            py_Face2->inst_dict = NULL;
    
            py_Face2->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace))->Ref();
            py_Face2->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (outFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face2->obj] = (PyObject *) py_Face2;
        }
    }
    wrapper_lookup_iter3 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter3 == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter3->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type3 = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type3);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    wrapper_lookup_iter4 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter4 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter4->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type4 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type4);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "TrySendOutInterest", (char *) "NNNN", py_Face, py_Face2, py_Interest, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::TrySendOutInterest(inFace, outFace, interest, pitEntry);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ForwardingStrategy::TrySendOutInterest(inFace, outFace, interest, pitEntry);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::WillSatisfyPendingInterest(ns3::Ptr< ns3::ndn::Face > inFace, ns3::Ptr< ns3::ndn::pit::Entry > pitEntry)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ForwardingStrategy *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter2;
    PyTypeObject *wrapper_type2 = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "WillSatisfyPendingInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ForwardingStrategy::WillSatisfyPendingInterest(inFace, pitEntry);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = (ns3::ndn::ForwardingStrategy*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (inFace));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    wrapper_lookup_iter2 = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry)));
    if (wrapper_lookup_iter2 == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter2->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL)
    {
        wrapper_type2 = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type2);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (pitEntry));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "WillSatisfyPendingInterest", (char *) "NN", py_Face, py_Entry);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnForwardingStrategy* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3NdnForwardingStrategy__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnForwardingStrategy__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3NdnForwardingStrategy__tp_init__0(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnForwardingStrategy *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnForwardingStrategy_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnForwardingStrategy_Type)
    {
        self->obj = new PyNs3NdnForwardingStrategy__PythonHelper(*((PyNs3NdnForwardingStrategy *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnForwardingStrategy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'ForwardingStrategy' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3NdnForwardingStrategy__tp_init__1(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnForwardingStrategy_Type)
    {
        self->obj = new PyNs3NdnForwardingStrategy__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnForwardingStrategy__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'ForwardingStrategy' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3NdnForwardingStrategy__tp_init(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnForwardingStrategy__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnForwardingStrategy__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_AddFace(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper_class = dynamic_cast<PyNs3NdnForwardingStrategy__PythonHelper*> (self->obj);
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    (helper_class == NULL)? (self->obj->AddFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr))) : (self->obj->ns3::ndn::ForwardingStrategy::AddFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::ForwardingStrategy::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_DidAddFibEntry(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFibEntry *fibEntry;
    ns3::ndn::fib::Entry *fibEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper_class = dynamic_cast<PyNs3NdnForwardingStrategy__PythonHelper*> (self->obj);
    const char *keywords[] = {"fibEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibEntry_Type, &fibEntry)) {
        return NULL;
    }
    fibEntry_ptr = (fibEntry ? fibEntry->obj : NULL);
    (helper_class == NULL)? (self->obj->DidAddFibEntry(ns3::Ptr< ns3::ndn::fib::Entry  > (fibEntry_ptr))) : (self->obj->ns3::ndn::ForwardingStrategy::DidAddFibEntry(ns3::Ptr< ns3::ndn::fib::Entry  > (fibEntry_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_OnData(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper_class = dynamic_cast<PyNs3NdnForwardingStrategy__PythonHelper*> (self->obj);
    const char *keywords[] = {"face", "data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnFace_Type, &face, &PyNs3NdnData_Type, &data)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    data_ptr = (data ? data->obj : NULL);
    (helper_class == NULL)? (self->obj->OnData(ns3::Ptr< ns3::ndn::Face  > (face_ptr), ns3::Ptr< ns3::ndn::Data  > (data_ptr))) : (self->obj->ns3::ndn::ForwardingStrategy::OnData(ns3::Ptr< ns3::ndn::Face  > (face_ptr), ns3::Ptr< ns3::ndn::Data  > (data_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_WillEraseTimedOutPendingInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnPitEntry *pitEntry;
    ns3::ndn::pit::Entry *pitEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper_class = dynamic_cast<PyNs3NdnForwardingStrategy__PythonHelper*> (self->obj);
    const char *keywords[] = {"pitEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitEntry_Type, &pitEntry)) {
        return NULL;
    }
    pitEntry_ptr = (pitEntry ? pitEntry->obj : NULL);
    (helper_class == NULL)? (self->obj->WillEraseTimedOutPendingInterest(ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr))) : (self->obj->ns3::ndn::ForwardingStrategy::WillEraseTimedOutPendingInterest(ns3::Ptr< ns3::ndn::pit::Entry  > (pitEntry_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_WillRemoveFibEntry(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFibEntry *fibEntry;
    ns3::ndn::fib::Entry *fibEntry_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper_class = dynamic_cast<PyNs3NdnForwardingStrategy__PythonHelper*> (self->obj);
    const char *keywords[] = {"fibEntry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFibEntry_Type, &fibEntry)) {
        return NULL;
    }
    fibEntry_ptr = (fibEntry ? fibEntry->obj : NULL);
    (helper_class == NULL)? (self->obj->WillRemoveFibEntry(ns3::Ptr< ns3::ndn::fib::Entry  > (fibEntry_ptr))) : (self->obj->ns3::ndn::ForwardingStrategy::WillRemoveFibEntry(ns3::Ptr< ns3::ndn::fib::Entry  > (fibEntry_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_GetLogName(void)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = ns3::ndn::ForwardingStrategy::GetLogName();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_RemoveFace(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper_class = dynamic_cast<PyNs3NdnForwardingStrategy__PythonHelper*> (self->obj);
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    (helper_class == NULL)? (self->obj->RemoveFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr))) : (self->obj->ns3::ndn::ForwardingStrategy::RemoveFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnForwardingStrategy_OnInterest(PyNs3NdnForwardingStrategy *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnForwardingStrategy__PythonHelper *helper_class = dynamic_cast<PyNs3NdnForwardingStrategy__PythonHelper*> (self->obj);
    const char *keywords[] = {"face", "interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3NdnFace_Type, &face, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    interest_ptr = (interest ? interest->obj : NULL);
    (helper_class == NULL)? (self->obj->OnInterest(ns3::Ptr< ns3::ndn::Face  > (face_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr))) : (self->obj->ns3::ndn::ForwardingStrategy::OnInterest(ns3::Ptr< ns3::ndn::Face  > (face_ptr), ns3::Ptr< ns3::ndn::Interest  > (interest_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3NdnForwardingStrategy_methods[] = {
    {(char *) "AddFace", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_AddFace, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "DidAddFibEntry", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_DidAddFibEntry, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "OnData", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_OnData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "WillEraseTimedOutPendingInterest", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_WillEraseTimedOutPendingInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "WillRemoveFibEntry", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_WillRemoveFibEntry, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetLogName", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_GetLogName, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "RemoveFace", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_RemoveFace, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "OnInterest", (PyCFunction) _wrap_PyNs3NdnForwardingStrategy_OnInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ShouldSuppressIncomingInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_ShouldSuppressIncomingInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "PropagateInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_PropagateInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "TrySendOutInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_TrySendOutInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "WillSatisfyPendingInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_WillSatisfyPendingInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidSendOutInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidSendOutInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidReceiveDuplicateInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidReceiveDuplicateInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidSendOutData", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidSendOutData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "SatisfyPendingInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_SatisfyPendingInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidSuppressSimilarInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidSuppressSimilarInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidReceiveUnsolicitedData", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidReceiveUnsolicitedData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidExhaustForwardingOptions", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidExhaustForwardingOptions, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CanSendOutInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_CanSendOutInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidCreatePitEntry", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidCreatePitEntry, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DetectRetransmittedInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DetectRetransmittedInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidReceiveSolicitedData", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidReceiveSolicitedData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "FailedToCreatePitEntry", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_FailedToCreatePitEntry, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DidForwardSimilarInterest", (PyCFunction) PyNs3NdnForwardingStrategy__PythonHelper::_wrap_DidForwardSimilarInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnForwardingStrategy__tp_clear(PyNs3NdnForwardingStrategy *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::ForwardingStrategy *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnForwardingStrategy__tp_traverse(PyNs3NdnForwardingStrategy *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnForwardingStrategy__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnForwardingStrategy__tp_dealloc(PyNs3NdnForwardingStrategy *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnForwardingStrategy__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnForwardingStrategy__tp_richcompare (PyNs3NdnForwardingStrategy *PYBINDGEN_UNUSED(self), PyNs3NdnForwardingStrategy *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnForwardingStrategy_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnForwardingStrategy_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.ForwardingStrategy",            /* tp_name */
    sizeof(PyNs3NdnForwardingStrategy),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnForwardingStrategy__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnForwardingStrategy__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnForwardingStrategy__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnForwardingStrategy__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnForwardingStrategy_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnForwardingStrategy, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnForwardingStrategy__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnGlobalRoutingHelper_wrapper_registry;


static int
_wrap_PyNs3NdnGlobalRoutingHelper__tp_init__0(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::GlobalRoutingHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnGlobalRoutingHelper__tp_init__1(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnGlobalRoutingHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnGlobalRoutingHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::GlobalRoutingHelper(*((PyNs3NdnGlobalRoutingHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnGlobalRoutingHelper__tp_init(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnGlobalRoutingHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnGlobalRoutingHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_AddOriginsForAll(PyNs3NdnGlobalRoutingHelper *self)
{
    PyObject *py_retval;
    
    self->obj->AddOriginsForAll();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_AddOrigin__0(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"prefix", "node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &prefix, &prefix_len, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    prefix_std = std::string(prefix, prefix_len);
    node_ptr = (node ? node->obj : NULL);
    self->obj->AddOrigin(prefix_std, ns3::Ptr< ns3::Node  > (node_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_AddOrigin__1(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    const char *nodeName;
    Py_ssize_t nodeName_len;
    std::string nodeName_std;
    const char *keywords[] = {"prefix", "nodeName", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#", (char **) keywords, &prefix, &prefix_len, &nodeName, &nodeName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    prefix_std = std::string(prefix, prefix_len);
    nodeName_std = std::string(nodeName, nodeName_len);
    self->obj->AddOrigin(prefix_std, nodeName_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnGlobalRoutingHelper_AddOrigin(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnGlobalRoutingHelper_AddOrigin__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnGlobalRoutingHelper_AddOrigin__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_InstallAll(PyNs3NdnGlobalRoutingHelper *self)
{
    PyObject *py_retval;
    
    self->obj->InstallAll();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_CalculateAllPossibleRoutes(void)
{
    PyObject *py_retval;
    
    ns3::ndn::GlobalRoutingHelper::CalculateAllPossibleRoutes();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_AddOrigins(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    PyNs3NodeContainer *nodes;
    const char *keywords[] = {"prefix", "nodes", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &prefix, &prefix_len, &PyNs3NodeContainer_Type, &nodes)) {
        return NULL;
    }
    prefix_std = std::string(prefix, prefix_len);
    self->obj->AddOrigins(prefix_std, *((PyNs3NodeContainer *) nodes)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_CalculateRoutes(void)
{
    PyObject *py_retval;
    
    ns3::ndn::GlobalRoutingHelper::CalculateRoutes();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_Install__0(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    self->obj->Install(ns3::Ptr< ns3::Node  > (node_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnGlobalRoutingHelper_Install__1(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *nodes;
    const char *keywords[] = {"nodes", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &nodes)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->Install(*((PyNs3NodeContainer *) nodes)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnGlobalRoutingHelper_Install(PyNs3NdnGlobalRoutingHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnGlobalRoutingHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnGlobalRoutingHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3NdnGlobalRoutingHelper__copy__(PyNs3NdnGlobalRoutingHelper *self)
{

    PyNs3NdnGlobalRoutingHelper *py_copy;
    py_copy = PyObject_New(PyNs3NdnGlobalRoutingHelper, &PyNs3NdnGlobalRoutingHelper_Type);
    py_copy->obj = new ns3::ndn::GlobalRoutingHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnGlobalRoutingHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnGlobalRoutingHelper_methods[] = {
    {(char *) "AddOriginsForAll", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper_AddOriginsForAll, METH_NOARGS, NULL },
    {(char *) "AddOrigin", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper_AddOrigin, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper_InstallAll, METH_NOARGS, NULL },
    {(char *) "CalculateAllPossibleRoutes", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper_CalculateAllPossibleRoutes, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "AddOrigins", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper_AddOrigins, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "CalculateRoutes", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper_CalculateRoutes, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnGlobalRoutingHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnGlobalRoutingHelper__tp_dealloc(PyNs3NdnGlobalRoutingHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnGlobalRoutingHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnGlobalRoutingHelper_wrapper_registry.end()) {
        PyNs3NdnGlobalRoutingHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::GlobalRoutingHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnGlobalRoutingHelper__tp_richcompare (PyNs3NdnGlobalRoutingHelper *PYBINDGEN_UNUSED(self), PyNs3NdnGlobalRoutingHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnGlobalRoutingHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnGlobalRoutingHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.GlobalRoutingHelper",            /* tp_name */
    sizeof(PyNs3NdnGlobalRoutingHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnGlobalRoutingHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnGlobalRoutingHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnGlobalRoutingHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnGlobalRoutingHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnHeaderHelper_wrapper_registry;


static int
_wrap_PyNs3NdnHeaderHelper__tp_init__0(PyNs3NdnHeaderHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::HeaderHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnHeaderHelper__tp_init__1(PyNs3NdnHeaderHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnHeaderHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnHeaderHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::HeaderHelper(*((PyNs3NdnHeaderHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnHeaderHelper__tp_init(PyNs3NdnHeaderHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnHeaderHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnHeaderHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnHeaderHelper_GetNdnHeaderType(PyNs3NdnHeaderHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ndn::HeaderHelper::Type retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    retval = ns3::ndn::HeaderHelper::GetNdnHeaderType(ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnHeaderHelper__copy__(PyNs3NdnHeaderHelper *self)
{

    PyNs3NdnHeaderHelper *py_copy;
    py_copy = PyObject_New(PyNs3NdnHeaderHelper, &PyNs3NdnHeaderHelper_Type);
    py_copy->obj = new ns3::ndn::HeaderHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnHeaderHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnHeaderHelper_methods[] = {
    {(char *) "GetNdnHeaderType", (PyCFunction) _wrap_PyNs3NdnHeaderHelper_GetNdnHeaderType, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnHeaderHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnHeaderHelper__tp_dealloc(PyNs3NdnHeaderHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnHeaderHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnHeaderHelper_wrapper_registry.end()) {
        PyNs3NdnHeaderHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::HeaderHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnHeaderHelper__tp_richcompare (PyNs3NdnHeaderHelper *PYBINDGEN_UNUSED(self), PyNs3NdnHeaderHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnHeaderHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnHeaderHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.HeaderHelper",            /* tp_name */
    sizeof(PyNs3NdnHeaderHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnHeaderHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnHeaderHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnHeaderHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnHeaderHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3NdnInterest__tp_init__0(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3Packet *payload = NULL;
    ns3::Packet *payload_ptr;
    const char *keywords[] = {"payload", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O!", (char **) keywords, &PyNs3Packet_Type, &payload)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    payload_ptr = (payload ? payload->obj : NULL);
    self->obj = new ns3::ndn::Interest(ns3::Ptr< ns3::Packet  > (payload_ptr));
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnInterest__tp_init__1(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnInterest *interest;
    const char *keywords[] = {"interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Interest(*((PyNs3NdnInterest *) interest)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnInterest__tp_init(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnInterest__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnInterest__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnInterest_GetScope(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    int8_t retval;
    
    retval = self->obj->GetScope();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_SetPayload(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *payload;
    ns3::Packet *payload_ptr;
    const char *keywords[] = {"payload", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &payload)) {
        return NULL;
    }
    payload_ptr = (payload ? payload->obj : NULL);
    self->obj->SetPayload(ns3::Ptr< ns3::Packet  > (payload_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnInterest_SetName__0(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnName *name;
    ns3::ndn::Name *name_ptr;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &name)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    name_ptr = (name ? name->obj : NULL);
    self->obj->SetName(ns3::Ptr< ns3::ndn::Name  > (name_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnInterest_SetName__1(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnName *name;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &name)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    self->obj->SetName(*((PyNs3NdnName *) name)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnInterest_SetName(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnInterest_SetName__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnInterest_SetName__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnInterest_GetExclude(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Exclude const > retval;
    PyNs3NdnExclude *py_Exclude;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetExclude();
    if (!(const_cast<ns3::ndn::Exclude *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Exclude *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Exclude = NULL;
    } else {
        py_Exclude = (PyNs3NdnExclude *) wrapper_lookup_iter->second;
        Py_INCREF(py_Exclude);
    }
    
    if (py_Exclude == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Exclude *> (ns3::PeekPointer (retval)))), &PyNs3NdnExclude_Type);
        py_Exclude = PyObject_New(PyNs3NdnExclude, wrapper_type);
    
        py_Exclude->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Exclude *> (ns3::PeekPointer (retval))->Ref();
        py_Exclude->obj = const_cast<ns3::ndn::Exclude *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Exclude->obj] = (PyObject *) py_Exclude;
    }
    py_retval = Py_BuildValue((char *) "N", py_Exclude);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_GetWire(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetWire();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_GetName(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    
    ns3::ndn::Name const & retval = self->obj->GetName();
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_GetNamePtr(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Name const > retval;
    PyNs3NdnName *py_Name;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNamePtr();
    if (!(const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Name = NULL;
    } else {
        py_Name = (PyNs3NdnName *) wrapper_lookup_iter->second;
        Py_INCREF(py_Name);
    }
    
    if (py_Name == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))), &PyNs3NdnName_Type);
        py_Name = PyObject_New(PyNs3NdnName, wrapper_type);
    
        py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval))->Ref();
        py_Name->obj = const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    }
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_GetInterestLifetime(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetInterestLifetime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_SetNonce(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned int nonce;
    const char *keywords[] = {"nonce", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &nonce)) {
        return NULL;
    }
    self->obj->SetNonce(nonce);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_GetNack(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    uint8_t retval;
    
    retval = self->obj->GetNack();
    py_retval = Py_BuildValue((char *) "i", (int)retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_SetInterestLifetime(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *time;
    const char *keywords[] = {"time", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &time)) {
        return NULL;
    }
    self->obj->SetInterestLifetime(*((PyNs3Time *) time)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_SetScope(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int scope;
    const char *keywords[] = {"scope", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &scope)) {
        return NULL;
    }
    if (scope > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetScope(scope);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_GetPayload(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet const > retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetPayload();
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_GetNonce(PyNs3NdnInterest *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetNonce();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_SetNack(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int nackType;
    const char *keywords[] = {"nackType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &nackType)) {
        return NULL;
    }
    if (nackType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetNack(nackType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_SetExclude(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnExclude *exclude;
    ns3::ndn::Exclude *exclude_ptr;
    const char *keywords[] = {"exclude", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnExclude_Type, &exclude)) {
        return NULL;
    }
    exclude_ptr = (exclude ? exclude->obj : NULL);
    self->obj->SetExclude(ns3::Ptr< ns3::ndn::Exclude  > (exclude_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnInterest_SetWire(PyNs3NdnInterest *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    self->obj->SetWire(ns3::Ptr< ns3::Packet  > (packet_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnInterest__copy__(PyNs3NdnInterest *self)
{

    PyNs3NdnInterest *py_copy;
    py_copy = PyObject_New(PyNs3NdnInterest, &PyNs3NdnInterest_Type);
    
    py_copy->obj = new ns3::ndn::Interest(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnInterest_methods[] = {
    {(char *) "GetScope", (PyCFunction) _wrap_PyNs3NdnInterest_GetScope, METH_NOARGS, NULL },
    {(char *) "SetPayload", (PyCFunction) _wrap_PyNs3NdnInterest_SetPayload, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetName", (PyCFunction) _wrap_PyNs3NdnInterest_SetName, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetExclude", (PyCFunction) _wrap_PyNs3NdnInterest_GetExclude, METH_NOARGS, NULL },
    {(char *) "GetWire", (PyCFunction) _wrap_PyNs3NdnInterest_GetWire, METH_NOARGS, NULL },
    {(char *) "GetName", (PyCFunction) _wrap_PyNs3NdnInterest_GetName, METH_NOARGS, NULL },
    {(char *) "GetNamePtr", (PyCFunction) _wrap_PyNs3NdnInterest_GetNamePtr, METH_NOARGS, NULL },
    {(char *) "GetInterestLifetime", (PyCFunction) _wrap_PyNs3NdnInterest_GetInterestLifetime, METH_NOARGS, NULL },
    {(char *) "SetNonce", (PyCFunction) _wrap_PyNs3NdnInterest_SetNonce, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNack", (PyCFunction) _wrap_PyNs3NdnInterest_GetNack, METH_NOARGS, NULL },
    {(char *) "SetInterestLifetime", (PyCFunction) _wrap_PyNs3NdnInterest_SetInterestLifetime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetScope", (PyCFunction) _wrap_PyNs3NdnInterest_SetScope, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetPayload", (PyCFunction) _wrap_PyNs3NdnInterest_GetPayload, METH_NOARGS, NULL },
    {(char *) "GetNonce", (PyCFunction) _wrap_PyNs3NdnInterest_GetNonce, METH_NOARGS, NULL },
    {(char *) "SetNack", (PyCFunction) _wrap_PyNs3NdnInterest_SetNack, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetExclude", (PyCFunction) _wrap_PyNs3NdnInterest_SetExclude, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetWire", (PyCFunction) _wrap_PyNs3NdnInterest_SetWire, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnInterest__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnInterest__tp_dealloc(PyNs3NdnInterest *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::Interest *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnInterest__tp_str(PyNs3NdnInterest *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnInterest__tp_richcompare (PyNs3NdnInterest *PYBINDGEN_UNUSED(self), PyNs3NdnInterest *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnInterest_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnInterest_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Interest",            /* tp_name */
    sizeof(PyNs3NdnInterest),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnInterest__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnInterest__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnInterest__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnInterest_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnInterest__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnInterestException_wrapper_registry;


static int
_wrap_PyNs3NdnInterestException__tp_init__0(PyNs3NdnInterestException *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::InterestException();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnInterestException__tp_init__1(PyNs3NdnInterestException *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnInterestException *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterestException_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::InterestException(*((PyNs3NdnInterestException *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnInterestException__tp_init(PyNs3NdnInterestException *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnInterestException__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnInterestException__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnInterestException__copy__(PyNs3NdnInterestException *self)
{

    PyNs3NdnInterestException *py_copy;
    py_copy = PyObject_New(PyNs3NdnInterestException, &PyNs3NdnInterestException_Type);
    py_copy->obj = new ns3::ndn::InterestException(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnInterestException_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnInterestException_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnInterestException__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnInterestException__tp_dealloc(PyNs3NdnInterestException *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnInterestException_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnInterestException_wrapper_registry.end()) {
        PyNs3NdnInterestException_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::InterestException *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnInterestException__tp_richcompare (PyNs3NdnInterestException *PYBINDGEN_UNUSED(self), PyNs3NdnInterestException *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnInterestException_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnInterestException_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.InterestException",            /* tp_name */
    sizeof(PyNs3NdnInterestException),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnInterestException__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnInterestException__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnInterestException_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnInterestException__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnIpFacesHelper_wrapper_registry;


static int
_wrap_PyNs3NdnIpFacesHelper__tp_init__0(PyNs3NdnIpFacesHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::IpFacesHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnIpFacesHelper__tp_init__1(PyNs3NdnIpFacesHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnIpFacesHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnIpFacesHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::IpFacesHelper(*((PyNs3NdnIpFacesHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnIpFacesHelper__tp_init(PyNs3NdnIpFacesHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnIpFacesHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnIpFacesHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnIpFacesHelper_InstallAll(void)
{
    PyObject *py_retval;
    
    ns3::ndn::IpFacesHelper::InstallAll();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnIpFacesHelper_CreateTcpFace(PyNs3NdnIpFacesHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *when;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3Ipv4Address *address;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    int metric = 1;
    const char *keywords[] = {"when", "node", "address", "prefix", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!s#|i", (char **) keywords, &PyNs3Time_Type, &when, &PyNs3Node_Type, &node, &PyNs3Ipv4Address_Type, &address, &prefix, &prefix_len, &metric)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    prefix_std = std::string(prefix, prefix_len);
    if (metric > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::ndn::IpFacesHelper::CreateTcpFace(*((PyNs3Time *) when)->obj, ns3::Ptr< ns3::Node  > (node_ptr), *((PyNs3Ipv4Address *) address)->obj, prefix_std, metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnIpFacesHelper_Install__0(PyNs3NdnIpFacesHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    ns3::ndn::IpFacesHelper::Install(ns3::Ptr< ns3::Node  > (node_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnIpFacesHelper_Install__1(PyNs3NdnIpFacesHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *nodes;
    const char *keywords[] = {"nodes", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &nodes)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::ndn::IpFacesHelper::Install(*((PyNs3NodeContainer *) nodes)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnIpFacesHelper_Install(PyNs3NdnIpFacesHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnIpFacesHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnIpFacesHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnIpFacesHelper_CreateUdpFace(PyNs3NdnIpFacesHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *when;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    PyNs3Ipv4Address *address;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    int metric = 1;
    const char *keywords[] = {"when", "node", "address", "prefix", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!O!s#|i", (char **) keywords, &PyNs3Time_Type, &when, &PyNs3Node_Type, &node, &PyNs3Ipv4Address_Type, &address, &prefix, &prefix_len, &metric)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    prefix_std = std::string(prefix, prefix_len);
    if (metric > 0x7fff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::ndn::IpFacesHelper::CreateUdpFace(*((PyNs3Time *) when)->obj, ns3::Ptr< ns3::Node  > (node_ptr), *((PyNs3Ipv4Address *) address)->obj, prefix_std, metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnIpFacesHelper__copy__(PyNs3NdnIpFacesHelper *self)
{

    PyNs3NdnIpFacesHelper *py_copy;
    py_copy = PyObject_New(PyNs3NdnIpFacesHelper, &PyNs3NdnIpFacesHelper_Type);
    py_copy->obj = new ns3::ndn::IpFacesHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnIpFacesHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnIpFacesHelper_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3NdnIpFacesHelper_InstallAll, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "CreateTcpFace", (PyCFunction) _wrap_PyNs3NdnIpFacesHelper_CreateTcpFace, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnIpFacesHelper_Install, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "CreateUdpFace", (PyCFunction) _wrap_PyNs3NdnIpFacesHelper_CreateUdpFace, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnIpFacesHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnIpFacesHelper__tp_dealloc(PyNs3NdnIpFacesHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnIpFacesHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnIpFacesHelper_wrapper_registry.end()) {
        PyNs3NdnIpFacesHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::IpFacesHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnIpFacesHelper__tp_richcompare (PyNs3NdnIpFacesHelper *PYBINDGEN_UNUSED(self), PyNs3NdnIpFacesHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnIpFacesHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnIpFacesHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.IpFacesHelper",            /* tp_name */
    sizeof(PyNs3NdnIpFacesHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnIpFacesHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnIpFacesHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnIpFacesHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnIpFacesHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnL3Protocol__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnL3Protocol *self)
{
    PyObject *py_retval;
    PyNs3NdnL3Protocol__PythonHelper *helper = dynamic_cast< PyNs3NdnL3Protocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnL3Protocol__PythonHelper::_wrap_DoInitialize(PyNs3NdnL3Protocol *self)
{
    PyObject *py_retval;
    PyNs3NdnL3Protocol__PythonHelper *helper = dynamic_cast< PyNs3NdnL3Protocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnL3Protocol__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnL3Protocol *self)
{
    PyObject *py_retval;
    PyNs3NdnL3Protocol__PythonHelper *helper = dynamic_cast< PyNs3NdnL3Protocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class L3Protocol is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnL3Protocol__PythonHelper::_wrap_DoDispose(PyNs3NdnL3Protocol *self)
{
    PyObject *py_retval;
    PyNs3NdnL3Protocol__PythonHelper *helper = dynamic_cast< PyNs3NdnL3Protocol__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class L3Protocol is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

uint32_t
PyNs3NdnL3Protocol__PythonHelper::GetNFaces() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::L3Protocol *self_obj_before;
    PyObject *py_retval;
    uint32_t retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetNFaces"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetNFaces();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = const_cast< ns3::ndn::L3Protocol* >((const ns3::ndn::L3Protocol*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetNFaces", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetNFaces();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetNFaces();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::ndn::Face >
PyNs3NdnL3Protocol__PythonHelper::GetFace(uint32_t face) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::L3Protocol *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Face > retval;
    PyNs3NdnFace *tmp_Face;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetFace"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFace(face);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = const_cast< ns3::ndn::L3Protocol* >((const ns3::ndn::L3Protocol*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetFace", (char *) "N", PyLong_FromUnsignedLong(face));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFace(face);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnFace_Type, &tmp_Face)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFace(face);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::ndn::Face  > (tmp_Face->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::Ptr< ns3::ndn::Face >
PyNs3NdnL3Protocol__PythonHelper::GetFaceById(uint32_t face) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::L3Protocol *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Face > retval;
    PyNs3NdnFace *tmp_Face;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetFaceById"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFaceById(face);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = const_cast< ns3::ndn::L3Protocol* >((const ns3::ndn::L3Protocol*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetFaceById", (char *) "N", PyLong_FromUnsignedLong(face));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFaceById(face);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnFace_Type, &tmp_Face)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFaceById(face);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::ndn::Face  > (tmp_Face->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnL3Protocol__PythonHelper::RemoveFace(ns3::Ptr< ns3::ndn::Face > face)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::L3Protocol *self_obj_before;
    PyObject *py_retval;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "RemoveFace"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::L3Protocol::RemoveFace(face);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = (ns3::ndn::L3Protocol*) this;
    if (typeid(*(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = (PyNs3NdnFace*) (((PyNs3NdnFace__PythonHelper*) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL)
        {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (face));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "RemoveFace", (char *) "N", py_Face);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::ndn::Face >
PyNs3NdnL3Protocol__PythonHelper::GetFaceByNetDevice(ns3::Ptr< ns3::NetDevice > netDevice) const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::L3Protocol *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Face > retval;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyNs3NdnFace *tmp_Face;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetFaceByNetDevice"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFaceByNetDevice(netDevice);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = const_cast< ns3::ndn::L3Protocol* >((const ns3::ndn::L3Protocol*) this);
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (netDevice)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_NetDevice = NULL;
    } else {
        py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
        Py_INCREF(py_NetDevice);
    }
    
    if (py_NetDevice == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid(*const_cast<ns3::NetDevice *> (ns3::PeekPointer (netDevice))), &PyNs3NetDevice_Type);
        py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
        py_NetDevice->inst_dict = NULL;
    
        py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::NetDevice *> (ns3::PeekPointer (netDevice))->Ref();
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (netDevice));
        PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetFaceByNetDevice", (char *) "N", py_NetDevice);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFaceByNetDevice(netDevice);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnFace_Type, &tmp_Face)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::L3Protocol::GetFaceByNetDevice(netDevice);
    }
    // dangerous!
    retval = ns3::Ptr< ns3::ndn::Face  > (tmp_Face->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnL3Protocol__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::L3Protocol *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::L3Protocol::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = (ns3::ndn::L3Protocol*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnL3Protocol__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::L3Protocol *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::L3Protocol::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = (ns3::ndn::L3Protocol*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnL3Protocol* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3NdnL3Protocol__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnL3Protocol__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnL3Protocol__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}
static PyObject* _wrap_PyNs3NdnL3Protocol__get_ETHERNET_FRAME_TYPE(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", ns3::ndn::L3Protocol::ETHERNET_FRAME_TYPE);
    return py_retval;
}
static PyObject* _wrap_PyNs3NdnL3Protocol__get_IP_STACK_PORT(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "i", ns3::ndn::L3Protocol::IP_STACK_PORT);
    return py_retval;
}
static PyGetSetDef Ns3NdnL3ProtocolMeta__getsets[] = {
    {
        (char*) "ETHERNET_FRAME_TYPE", /* attribute name */
        (getter) _wrap_PyNs3NdnL3Protocol__get_ETHERNET_FRAME_TYPE, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "IP_STACK_PORT", /* attribute name */
        (getter) _wrap_PyNs3NdnL3Protocol__get_IP_STACK_PORT, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3NdnL3ProtocolMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3NdnL3ProtocolMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3NdnL3ProtocolMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};


static int
_wrap_PyNs3NdnL3Protocol__tp_init(PyNs3NdnL3Protocol *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnL3Protocol_Type)
    {
        self->obj = new PyNs3NdnL3Protocol__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnL3Protocol__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ndn::L3Protocol();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3NdnL3Protocol_GetFaceById(PyNs3NdnL3Protocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Face > retval;
    unsigned int face;
    PyNs3NdnL3Protocol__PythonHelper *helper_class = dynamic_cast<PyNs3NdnL3Protocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"face", NULL};
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &face)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetFaceById(face)) : (self->obj->ns3::ndn::L3Protocol::GetFaceById(face));
    if (!(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = reinterpret_cast< PyNs3NdnFace* >(reinterpret_cast< PyNs3NdnFace__PythonHelper* >(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->inst_dict = NULL;
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Face);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnL3Protocol_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::L3Protocol::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnL3Protocol_GetNFaces(PyNs3NdnL3Protocol *self)
{
    PyObject *py_retval;
    uint32_t retval;
    PyNs3NdnL3Protocol__PythonHelper *helper_class = dynamic_cast<PyNs3NdnL3Protocol__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetNFaces()) : (self->obj->ns3::ndn::L3Protocol::GetNFaces());
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnL3Protocol_GetFace(PyNs3NdnL3Protocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Face > retval;
    unsigned int face;
    PyNs3NdnL3Protocol__PythonHelper *helper_class = dynamic_cast<PyNs3NdnL3Protocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"face", NULL};
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "I", (char **) keywords, &face)) {
        return NULL;
    }
    retval = (helper_class == NULL)? (self->obj->GetFace(face)) : (self->obj->ns3::ndn::L3Protocol::GetFace(face));
    if (!(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = reinterpret_cast< PyNs3NdnFace* >(reinterpret_cast< PyNs3NdnFace__PythonHelper* >(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->inst_dict = NULL;
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Face);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnL3Protocol_RemoveFace(PyNs3NdnL3Protocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    PyNs3NdnL3Protocol__PythonHelper *helper_class = dynamic_cast<PyNs3NdnL3Protocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"face", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnFace_Type, &face)) {
        return NULL;
    }
    face_ptr = (face ? face->obj : NULL);
    (helper_class == NULL)? (self->obj->RemoveFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr))) : (self->obj->ns3::ndn::L3Protocol::RemoveFace(ns3::Ptr< ns3::ndn::Face  > (face_ptr)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnL3Protocol_GetFaceByNetDevice(PyNs3NdnL3Protocol *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Face > retval;
    PyNs3NetDevice *netDevice;
    ns3::NetDevice *netDevice_ptr;
    PyNs3NdnL3Protocol__PythonHelper *helper_class = dynamic_cast<PyNs3NdnL3Protocol__PythonHelper*> (self->obj);
    const char *keywords[] = {"netDevice", NULL};
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NetDevice_Type, &netDevice)) {
        return NULL;
    }
    netDevice_ptr = (netDevice ? netDevice->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->GetFaceByNetDevice(ns3::Ptr< ns3::NetDevice  > (netDevice_ptr))) : (self->obj->ns3::ndn::L3Protocol::GetFaceByNetDevice(ns3::Ptr< ns3::NetDevice  > (netDevice_ptr)));
    if (!(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = reinterpret_cast< PyNs3NdnFace* >(reinterpret_cast< PyNs3NdnFace__PythonHelper* >(const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval)))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->inst_dict = NULL;
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Face);
    return py_retval;
}

static PyMethodDef PyNs3NdnL3Protocol_methods[] = {
    {(char *) "GetFaceById", (PyCFunction) _wrap_PyNs3NdnL3Protocol_GetFaceById, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnL3Protocol_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetNFaces", (PyCFunction) _wrap_PyNs3NdnL3Protocol_GetNFaces, METH_NOARGS, NULL },
    {(char *) "GetFace", (PyCFunction) _wrap_PyNs3NdnL3Protocol_GetFace, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "RemoveFace", (PyCFunction) _wrap_PyNs3NdnL3Protocol_RemoveFace, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetFaceByNetDevice", (PyCFunction) _wrap_PyNs3NdnL3Protocol_GetFaceByNetDevice, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnL3Protocol__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnL3Protocol__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnL3Protocol__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnL3Protocol__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnL3Protocol__tp_clear(PyNs3NdnL3Protocol *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::L3Protocol *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnL3Protocol__tp_traverse(PyNs3NdnL3Protocol *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnL3Protocol__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnL3Protocol__tp_dealloc(PyNs3NdnL3Protocol *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnL3Protocol__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnL3Protocol__tp_richcompare (PyNs3NdnL3Protocol *PYBINDGEN_UNUSED(self), PyNs3NdnL3Protocol *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnL3Protocol_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnL3Protocol_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.L3Protocol",            /* tp_name */
    sizeof(PyNs3NdnL3Protocol),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnL3Protocol__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnL3Protocol__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnL3Protocol__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnL3Protocol__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnL3Protocol_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnL3Protocol, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnL3Protocol__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnL3Tracer__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'L3Tracer' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3NdnL3Tracer_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnL3Tracer__tp_dealloc(PyNs3NdnL3Tracer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::L3Tracer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnL3Tracer__tp_str(PyNs3NdnL3Tracer *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnL3Tracer__tp_richcompare (PyNs3NdnL3Tracer *PYBINDGEN_UNUSED(self), PyNs3NdnL3Tracer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnL3Tracer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnL3Tracer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.L3Tracer",            /* tp_name */
    sizeof(PyNs3NdnL3Tracer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnL3Tracer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnL3Tracer__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnL3Tracer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnL3Tracer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnL3Tracer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnLimits__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    PyNs3NdnLimits__PythonHelper *helper = dynamic_cast< PyNs3NdnLimits__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnLimits__PythonHelper::_wrap_DoInitialize(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    PyNs3NdnLimits__PythonHelper *helper = dynamic_cast< PyNs3NdnLimits__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnLimits__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    PyNs3NdnLimits__PythonHelper *helper = dynamic_cast< PyNs3NdnLimits__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnLimits__PythonHelper::_wrap_FireAvailableSlotCallback(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    PyNs3NdnLimits__PythonHelper *helper = dynamic_cast< PyNs3NdnLimits__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method FireAvailableSlotCallback of class Limits is protected and can only be called by a subclass");
        return NULL;
    }
    helper->FireAvailableSlotCallback__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnLimits__PythonHelper::_wrap_DoDispose(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    PyNs3NdnLimits__PythonHelper *helper = dynamic_cast< PyNs3NdnLimits__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3NdnLimits__PythonHelper::BorrowLimit()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "BorrowLimit"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = (ns3::ndn::Limits*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "BorrowLimit", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

double
PyNs3NdnLimits__PythonHelper::GetCurrentLimit() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCurrentLimit"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = const_cast< ns3::ndn::Limits* >((const ns3::ndn::Limits*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCurrentLimit", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3NdnLimits__PythonHelper::GetCurrentLimitRate() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetCurrentLimitRate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = const_cast< ns3::ndn::Limits* >((const ns3::ndn::Limits*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetCurrentLimitRate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3NdnLimits__PythonHelper::GetLinkDelay() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetLinkDelay"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetLinkDelay();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = const_cast< ns3::ndn::Limits* >((const ns3::ndn::Limits*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetLinkDelay", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetLinkDelay();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetLinkDelay();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3NdnLimits__PythonHelper::GetMaxDelay() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMaxDelay"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetMaxDelay();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = const_cast< ns3::ndn::Limits* >((const ns3::ndn::Limits*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMaxDelay", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetMaxDelay();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetMaxDelay();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3NdnLimits__PythonHelper::GetMaxLimit() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMaxLimit"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = const_cast< ns3::ndn::Limits* >((const ns3::ndn::Limits*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMaxLimit", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

double
PyNs3NdnLimits__PythonHelper::GetMaxRate() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    double retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMaxRate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetMaxRate();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = const_cast< ns3::ndn::Limits* >((const ns3::ndn::Limits*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMaxRate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetMaxRate();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "d", &retval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::GetMaxRate();
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnLimits__PythonHelper::IsBelowLimit()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsBelowLimit"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = (ns3::ndn::Limits*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsBelowLimit", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnLimits__PythonHelper::IsEnabled() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IsEnabled"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::IsEnabled();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = const_cast< ns3::ndn::Limits* >((const ns3::ndn::Limits*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IsEnabled", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::IsEnabled();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Limits::IsEnabled();
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnLimits__PythonHelper::ReturnLimit()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReturnLimit"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = (ns3::ndn::Limits*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReturnLimit", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnLimits__PythonHelper::SetLimits(double rate, double delay)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetLimits"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Limits::SetLimits(rate, delay);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = (ns3::ndn::Limits*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetLimits", (char *) "dd", rate, delay);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnLimits__PythonHelper::SetLinkDelay(double delay)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetLinkDelay"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Limits::SetLinkDelay(delay);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = (ns3::ndn::Limits*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetLinkDelay", (char *) "d", delay);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnLimits__PythonHelper::UpdateCurrentLimit(double limit)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Limits *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "UpdateCurrentLimit"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = (ns3::ndn::Limits*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "UpdateCurrentLimit", (char *) "d", limit);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnLimits* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3NdnLimits__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnLimits__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnLimits__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnLimits__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnLimits__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3NdnLimits__tp_init__0(PyNs3NdnLimits *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnLimits *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnLimits_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnLimits_Type)
    {
        self->obj = new PyNs3NdnLimits__PythonHelper(*((PyNs3NdnLimits *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnLimits__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'Limits' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3NdnLimits__tp_init__1(PyNs3NdnLimits *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnLimits_Type)
    {
        self->obj = new PyNs3NdnLimits__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnLimits__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'Limits' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3NdnLimits__tp_init(PyNs3NdnLimits *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnLimits__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnLimits__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnLimits_GetMaxDelay(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3NdnLimits__PythonHelper *helper_class = dynamic_cast<PyNs3NdnLimits__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMaxDelay()) : (self->obj->ns3::ndn::Limits::GetMaxDelay());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_GetCurrentLimit(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCurrentLimit();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_IsBelowLimit(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    bool retval;
    
    retval = self->obj->IsBelowLimit();
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_SetLimits(PyNs3NdnLimits *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double rate;
    double delay;
    PyNs3NdnLimits__PythonHelper *helper_class = dynamic_cast<PyNs3NdnLimits__PythonHelper*> (self->obj);
    const char *keywords[] = {"rate", "delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dd", (char **) keywords, &rate, &delay)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetLimits(rate, delay)) : (self->obj->ns3::ndn::Limits::SetLimits(rate, delay));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::Limits::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_BorrowLimit(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    
    self->obj->BorrowLimit();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_ReturnLimit(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    
    self->obj->ReturnLimit();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_GetCurrentLimitRate(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetCurrentLimitRate();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_UpdateCurrentLimit(PyNs3NdnLimits *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double limit;
    const char *keywords[] = {"limit", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &limit)) {
        return NULL;
    }
    self->obj->UpdateCurrentLimit(limit);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_GetMaxRate(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3NdnLimits__PythonHelper *helper_class = dynamic_cast<PyNs3NdnLimits__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetMaxRate()) : (self->obj->ns3::ndn::Limits::GetMaxRate());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_GetLinkDelay(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    double retval;
    PyNs3NdnLimits__PythonHelper *helper_class = dynamic_cast<PyNs3NdnLimits__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->GetLinkDelay()) : (self->obj->ns3::ndn::Limits::GetLinkDelay());
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_SetLinkDelay(PyNs3NdnLimits *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double delay;
    PyNs3NdnLimits__PythonHelper *helper_class = dynamic_cast<PyNs3NdnLimits__PythonHelper*> (self->obj);
    const char *keywords[] = {"delay", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "d", (char **) keywords, &delay)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SetLinkDelay(delay)) : (self->obj->ns3::ndn::Limits::SetLinkDelay(delay));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_GetMaxLimit(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    double retval;
    
    retval = self->obj->GetMaxLimit();
    py_retval = Py_BuildValue((char *) "d", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_RegisterAvailableSlotCallback(PyNs3NdnLimits *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *handler;
    ns3::Ptr<PythonCallbackImpl1> handler_cb_impl;
    const char *keywords[] = {"handler", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &handler)) {
        return NULL;
    }
    if (!PyCallable_Check(handler)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'handler' must be callbale");
        return NULL;
    }
    handler_cb_impl = ns3::Create<PythonCallbackImpl1> (handler);
    self->obj->RegisterAvailableSlotCallback(ns3::Callback<void, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (handler_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLimits_IsEnabled(PyNs3NdnLimits *self)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnLimits__PythonHelper *helper_class = dynamic_cast<PyNs3NdnLimits__PythonHelper*> (self->obj);
    
    retval = (helper_class == NULL)? (self->obj->IsEnabled()) : (self->obj->ns3::ndn::Limits::IsEnabled());
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3NdnLimits_methods[] = {
    {(char *) "GetMaxDelay", (PyCFunction) _wrap_PyNs3NdnLimits_GetMaxDelay, METH_NOARGS, NULL },
    {(char *) "GetCurrentLimit", (PyCFunction) _wrap_PyNs3NdnLimits_GetCurrentLimit, METH_NOARGS, NULL },
    {(char *) "IsBelowLimit", (PyCFunction) _wrap_PyNs3NdnLimits_IsBelowLimit, METH_NOARGS, NULL },
    {(char *) "SetLimits", (PyCFunction) _wrap_PyNs3NdnLimits_SetLimits, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnLimits_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "BorrowLimit", (PyCFunction) _wrap_PyNs3NdnLimits_BorrowLimit, METH_NOARGS, NULL },
    {(char *) "ReturnLimit", (PyCFunction) _wrap_PyNs3NdnLimits_ReturnLimit, METH_NOARGS, NULL },
    {(char *) "GetCurrentLimitRate", (PyCFunction) _wrap_PyNs3NdnLimits_GetCurrentLimitRate, METH_NOARGS, NULL },
    {(char *) "UpdateCurrentLimit", (PyCFunction) _wrap_PyNs3NdnLimits_UpdateCurrentLimit, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxRate", (PyCFunction) _wrap_PyNs3NdnLimits_GetMaxRate, METH_NOARGS, NULL },
    {(char *) "GetLinkDelay", (PyCFunction) _wrap_PyNs3NdnLimits_GetLinkDelay, METH_NOARGS, NULL },
    {(char *) "SetLinkDelay", (PyCFunction) _wrap_PyNs3NdnLimits_SetLinkDelay, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxLimit", (PyCFunction) _wrap_PyNs3NdnLimits_GetMaxLimit, METH_NOARGS, NULL },
    {(char *) "RegisterAvailableSlotCallback", (PyCFunction) _wrap_PyNs3NdnLimits_RegisterAvailableSlotCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "IsEnabled", (PyCFunction) _wrap_PyNs3NdnLimits_IsEnabled, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnLimits__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnLimits__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnLimits__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "FireAvailableSlotCallback", (PyCFunction) PyNs3NdnLimits__PythonHelper::_wrap_FireAvailableSlotCallback, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnLimits__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnLimits__tp_clear(PyNs3NdnLimits *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::Limits *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnLimits__tp_traverse(PyNs3NdnLimits *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnLimits__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnLimits__tp_dealloc(PyNs3NdnLimits *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnLimits__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnLimits__tp_richcompare (PyNs3NdnLimits *PYBINDGEN_UNUSED(self), PyNs3NdnLimits *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnLimits_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnLimits_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Limits",            /* tp_name */
    sizeof(PyNs3NdnLimits),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnLimits__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnLimits__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnLimits__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnLimits__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnLimits_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnLimits, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnLimits__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnLinkControlHelper_wrapper_registry;


static int
_wrap_PyNs3NdnLinkControlHelper__tp_init__0(PyNs3NdnLinkControlHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::LinkControlHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnLinkControlHelper__tp_init__1(PyNs3NdnLinkControlHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnLinkControlHelper *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnLinkControlHelper_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::LinkControlHelper(*((PyNs3NdnLinkControlHelper *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnLinkControlHelper__tp_init(PyNs3NdnLinkControlHelper *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnLinkControlHelper__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnLinkControlHelper__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnLinkControlHelper_FailLinkByName(PyNs3NdnLinkControlHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *node1;
    Py_ssize_t node1_len;
    std::string node1_std;
    const char *node2;
    Py_ssize_t node2_len;
    std::string node2_std;
    const char *keywords[] = {"node1", "node2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#", (char **) keywords, &node1, &node1_len, &node2, &node2_len)) {
        return NULL;
    }
    node1_std = std::string(node1, node1_len);
    node2_std = std::string(node2, node2_len);
    ns3::ndn::LinkControlHelper::FailLinkByName(node1_std, node2_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLinkControlHelper_FailLink(PyNs3NdnLinkControlHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node1;
    ns3::Node *node1_ptr;
    PyNs3Node *node2;
    ns3::Node *node2_ptr;
    const char *keywords[] = {"node1", "node2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Node_Type, &node1, &PyNs3Node_Type, &node2)) {
        return NULL;
    }
    node1_ptr = (node1 ? node1->obj : NULL);
    node2_ptr = (node2 ? node2->obj : NULL);
    ns3::ndn::LinkControlHelper::FailLink(ns3::Ptr< ns3::Node  > (node1_ptr), ns3::Ptr< ns3::Node  > (node2_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLinkControlHelper_UpLink(PyNs3NdnLinkControlHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Node *node1;
    ns3::Node *node1_ptr;
    PyNs3Node *node2;
    ns3::Node *node2_ptr;
    const char *keywords[] = {"node1", "node2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O!", (char **) keywords, &PyNs3Node_Type, &node1, &PyNs3Node_Type, &node2)) {
        return NULL;
    }
    node1_ptr = (node1 ? node1->obj : NULL);
    node2_ptr = (node2 ? node2->obj : NULL);
    ns3::ndn::LinkControlHelper::UpLink(ns3::Ptr< ns3::Node  > (node1_ptr), ns3::Ptr< ns3::Node  > (node2_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnLinkControlHelper_UpLinkByName(PyNs3NdnLinkControlHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *node1;
    Py_ssize_t node1_len;
    std::string node1_std;
    const char *node2;
    Py_ssize_t node2_len;
    std::string node2_std;
    const char *keywords[] = {"node1", "node2", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#", (char **) keywords, &node1, &node1_len, &node2, &node2_len)) {
        return NULL;
    }
    node1_std = std::string(node1, node1_len);
    node2_std = std::string(node2, node2_len);
    ns3::ndn::LinkControlHelper::UpLinkByName(node1_std, node2_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnLinkControlHelper__copy__(PyNs3NdnLinkControlHelper *self)
{

    PyNs3NdnLinkControlHelper *py_copy;
    py_copy = PyObject_New(PyNs3NdnLinkControlHelper, &PyNs3NdnLinkControlHelper_Type);
    py_copy->obj = new ns3::ndn::LinkControlHelper(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnLinkControlHelper_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnLinkControlHelper_methods[] = {
    {(char *) "FailLinkByName", (PyCFunction) _wrap_PyNs3NdnLinkControlHelper_FailLinkByName, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "FailLink", (PyCFunction) _wrap_PyNs3NdnLinkControlHelper_FailLink, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "UpLink", (PyCFunction) _wrap_PyNs3NdnLinkControlHelper_UpLink, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "UpLinkByName", (PyCFunction) _wrap_PyNs3NdnLinkControlHelper_UpLinkByName, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnLinkControlHelper__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnLinkControlHelper__tp_dealloc(PyNs3NdnLinkControlHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnLinkControlHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnLinkControlHelper_wrapper_registry.end()) {
        PyNs3NdnLinkControlHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::LinkControlHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnLinkControlHelper__tp_richcompare (PyNs3NdnLinkControlHelper *PYBINDGEN_UNUSED(self), PyNs3NdnLinkControlHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnLinkControlHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnLinkControlHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.LinkControlHelper",            /* tp_name */
    sizeof(PyNs3NdnLinkControlHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnLinkControlHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnLinkControlHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnLinkControlHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnLinkControlHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyNs3NdnName__get_npos(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", ((unsigned PY_LONG_LONG) ns3::ndn::Name::npos));
    return py_retval;
}
static PyObject* _wrap_PyNs3NdnName__get_nversion(PyObject * PYBINDGEN_UNUSED(obj), void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "K", ns3::ndn::Name::nversion);
    return py_retval;
}
static PyGetSetDef Ns3NdnNameMeta__getsets[] = {
    {
        (char*) "nversion", /* attribute name */
        (getter) _wrap_PyNs3NdnName__get_nversion, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "npos", /* attribute name */
        (getter) _wrap_PyNs3NdnName__get_npos, /* C function to get the attribute */
        (setter) NULL, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};

PyTypeObject PyNs3NdnNameMeta_Type = {
        PyVarObject_HEAD_INIT(NULL, 0)
	(char *) "Ns3NdnNameMeta",		        /* tp_name */
	0,					/* tp_basicsize */
	0,					/* tp_itemsize */
	0,	 				/* tp_dealloc */
	0,					/* tp_print */
	0,					/* tp_getattr */
	0,					/* tp_setattr */
	0,					/* tp_compare */
	0,					/* tp_repr */
	0,					/* tp_as_number */
	0,					/* tp_as_sequence */
	0,		       			/* tp_as_mapping */
	0,					/* tp_hash */
	0,					/* tp_call */
	0,					/* tp_str */
	0,					/* tp_getattro */
	0,					/* tp_setattro */
	0,					/* tp_as_buffer */
	Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_BASETYPE, /* tp_flags */
 	0,					/* tp_doc */
	0,					/* tp_traverse */
 	0,					/* tp_clear */
	0,					/* tp_richcompare */
	0,					/* tp_weaklistoffset */
	0,					/* tp_iter */
	0,					/* tp_iternext */
	0,					/* tp_methods */
	0,					/* tp_members */
	Ns3NdnNameMeta__getsets,				/* tp_getset */
	0,					/* tp_base */
	0,					/* tp_dict */
	0,	                                /* tp_descr_get */
	0,  		                        /* tp_descr_set */
	0,					/* tp_dictoffset */
	0,					/* tp_init */
	0,					/* tp_alloc */
	0,					/* tp_new */
	0,               			/* tp_free */
        0,                                      /* tp_is_gc */
        0,                                      /* tp_bases */
        0,                                      /* tp_mro */
        0,                                      /* tp_cache */
        0,                                      /* tp_subclasses */
        0,                                      /* tp_weaklist */
        0                                       /* tp_del */
};



static int
_wrap_PyNs3NdnName__tp_init__0(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Name();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnName__tp_init__1(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnName *other;
    const char *keywords[] = {"other", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &other)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Name(*((PyNs3NdnName *) other)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnName__tp_init__2(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *url;
    Py_ssize_t url_len;
    std::string url_std;
    const char *keywords[] = {"url", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &url, &url_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    url_std = std::string(url, url_len);
    self->obj = new ns3::ndn::Name(url_std);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnName__tp_init(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnName__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnName__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnName__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnName_appendVersion(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t version = ns3::ndn::Name::nversion;
    const char *keywords[] = {"version", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|K", (char **) keywords, &version)) {
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->appendVersion(version);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_compare(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int retval;
    PyNs3NdnName *name;
    const char *keywords[] = {"name", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &name)) {
        return NULL;
    }
    retval = self->obj->compare(*((PyNs3NdnName *) name)->obj);
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_appendNumberWithMarker(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t number;
    int marker;
    const char *keywords[] = {"number", "marker", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "Ki", (char **) keywords, &number, &marker)) {
        return NULL;
    }
    if (marker > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->appendNumberWithMarker(number, marker);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_getSubName(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned PY_LONG_LONG pos = 0;
    unsigned PY_LONG_LONG len = ns3::ndn::Name::npos;
    const char *keywords[] = {"pos", "len", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|KK", (char **) keywords, &pos, &len)) {
        return NULL;
    }
    ns3::ndn::Name retval = self->obj->getSubName(pos, len);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnName_get__0(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    PyNs3NdnNameComponent *py_Component;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::ndn::name::Component const & retval = self->obj->get(index);
    py_Component = PyObject_New(PyNs3NdnNameComponent, &PyNs3NdnNameComponent_Type);
    py_Component->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Component->obj = new ns3::ndn::name::Component(retval);
    PyNs3NdnBlob_wrapper_registry[(void *) py_Component->obj] = (PyObject *) py_Component;
    py_retval = Py_BuildValue((char *) "N", py_Component);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnName_get__1(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    int index;
    const char *keywords[] = {"index", NULL};
    PyNs3NdnNameComponent *py_Component;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &index)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::ndn::name::Component & retval = self->obj->get(index);
    py_Component = PyObject_New(PyNs3NdnNameComponent, &PyNs3NdnNameComponent_Type);
    py_Component->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Component->obj = new ns3::ndn::name::Component(retval);
    PyNs3NdnBlob_wrapper_registry[(void *) py_Component->obj] = (PyObject *) py_Component;
    py_retval = Py_BuildValue((char *) "N", py_Component);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnName_get(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnName_get__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnName_get__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnName_appendControlNum(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t control;
    const char *keywords[] = {"control", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &control)) {
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->appendControlNum(control);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_appendSeqNum(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t seqno;
    const char *keywords[] = {"seqno", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &seqno)) {
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->appendSeqNum(seqno);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_toUri(PyNs3NdnName *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->toUri();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_appendNumber(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t number;
    const char *keywords[] = {"number", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &number)) {
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->appendNumber(number);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_getPrefix(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned PY_LONG_LONG len;
    unsigned PY_LONG_LONG skip = 0;
    const char *keywords[] = {"len", "skip", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K|K", (char **) keywords, &len, &skip)) {
        return NULL;
    }
    ns3::ndn::Name retval = self->obj->getPrefix(len, skip);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_appendBlkId(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    uint64_t blkid;
    const char *keywords[] = {"blkid", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K", (char **) keywords, &blkid)) {
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->appendBlkId(blkid);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_appendBySwap(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnNameComponent *comp;
    const char *keywords[] = {"comp", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &comp)) {
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->appendBySwap(*((PyNs3NdnNameComponent *) comp)->obj);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnName_getPostfix(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    unsigned PY_LONG_LONG len;
    unsigned PY_LONG_LONG skip = 0;
    const char *keywords[] = {"len", "skip", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "K|K", (char **) keywords, &len, &skip)) {
        return NULL;
    }
    ns3::ndn::Name retval = self->obj->getPostfix(len, skip);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnName_append__0(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnNameComponent *comp;
    const char *keywords[] = {"comp", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameComponent_Type, &comp)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->append(*((PyNs3NdnNameComponent *) comp)->obj);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnName_append__1(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NdnName *comp;
    const char *keywords[] = {"comp", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &comp)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    ns3::ndn::Name & retval = self->obj->append(*((PyNs3NdnName *) comp)->obj);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnName_append__2(PyNs3NdnName *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *compStr;
    Py_ssize_t compStr_len;
    std::string compStr_std;
    const char *keywords[] = {"compStr", NULL};
    PyNs3NdnName *py_Name;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &compStr, &compStr_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    compStr_std = std::string(compStr, compStr_len);
    ns3::ndn::Name & retval = self->obj->append(compStr_std);
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnName_append(PyNs3NdnName *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnName_append__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnName_append__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnName_append__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnName_size(PyNs3NdnName *self)
{
    PyObject *py_retval;
    size_t retval;
    
    retval = self->obj->size();
    py_retval = Py_BuildValue((char *) "K", ((unsigned PY_LONG_LONG) retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnName__copy__(PyNs3NdnName *self)
{

    PyNs3NdnName *py_copy;
    py_copy = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_copy->obj = new ns3::ndn::Name(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnName_methods[] = {
    {(char *) "appendVersion", (PyCFunction) _wrap_PyNs3NdnName_appendVersion, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "compare", (PyCFunction) _wrap_PyNs3NdnName_compare, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "appendNumberWithMarker", (PyCFunction) _wrap_PyNs3NdnName_appendNumberWithMarker, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "getSubName", (PyCFunction) _wrap_PyNs3NdnName_getSubName, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "get", (PyCFunction) _wrap_PyNs3NdnName_get, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "appendControlNum", (PyCFunction) _wrap_PyNs3NdnName_appendControlNum, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "appendSeqNum", (PyCFunction) _wrap_PyNs3NdnName_appendSeqNum, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "toUri", (PyCFunction) _wrap_PyNs3NdnName_toUri, METH_NOARGS, NULL },
    {(char *) "appendNumber", (PyCFunction) _wrap_PyNs3NdnName_appendNumber, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "getPrefix", (PyCFunction) _wrap_PyNs3NdnName_getPrefix, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "appendBlkId", (PyCFunction) _wrap_PyNs3NdnName_appendBlkId, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "appendBySwap", (PyCFunction) _wrap_PyNs3NdnName_appendBySwap, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "getPostfix", (PyCFunction) _wrap_PyNs3NdnName_getPostfix, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "append", (PyCFunction) _wrap_PyNs3NdnName_append, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "size", (PyCFunction) _wrap_PyNs3NdnName_size, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnName__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnName__tp_dealloc(PyNs3NdnName *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::Name *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnName__tp_str(PyNs3NdnName *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnName__tp_richcompare (PyNs3NdnName *PYBINDGEN_UNUSED(self), PyNs3NdnName *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnName_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        if (*self->obj < *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_LE:
        if (*self->obj <= *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_EQ:
        if (*self->obj == *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_NE:
        if (*self->obj != *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GE:
        if (*self->obj >= *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    case Py_GT:
        if (*self->obj > *other->obj) {
            Py_INCREF(Py_True);
            return Py_True;
        } else {
            Py_INCREF(Py_False);
            return Py_False;
        }
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


PyObject* _wrap_convert_c2py__ns3__ndn__Name(ns3::ndn::Name *cvalue)
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(*cvalue);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


int _wrap_convert_py2c__ns3__ndn__Name(PyObject *value, ns3::ndn::Name *address)
{
    PyObject *py_retval;
    PyNs3NdnName *tmp_Name;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnName_Type, &tmp_Name)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Name->obj;
    Py_DECREF(py_retval);
    return 1;
}

static PyObject*
Ns3NdnName__nb_add (PyObject *py_left, PyObject *py_right)
{
    {
        ns3::ndn::Name left;
        ns3::ndn::Name right;
        if (_wrap_convert_py2c__ns3__ndn__Name(py_left, &left) && _wrap_convert_py2c__ns3__ndn__Name(py_right, &right)) {
            ns3::ndn::Name result = (left + right);
            return _wrap_convert_c2py__ns3__ndn__Name(&result);
        }
        PyErr_Clear();
    }
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}
static PyNumberMethods Ns3NdnName__py_number_methods = {
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) Ns3NdnName__nb_add,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (ternaryfunc) NULL,
    (unaryfunc) NULL,
    (unaryfunc) NULL,
    (unaryfunc) NULL,
    (inquiry) NULL,
    (unaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (coercion) NULL,
    (unaryfunc) NULL,
    (unaryfunc) NULL,
    (unaryfunc) NULL,
    (unaryfunc) NULL,
    (unaryfunc) NULL,
    /* Added in release 2.0 */
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (ternaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,

    /* Added in release 2.2 */
    /* The following require the Py_TPFLAGS_HAVE_CLASS flag */
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,
    (binaryfunc) NULL,

#if PY_VERSION_HEX >= 0x020500F0
    /* Added in release 2.5 */
    (unaryfunc) NULL,

#endif
#else /* Python 3 changed this structure a lot */
(binaryfunc) Ns3NdnName__nb_add,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(ternaryfunc) NULL,
(unaryfunc) NULL,
(unaryfunc) NULL,
(unaryfunc) NULL,
(inquiry) NULL,
(unaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(unaryfunc) NULL,
NULL,
(unaryfunc) NULL,

(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(ternaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,

(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,
(binaryfunc) NULL,

(unaryfunc) NULL,
#endif
};

PyTypeObject PyNs3NdnName_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Name",            /* tp_name */
    sizeof(PyNs3NdnName),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnName__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)&Ns3NdnName__py_number_methods,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnName__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnName__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnName_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnName__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnNameChecker__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'NameChecker' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}

static PyMethodDef PyNs3NdnNameChecker_methods[] = {
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnNameChecker__tp_dealloc(PyNs3NdnNameChecker *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::NameChecker *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnNameChecker__tp_richcompare (PyNs3NdnNameChecker *PYBINDGEN_UNUSED(self), PyNs3NdnNameChecker *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnNameChecker_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnNameChecker_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.NameChecker",            /* tp_name */
    sizeof(PyNs3NdnNameChecker),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnNameChecker__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnNameChecker__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnNameChecker_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnNameChecker__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};





static int
_wrap_PyNs3NdnNameValue__tp_init__0(PyNs3NdnNameValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::NameValue();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnNameValue__tp_init__1(PyNs3NdnNameValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnNameValue *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnNameValue_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::NameValue(*((PyNs3NdnNameValue *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnNameValue__tp_init__2(PyNs3NdnNameValue *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnName *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &value)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::NameValue(*((PyNs3NdnName *) value)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnNameValue__tp_init(PyNs3NdnNameValue *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnNameValue__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnNameValue__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnNameValue__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnNameValue_Set(PyNs3NdnNameValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnName *value;
    const char *keywords[] = {"value", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &value)) {
        return NULL;
    }
    self->obj->Set(*((PyNs3NdnName *) value)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameValue_Get(PyNs3NdnNameValue *self)
{
    PyObject *py_retval;
    PyNs3NdnName *py_Name;
    
    ns3::ndn::Name retval = self->obj->Get();
    py_Name = PyObject_New(PyNs3NdnName, &PyNs3NdnName_Type);
    
    py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Name->obj = new ns3::ndn::Name(retval);
    PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameValue_Copy(PyNs3NdnNameValue *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::AttributeValue > retval;
    PyNs3AttributeValue *py_AttributeValue;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_AttributeValue = NULL;
    } else {
        py_AttributeValue = (PyNs3AttributeValue *) wrapper_lookup_iter->second;
        Py_INCREF(py_AttributeValue);
    }
    
    if (py_AttributeValue == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval)))), &PyNs3AttributeValue_Type);
        py_AttributeValue = PyObject_New(PyNs3AttributeValue, wrapper_type);
    
        py_AttributeValue->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval))->Ref();
        py_AttributeValue->obj = const_cast<ns3::AttributeValue *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_AttributeValue->obj] = (PyObject *) py_AttributeValue;
    }
    py_retval = Py_BuildValue((char *) "N", py_AttributeValue);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameValue_SerializeToString(PyNs3NdnNameValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->SerializeToString(ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNameValue_DeserializeFromString(PyNs3NdnNameValue *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    const char *value;
    Py_ssize_t value_len;
    PyNs3AttributeChecker *checker;
    ns3::AttributeChecker *checker_ptr;
    const char *keywords[] = {"value", "checker", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#O!", (char **) keywords, &value, &value_len, &PyNs3AttributeChecker_Type, &checker)) {
        return NULL;
    }
    checker_ptr = (checker ? checker->obj : NULL);
    retval = self->obj->DeserializeFromString(std::string(value, value_len), ns3::Ptr< ns3::AttributeChecker  > (checker_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnNameValue__copy__(PyNs3NdnNameValue *self)
{

    PyNs3NdnNameValue *py_copy;
    py_copy = PyObject_New(PyNs3NdnNameValue, &PyNs3NdnNameValue_Type);
    
    py_copy->obj = new ns3::ndn::NameValue(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnNameValue_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3NdnNameValue_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3NdnNameValue_Get, METH_NOARGS, NULL },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3NdnNameValue_Copy, METH_NOARGS, NULL },
    {(char *) "SerializeToString", (PyCFunction) _wrap_PyNs3NdnNameValue_SerializeToString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DeserializeFromString", (PyCFunction) _wrap_PyNs3NdnNameValue_DeserializeFromString, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnNameValue__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnNameValue__tp_dealloc(PyNs3NdnNameValue *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::NameValue *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnNameValue__tp_richcompare (PyNs3NdnNameValue *PYBINDGEN_UNUSED(self), PyNs3NdnNameValue *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnNameValue_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnNameValue_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.NameValue",            /* tp_name */
    sizeof(PyNs3NdnNameValue),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnNameValue__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnNameValue__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnNameValue_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnNameValue__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnNetDeviceFace__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnNetDeviceFace *self)
{
    PyObject *py_retval;
    PyNs3NdnNetDeviceFace__PythonHelper *helper = dynamic_cast< PyNs3NdnNetDeviceFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnNetDeviceFace__PythonHelper::_wrap_Receive(PyNs3NdnNetDeviceFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3NdnNetDeviceFace__PythonHelper *helper = dynamic_cast< PyNs3NdnNetDeviceFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Receive of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Receive__parent_caller(ns3::Ptr< ns3::Packet  > (p_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnNetDeviceFace__PythonHelper::_wrap_DoInitialize(PyNs3NdnNetDeviceFace *self)
{
    PyObject *py_retval;
    PyNs3NdnNetDeviceFace__PythonHelper *helper = dynamic_cast< PyNs3NdnNetDeviceFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnNetDeviceFace__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnNetDeviceFace *self)
{
    PyObject *py_retval;
    PyNs3NdnNetDeviceFace__PythonHelper *helper = dynamic_cast< PyNs3NdnNetDeviceFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnNetDeviceFace__PythonHelper::_wrap_Send(PyNs3NdnNetDeviceFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3NdnNetDeviceFace__PythonHelper *helper = dynamic_cast< PyNs3NdnNetDeviceFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Send of class NetDeviceFace is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Send__parent_caller(ns3::Ptr< ns3::Packet  > (p_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnNetDeviceFace__PythonHelper::_wrap_DoDispose(PyNs3NdnNetDeviceFace *self)
{
    PyObject *py_retval;
    PyNs3NdnNetDeviceFace__PythonHelper *helper = dynamic_cast< PyNs3NdnNetDeviceFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3NdnNetDeviceFace__PythonHelper::UnRegisterProtocolHandlers()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::NetDeviceFace *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "UnRegisterProtocolHandlers"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::NetDeviceFace::UnRegisterProtocolHandlers();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = (ns3::ndn::NetDeviceFace*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "UnRegisterProtocolHandlers", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnNetDeviceFace__PythonHelper::Send(ns3::Ptr< ns3::Packet > p)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::NetDeviceFace *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::NetDeviceFace::Send(p);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = (ns3::ndn::NetDeviceFace*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (p)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (p))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (p))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (p));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::NetDeviceFace::Send(p);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::NetDeviceFace::Send(p);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnNetDeviceFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnNetDeviceFace__PythonHelper::SendData(ns3::Ptr< ns3::ndn::Data const > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnNetDeviceFace__PythonHelper::ReceiveData(ns3::Ptr< ns3::ndn::Data > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnNetDeviceFace__PythonHelper::SetMetric(uint16_t metric)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Face::SetMetric(metric);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMetric", (char *) "i", (int) metric);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnNetDeviceFace__PythonHelper::ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3NdnNetDeviceFace__PythonHelper::GetMetric() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = const_cast< ns3::ndn::Face* >((const ns3::ndn::Face*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMetric", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnNetDeviceFace__PythonHelper::SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::SendInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnNetDeviceFace__PythonHelper::Receive(ns3::Ptr< ns3::Packet const > p)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (p)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (p))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (p))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (p));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NdnNetDeviceFace__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnNetDeviceFace__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnNetDeviceFace__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnNetDeviceFace__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnNetDeviceFace__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3NdnNetDeviceFace__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'NetDeviceFace' cannot be constructed ()");
    return -1;
}


PyObject *
_wrap_PyNs3NdnNetDeviceFace_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::NetDeviceFace::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNetDeviceFace_GetNetDevice(PyNs3NdnNetDeviceFace *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::NetDevice > retval;
    PyNs3NetDevice *py_NetDevice;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->GetNetDevice();
    if (!(const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_NetDevice = NULL;
    } else {
        py_NetDevice = (PyNs3NetDevice *) wrapper_lookup_iter->second;
        Py_INCREF(py_NetDevice);
    }
    
    if (py_NetDevice == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval)))), &PyNs3NetDevice_Type);
        py_NetDevice = PyObject_GC_New(PyNs3NetDevice, wrapper_type);
        py_NetDevice->inst_dict = NULL;
    
        py_NetDevice->inst_dict = NULL;
        py_NetDevice->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval))->Ref();
        py_NetDevice->obj = const_cast<ns3::NetDevice *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_NetDevice->obj] = (PyObject *) py_NetDevice;
    }
    py_retval = Py_BuildValue((char *) "N", py_NetDevice);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnNetDeviceFace_UnRegisterProtocolHandlers(PyNs3NdnNetDeviceFace *self)
{
    PyObject *py_retval;
    PyNs3NdnNetDeviceFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnNetDeviceFace__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->UnRegisterProtocolHandlers()) : (self->obj->ns3::ndn::NetDeviceFace::UnRegisterProtocolHandlers());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3NdnNetDeviceFace_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnNetDeviceFace_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetNetDevice", (PyCFunction) _wrap_PyNs3NdnNetDeviceFace_GetNetDevice, METH_NOARGS, NULL },
    {(char *) "UnRegisterProtocolHandlers", (PyCFunction) _wrap_PyNs3NdnNetDeviceFace_UnRegisterProtocolHandlers, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnNetDeviceFace__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "Receive", (PyCFunction) PyNs3NdnNetDeviceFace__PythonHelper::_wrap_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnNetDeviceFace__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnNetDeviceFace__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "Send", (PyCFunction) PyNs3NdnNetDeviceFace__PythonHelper::_wrap_Send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnNetDeviceFace__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnNetDeviceFace__tp_clear(PyNs3NdnNetDeviceFace *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::NetDeviceFace *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnNetDeviceFace__tp_traverse(PyNs3NdnNetDeviceFace *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnNetDeviceFace__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnNetDeviceFace__tp_dealloc(PyNs3NdnNetDeviceFace *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnNetDeviceFace__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnNetDeviceFace__tp_richcompare (PyNs3NdnNetDeviceFace *PYBINDGEN_UNUSED(self), PyNs3NdnNetDeviceFace *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnNetDeviceFace_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnNetDeviceFace_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.NetDeviceFace",            /* tp_name */
    sizeof(PyNs3NdnNetDeviceFace),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnNetDeviceFace__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnNetDeviceFace__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnNetDeviceFace__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnNetDeviceFace__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnNetDeviceFace_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnNetDeviceFace, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnNetDeviceFace__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnPit__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'Pit' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3NdnPit_Begin(PyNs3NdnPit *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::pit::Entry > retval;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Begin();
    if (!(const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_End(PyNs3NdnPit *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::pit::Entry > retval;
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->End();
    if (!(const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_GetPit(PyNs3NdnPit *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Pit > retval;
    PyNs3Object *node;
    ns3::Object *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3NdnPit *py_Pit;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Object_Type, &node)) {
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    retval = ns3::ndn::Pit::GetPit(ns3::Ptr< ns3::Object  > (node_ptr));
    if (!(const_cast<ns3::ndn::Pit *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Pit *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
        py_Pit = NULL;
    } else {
        py_Pit = (PyNs3NdnPit *) wrapper_lookup_iter->second;
        Py_INCREF(py_Pit);
    }
    
    if (py_Pit == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Pit *> (ns3::PeekPointer (retval)))), &PyNs3NdnPit_Type);
        py_Pit = PyObject_GC_New(PyNs3NdnPit, wrapper_type);
        py_Pit->inst_dict = NULL;
    
        py_Pit->inst_dict = NULL;
        py_Pit->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Pit *> (ns3::PeekPointer (retval))->Ref();
        py_Pit->obj = const_cast<ns3::ndn::Pit *> (ns3::PeekPointer (retval));
        PyNs3ObjectBase_wrapper_registry[(void *) py_Pit->obj] = (PyObject *) py_Pit;
    }
    py_retval = Py_BuildValue((char *) "N", py_Pit);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_MarkErased(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnPitEntry *entry;
    ns3::ndn::pit::Entry *entry_ptr;
    const char *keywords[] = {"entry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitEntry_Type, &entry)) {
        return NULL;
    }
    entry_ptr = (entry ? entry->obj : NULL);
    self->obj->MarkErased(ns3::Ptr< ns3::ndn::pit::Entry  > (entry_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_SetMaxPitEntryLifetime(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *maxLifetime;
    const char *keywords[] = {"maxLifetime", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &maxLifetime)) {
        return NULL;
    }
    self->obj->SetMaxPitEntryLifetime(*((PyNs3Time *) maxLifetime)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_Create(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::pit::Entry > retval;
    PyNs3NdnInterest *header;
    ns3::ndn::Interest *header_ptr;
    const char *keywords[] = {"header", NULL};
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &header)) {
        return NULL;
    }
    header_ptr = (header ? header->obj : NULL);
    retval = self->obj->Create(ns3::Ptr< ns3::ndn::Interest  > (header_ptr));
    if (!(const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_Next(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::pit::Entry > retval;
    PyNs3NdnPitEntry *arg0;
    ns3::ndn::pit::Entry *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnPitEntry_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    retval = self->obj->Next(ns3::Ptr< ns3::ndn::pit::Entry  > (arg0_ptr));
    if (!(const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_GetSize(PyNs3NdnPit *self)
{
    PyObject *py_retval;
    uint32_t retval;
    
    retval = self->obj->GetSize();
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::Pit::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnPit_GetMaxPitEntryLifetime(PyNs3NdnPit *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time const & retval = self->obj->GetMaxPitEntryLifetime();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnPit_Lookup__0(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::pit::Entry > retval;
    PyNs3NdnData *header;
    const char *keywords[] = {"header", NULL};
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &header)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Lookup(*((PyNs3NdnData *) header)->obj);
    if (!(const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnPit_Lookup__1(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::pit::Entry > retval;
    PyNs3NdnInterest *header;
    const char *keywords[] = {"header", NULL};
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &header)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Lookup(*((PyNs3NdnInterest *) header)->obj);
    if (!(const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnPit_Lookup(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnPit_Lookup__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnPit_Lookup__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnPit_Find(PyNs3NdnPit *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::pit::Entry > retval;
    PyNs3NdnName *prefix;
    const char *keywords[] = {"prefix", NULL};
    PyNs3NdnPitEntry *py_Entry;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &prefix)) {
        return NULL;
    }
    retval = self->obj->Find(*((PyNs3NdnName *) prefix)->obj);
    if (!(const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Entry = NULL;
    } else {
        py_Entry = (PyNs3NdnPitEntry *) wrapper_lookup_iter->second;
        Py_INCREF(py_Entry);
    }
    
    if (py_Entry == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval)))), &PyNs3NdnPitEntry_Type);
        py_Entry = PyObject_New(PyNs3NdnPitEntry, wrapper_type);
    
        py_Entry->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval))->Ref();
        py_Entry->obj = const_cast<ns3::ndn::pit::Entry *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Entry->obj] = (PyObject *) py_Entry;
    }
    py_retval = Py_BuildValue((char *) "N", py_Entry);
    return py_retval;
}

static PyMethodDef PyNs3NdnPit_methods[] = {
    {(char *) "Begin", (PyCFunction) _wrap_PyNs3NdnPit_Begin, METH_NOARGS, NULL },
    {(char *) "End", (PyCFunction) _wrap_PyNs3NdnPit_End, METH_NOARGS, NULL },
    {(char *) "GetPit", (PyCFunction) _wrap_PyNs3NdnPit_GetPit, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "MarkErased", (PyCFunction) _wrap_PyNs3NdnPit_MarkErased, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMaxPitEntryLifetime", (PyCFunction) _wrap_PyNs3NdnPit_SetMaxPitEntryLifetime, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Create", (PyCFunction) _wrap_PyNs3NdnPit_Create, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Next", (PyCFunction) _wrap_PyNs3NdnPit_Next, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetSize", (PyCFunction) _wrap_PyNs3NdnPit_GetSize, METH_NOARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnPit_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "GetMaxPitEntryLifetime", (PyCFunction) _wrap_PyNs3NdnPit_GetMaxPitEntryLifetime, METH_NOARGS, NULL },
    {(char *) "Lookup", (PyCFunction) _wrap_PyNs3NdnPit_Lookup, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Find", (PyCFunction) _wrap_PyNs3NdnPit_Find, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnPit__tp_clear(PyNs3NdnPit *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::Pit *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnPit__tp_traverse(PyNs3NdnPit *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    return 0;
}


static void
_wrap_PyNs3NdnPit__tp_dealloc(PyNs3NdnPit *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnPit__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3NdnPit__tp_str(PyNs3NdnPit *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3NdnPit__tp_richcompare (PyNs3NdnPit *PYBINDGEN_UNUSED(self), PyNs3NdnPit *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnPit_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnPit_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Pit",            /* tp_name */
    sizeof(PyNs3NdnPit),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnPit__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3NdnPit__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnPit__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnPit__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnPit__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnPit_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnPit, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnPit__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnRttEstimator__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper = dynamic_cast< PyNs3NdnRttEstimator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnRttEstimator__PythonHelper::_wrap_DoInitialize(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper = dynamic_cast< PyNs3NdnRttEstimator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnRttEstimator__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper = dynamic_cast< PyNs3NdnRttEstimator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnRttEstimator__PythonHelper::_wrap_DoDispose(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper = dynamic_cast< PyNs3NdnRttEstimator__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

ns3::Time
PyNs3NdnRttEstimator__PythonHelper::AckSeq(ns3::SequenceNumber32 ackSeq)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    PyNs3SequenceNumber32 *py_SequenceNumber32;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "AckSeq"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::RttEstimator::AckSeq(ackSeq);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_SequenceNumber32 = PyObject_New(PyNs3SequenceNumber32, &PyNs3SequenceNumber32_Type);
    py_SequenceNumber32->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SequenceNumber32->obj = new ns3::SequenceNumber32(ackSeq);
    PyNs3SequenceNumber32_wrapper_registry[(void *) py_SequenceNumber32->obj] = (PyObject *) py_SequenceNumber32;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "AckSeq", (char *) "N", py_SequenceNumber32);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::RttEstimator::AckSeq(ackSeq);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::RttEstimator::AckSeq(ackSeq);
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnRttEstimator__PythonHelper::ClearSent()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ClearSent"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::RttEstimator::ClearSent();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ClearSent", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Ptr< ns3::ndn::RttEstimator >
PyNs3NdnRttEstimator__PythonHelper::Copy() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::RttEstimator > retval;
    PyNs3NdnRttEstimator *tmp_RttEstimator;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Copy"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = const_cast< ns3::ndn::RttEstimator* >((const ns3::ndn::RttEstimator*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Copy", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnRttEstimator_Type, &tmp_RttEstimator)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
    
        PyErr_Print();
        Py_FatalError("Error detected, but parent virtual is pure virtual or private virtual, "
                      "and return is a class without trival constructor");
    }
    // dangerous!
    retval = ns3::Ptr< ns3::ndn::RttEstimator  > (tmp_RttEstimator->obj);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NdnRttEstimator__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::RttEstimator::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = const_cast< ns3::ndn::RttEstimator* >((const ns3::ndn::RttEstimator*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::RttEstimator::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::RttEstimator::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnRttEstimator__PythonHelper::IncreaseMultiplier()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "IncreaseMultiplier"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::RttEstimator::IncreaseMultiplier();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "IncreaseMultiplier", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnRttEstimator__PythonHelper::Measurement(ns3::Time t)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Measurement"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(t);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Measurement", (char *) "N", py_Time);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnRttEstimator__PythonHelper::Reset()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Reset"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::RttEstimator::Reset();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Reset", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnRttEstimator__PythonHelper::ResetMultiplier()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ResetMultiplier"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::RttEstimator::ResetMultiplier();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ResetMultiplier", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::Time
PyNs3NdnRttEstimator__PythonHelper::RetransmitTimeout()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "RetransmitTimeout"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Time();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "RetransmitTimeout", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Time();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Time();
    }
    ns3::Time retval = *tmp_Time->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnRttEstimator__PythonHelper::SentSeq(ns3::SequenceNumber32 seq, uint32_t size)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::RttEstimator *self_obj_before;
    PyObject *py_retval;
    PyNs3SequenceNumber32 *py_SequenceNumber32;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SentSeq"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::RttEstimator::SentSeq(seq, size);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = (ns3::ndn::RttEstimator*) this;
    py_SequenceNumber32 = PyObject_New(PyNs3SequenceNumber32, &PyNs3SequenceNumber32_Type);
    py_SequenceNumber32->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SequenceNumber32->obj = new ns3::SequenceNumber32(seq);
    PyNs3SequenceNumber32_wrapper_registry[(void *) py_SequenceNumber32->obj] = (PyObject *) py_SequenceNumber32;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SentSeq", (char *) "NN", py_SequenceNumber32, PyLong_FromUnsignedLong(size));
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnRttEstimator* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnRttEstimator__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnRttEstimator__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnRttEstimator__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnRttEstimator__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3NdnRttEstimator__tp_init__0(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnRttEstimator_Type)
    {
        self->obj = new PyNs3NdnRttEstimator__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnRttEstimator__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'RttEstimator' cannot be constructed");
        return -1;
    }
    return 0;
}

static int
_wrap_PyNs3NdnRttEstimator__tp_init__1(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnRttEstimator *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnRttEstimator_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3NdnRttEstimator_Type)
    {
        self->obj = new PyNs3NdnRttEstimator__PythonHelper(*((PyNs3NdnRttEstimator *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnRttEstimator__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        PyErr_SetString(PyExc_TypeError, "class 'RttEstimator' cannot be constructed");
        return -1;
    }
    return 0;
}

int _wrap_PyNs3NdnRttEstimator__tp_init(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnRttEstimator__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnRttEstimator__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_Reset(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper_class = dynamic_cast<PyNs3NdnRttEstimator__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Reset()) : (self->obj->ns3::ndn::RttEstimator::Reset());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_SentSeq(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SequenceNumber32 *seq;
    unsigned int size;
    PyNs3NdnRttEstimator__PythonHelper *helper_class = dynamic_cast<PyNs3NdnRttEstimator__PythonHelper*> (self->obj);
    const char *keywords[] = {"seq", "size", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!I", (char **) keywords, &PyNs3SequenceNumber32_Type, &seq, &size)) {
        return NULL;
    }
    (helper_class == NULL)? (self->obj->SentSeq(*((PyNs3SequenceNumber32 *) seq)->obj, size)) : (self->obj->ns3::ndn::RttEstimator::SentSeq(*((PyNs3SequenceNumber32 *) seq)->obj, size));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_GetMaxRto(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMaxRto();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_ClearSent(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper_class = dynamic_cast<PyNs3NdnRttEstimator__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->ClearSent()) : (self->obj->ns3::ndn::RttEstimator::ClearSent());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_SetMaxRto(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *maxRto;
    const char *keywords[] = {"maxRto", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &maxRto)) {
        return NULL;
    }
    self->obj->SetMaxRto(*((PyNs3Time *) maxRto)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::RttEstimator::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_IncreaseMultiplier(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper_class = dynamic_cast<PyNs3NdnRttEstimator__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->IncreaseMultiplier()) : (self->obj->ns3::ndn::RttEstimator::IncreaseMultiplier());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_SetMinRto(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *minRto;
    const char *keywords[] = {"minRto", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &minRto)) {
        return NULL;
    }
    self->obj->SetMinRto(*((PyNs3Time *) minRto)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_AckSeq(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3SequenceNumber32 *ackSeq;
    PyNs3NdnRttEstimator__PythonHelper *helper_class = dynamic_cast<PyNs3NdnRttEstimator__PythonHelper*> (self->obj);
    const char *keywords[] = {"ackSeq", NULL};
    PyNs3Time *py_Time;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SequenceNumber32_Type, &ackSeq)) {
        return NULL;
    }
    ns3::Time retval = (helper_class == NULL)? (self->obj->AckSeq(*((PyNs3SequenceNumber32 *) ackSeq)->obj)) : (self->obj->ns3::ndn::RttEstimator::AckSeq(*((PyNs3SequenceNumber32 *) ackSeq)->obj));
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_SetCurrentEstimate(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *estimate;
    const char *keywords[] = {"estimate", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &estimate)) {
        return NULL;
    }
    self->obj->SetCurrentEstimate(*((PyNs3Time *) estimate)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_GetMinRto(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetMinRto();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_RetransmitTimeout(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->RetransmitTimeout();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_ResetMultiplier(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper_class = dynamic_cast<PyNs3NdnRttEstimator__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->ResetMultiplier()) : (self->obj->ns3::ndn::RttEstimator::ResetMultiplier());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_GetCurrentEstimate(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    ns3::Time retval = self->obj->GetCurrentEstimate();
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(retval);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_Measurement(PyNs3NdnRttEstimator *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *t;
    const char *keywords[] = {"t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &t)) {
        return NULL;
    }
    self->obj->Measurement(*((PyNs3Time *) t)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_GetInstanceTypeId(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    PyNs3NdnRttEstimator__PythonHelper *helper_class = dynamic_cast<PyNs3NdnRttEstimator__PythonHelper*> (self->obj);
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = (helper_class == NULL)? (self->obj->GetInstanceTypeId()) : (self->obj->ns3::ndn::RttEstimator::GetInstanceTypeId());
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnRttEstimator_Copy(PyNs3NdnRttEstimator *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::RttEstimator > retval;
    PyNs3NdnRttEstimator *py_RttEstimator;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->Copy();
    if (!(const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval)))).name() == typeid(PyNs3NdnRttEstimator__PythonHelper).name())
    {
        py_RttEstimator = reinterpret_cast< PyNs3NdnRttEstimator* >(reinterpret_cast< PyNs3NdnRttEstimator__PythonHelper* >(const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval)))->m_pyself);
        py_RttEstimator->obj = const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval));
        Py_INCREF(py_RttEstimator);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval)));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_RttEstimator = NULL;
        } else {
            py_RttEstimator = (PyNs3NdnRttEstimator *) wrapper_lookup_iter->second;
            Py_INCREF(py_RttEstimator);
        }
    
        if (py_RttEstimator == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval)))), &PyNs3NdnRttEstimator_Type);
            py_RttEstimator = PyObject_GC_New(PyNs3NdnRttEstimator, wrapper_type);
            py_RttEstimator->inst_dict = NULL;
    
            py_RttEstimator->inst_dict = NULL;
            py_RttEstimator->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval))->Ref();
            py_RttEstimator->obj = const_cast<ns3::ndn::RttEstimator *> (ns3::PeekPointer (retval));
            PyNs3ObjectBase_wrapper_registry[(void *) py_RttEstimator->obj] = (PyObject *) py_RttEstimator;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_RttEstimator);
    return py_retval;
}

static PyMethodDef PyNs3NdnRttEstimator_methods[] = {
    {(char *) "Reset", (PyCFunction) _wrap_PyNs3NdnRttEstimator_Reset, METH_NOARGS, NULL },
    {(char *) "SentSeq", (PyCFunction) _wrap_PyNs3NdnRttEstimator_SentSeq, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMaxRto", (PyCFunction) _wrap_PyNs3NdnRttEstimator_GetMaxRto, METH_NOARGS, NULL },
    {(char *) "ClearSent", (PyCFunction) _wrap_PyNs3NdnRttEstimator_ClearSent, METH_NOARGS, NULL },
    {(char *) "SetMaxRto", (PyCFunction) _wrap_PyNs3NdnRttEstimator_SetMaxRto, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnRttEstimator_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "IncreaseMultiplier", (PyCFunction) _wrap_PyNs3NdnRttEstimator_IncreaseMultiplier, METH_NOARGS, NULL },
    {(char *) "SetMinRto", (PyCFunction) _wrap_PyNs3NdnRttEstimator_SetMinRto, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AckSeq", (PyCFunction) _wrap_PyNs3NdnRttEstimator_AckSeq, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetCurrentEstimate", (PyCFunction) _wrap_PyNs3NdnRttEstimator_SetCurrentEstimate, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetMinRto", (PyCFunction) _wrap_PyNs3NdnRttEstimator_GetMinRto, METH_NOARGS, NULL },
    {(char *) "RetransmitTimeout", (PyCFunction) _wrap_PyNs3NdnRttEstimator_RetransmitTimeout, METH_NOARGS, NULL },
    {(char *) "ResetMultiplier", (PyCFunction) _wrap_PyNs3NdnRttEstimator_ResetMultiplier, METH_NOARGS, NULL },
    {(char *) "GetCurrentEstimate", (PyCFunction) _wrap_PyNs3NdnRttEstimator_GetCurrentEstimate, METH_NOARGS, NULL },
    {(char *) "Measurement", (PyCFunction) _wrap_PyNs3NdnRttEstimator_Measurement, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetInstanceTypeId", (PyCFunction) _wrap_PyNs3NdnRttEstimator_GetInstanceTypeId, METH_NOARGS, NULL },
    {(char *) "Copy", (PyCFunction) _wrap_PyNs3NdnRttEstimator_Copy, METH_NOARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnRttEstimator__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnRttEstimator__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnRttEstimator__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnRttEstimator__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnRttEstimator__tp_clear(PyNs3NdnRttEstimator *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::RttEstimator *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnRttEstimator__tp_traverse(PyNs3NdnRttEstimator *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnRttEstimator__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnRttEstimator__tp_dealloc(PyNs3NdnRttEstimator *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnRttEstimator__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnRttEstimator__tp_richcompare (PyNs3NdnRttEstimator *PYBINDGEN_UNUSED(self), PyNs3NdnRttEstimator *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnRttEstimator_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnRttEstimator_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.RttEstimator",            /* tp_name */
    sizeof(PyNs3NdnRttEstimator),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnRttEstimator__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnRttEstimator__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnRttEstimator__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnRttEstimator__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnRttEstimator_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnRttEstimator, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnRttEstimator__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnRttHistory_wrapper_registry;
static PyObject* _wrap_PyNs3NdnRttHistory__get_count(PyNs3NdnRttHistory *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->count));
    return py_retval;
}
static int _wrap_PyNs3NdnRttHistory__set_count(PyNs3NdnRttHistory *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->count)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnRttHistory__get_retx(PyNs3NdnRttHistory *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(self->obj->retx));
    return py_retval;
}
static int _wrap_PyNs3NdnRttHistory__set_retx(PyNs3NdnRttHistory *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *py_boolretval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->retx = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnRttHistory__get_seq(PyNs3NdnRttHistory *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3SequenceNumber32 *py_SequenceNumber32;
    
    py_SequenceNumber32 = PyObject_New(PyNs3SequenceNumber32, &PyNs3SequenceNumber32_Type);
    py_SequenceNumber32->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_SequenceNumber32->obj = new ns3::SequenceNumber32(self->obj->seq);
    PyNs3SequenceNumber32_wrapper_registry[(void *) py_SequenceNumber32->obj] = (PyObject *) py_SequenceNumber32;
    py_retval = Py_BuildValue((char *) "N", py_SequenceNumber32);
    return py_retval;
}
static int _wrap_PyNs3NdnRttHistory__set_seq(PyNs3NdnRttHistory *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3SequenceNumber32 *tmp_SequenceNumber32;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3SequenceNumber32_Type, &tmp_SequenceNumber32)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->seq = *tmp_SequenceNumber32->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyNs3NdnRttHistory__get_time(PyNs3NdnRttHistory *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *py_Time;
    
    py_Time = PyObject_New(PyNs3Time, &PyNs3Time_Type);
    py_Time->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Time->obj = new ns3::Time(self->obj->time);
    PyNs3Time_wrapper_registry[(void *) py_Time->obj] = (PyObject *) py_Time;
    py_retval = Py_BuildValue((char *) "N", py_Time);
    return py_retval;
}
static int _wrap_PyNs3NdnRttHistory__set_time(PyNs3NdnRttHistory *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyNs3Time *tmp_Time;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3Time_Type, &tmp_Time)) {
        Py_DECREF(py_retval);
        return -1;
    }
    self->obj->time = *tmp_Time->obj;
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyNs3NdnRttHistory__getsets[] = {
    {
        (char*) "count", /* attribute name */
        (getter) _wrap_PyNs3NdnRttHistory__get_count, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnRttHistory__set_count, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "retx", /* attribute name */
        (getter) _wrap_PyNs3NdnRttHistory__get_retx, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnRttHistory__set_retx, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "seq", /* attribute name */
        (getter) _wrap_PyNs3NdnRttHistory__get_seq, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnRttHistory__set_seq, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "time", /* attribute name */
        (getter) _wrap_PyNs3NdnRttHistory__get_time, /* C function to get the attribute */
        (setter) _wrap_PyNs3NdnRttHistory__set_time, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyNs3NdnRttHistory__tp_init__0(PyNs3NdnRttHistory *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SequenceNumber32 *s;
    unsigned int c;
    PyNs3Time *t;
    const char *keywords[] = {"s", "c", "t", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!IO!", (char **) keywords, &PyNs3SequenceNumber32_Type, &s, &c, &PyNs3Time_Type, &t)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::RttHistory(*((PyNs3SequenceNumber32 *) s)->obj, c, *((PyNs3Time *) t)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnRttHistory__tp_init__1(PyNs3NdnRttHistory *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnRttHistory *h;
    const char *keywords[] = {"h", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnRttHistory_Type, &h)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::RttHistory(*((PyNs3NdnRttHistory *) h)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnRttHistory__tp_init(PyNs3NdnRttHistory *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnRttHistory__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnRttHistory__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnRttHistory__copy__(PyNs3NdnRttHistory *self)
{

    PyNs3NdnRttHistory *py_copy;
    py_copy = PyObject_New(PyNs3NdnRttHistory, &PyNs3NdnRttHistory_Type);
    py_copy->obj = new ns3::ndn::RttHistory(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnRttHistory_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnRttHistory_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnRttHistory__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnRttHistory__tp_dealloc(PyNs3NdnRttHistory *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnRttHistory_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnRttHistory_wrapper_registry.end()) {
        PyNs3NdnRttHistory_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::RttHistory *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnRttHistory__tp_richcompare (PyNs3NdnRttHistory *PYBINDGEN_UNUSED(self), PyNs3NdnRttHistory *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnRttHistory_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnRttHistory_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.RttHistory",            /* tp_name */
    sizeof(PyNs3NdnRttHistory),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnRttHistory__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnRttHistory__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnRttHistory_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyNs3NdnRttHistory__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnRttHistory__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnStackHelper_wrapper_registry;

static int
_wrap_PyNs3NdnStackHelper__tp_init(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        return -1;
    }
    self->obj = new ns3::ndn::StackHelper();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3NdnStackHelper_EnableLimits(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool enable;
    PyObject *py_enable = NULL;
    PyNs3Time *avgRtt = NULL;
    unsigned int avgData = 1100;
    unsigned int avgInterest = 40;
    const char *keywords[] = {"enable", "avgRtt", "avgData", "avgInterest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|OO!II", (char **) keywords, &py_enable, &PyNs3Time_Type, &avgRtt, &avgData, &avgInterest)) {
        return NULL;
    }
    enable = py_enable? (bool) PyObject_IsTrue(py_enable) : true;
    self->obj->EnableLimits(enable, (avgRtt ? (*((PyNs3Time *) avgRtt)->obj) : ns3::Seconds(0)), avgData, avgInterest);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnStackHelper_InstallAll(PyNs3NdnStackHelper *self)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::FaceContainer > retval;
    PyNs3NdnFaceContainer *py_FaceContainer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    retval = self->obj->InstallAll();
    if (!(const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_FaceContainer = NULL;
    } else {
        py_FaceContainer = (PyNs3NdnFaceContainer *) wrapper_lookup_iter->second;
        Py_INCREF(py_FaceContainer);
    }
    
    if (py_FaceContainer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))), &PyNs3NdnFaceContainer_Type);
        py_FaceContainer = PyObject_New(PyNs3NdnFaceContainer, wrapper_type);
    
        py_FaceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval))->Ref();
        py_FaceContainer->obj = const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_FaceContainer->obj] = (PyObject *) py_FaceContainer;
    }
    py_retval = Py_BuildValue((char *) "N", py_FaceContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnStackHelper_SetStackAttributes(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *attr1;
    Py_ssize_t attr1_len;
    std::string attr1_std;
    const char *value1;
    Py_ssize_t value1_len;
    std::string value1_std;
    const char *attr2;
    Py_ssize_t attr2_len;
    std::string attr2_std;
    const char *value2;
    Py_ssize_t value2_len;
    std::string value2_std;
    const char *attr3;
    Py_ssize_t attr3_len;
    std::string attr3_std;
    const char *value3;
    Py_ssize_t value3_len;
    std::string value3_std;
    const char *attr4;
    Py_ssize_t attr4_len;
    std::string attr4_std;
    const char *value4;
    Py_ssize_t value4_len;
    std::string value4_std;
    const char *keywords[] = {"attr1", "value1", "attr2", "value2", "attr3", "value3", "attr4", "value4", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#s#s#", (char **) keywords, &attr1, &attr1_len, &value1, &value1_len, &attr2, &attr2_len, &value2, &value2_len, &attr3, &attr3_len, &value3, &value3_len, &attr4, &attr4_len, &value4, &value4_len)) {
        return NULL;
    }
    attr1_std = std::string(attr1, attr1_len);
    value1_std = std::string(value1, value1_len);
    attr2_std = std::string(attr2, attr2_len);
    value2_std = std::string(value2, value2_len);
    attr3_std = std::string(attr3, attr3_len);
    value3_std = std::string(value3, value3_len);
    attr4_std = std::string(attr4, attr4_len);
    value4_std = std::string(value4, value4_len);
    self->obj->SetStackAttributes(attr1_std, value1_std, attr2_std, value2_std, attr3_std, value3_std, attr4_std, value4_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnStackHelper_SetContentStore(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *contentStoreClass;
    Py_ssize_t contentStoreClass_len;
    std::string contentStoreClass_std;
    const char *attr1;
    Py_ssize_t attr1_len;
    std::string attr1_std;
    const char *value1;
    Py_ssize_t value1_len;
    std::string value1_std;
    const char *attr2;
    Py_ssize_t attr2_len;
    std::string attr2_std;
    const char *value2;
    Py_ssize_t value2_len;
    std::string value2_std;
    const char *attr3;
    Py_ssize_t attr3_len;
    std::string attr3_std;
    const char *value3;
    Py_ssize_t value3_len;
    std::string value3_std;
    const char *attr4;
    Py_ssize_t attr4_len;
    std::string attr4_std;
    const char *value4;
    Py_ssize_t value4_len;
    std::string value4_std;
    const char *keywords[] = {"contentStoreClass", "attr1", "value1", "attr2", "value2", "attr3", "value3", "attr4", "value4", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#s#s#s#", (char **) keywords, &contentStoreClass, &contentStoreClass_len, &attr1, &attr1_len, &value1, &value1_len, &attr2, &attr2_len, &value2, &value2_len, &attr3, &attr3_len, &value3, &value3_len, &attr4, &attr4_len, &value4, &value4_len)) {
        return NULL;
    }
    contentStoreClass_std = std::string(contentStoreClass, contentStoreClass_len);
    attr1_std = std::string(attr1, attr1_len);
    value1_std = std::string(value1, value1_len);
    attr2_std = std::string(attr2, attr2_len);
    value2_std = std::string(value2, value2_len);
    attr3_std = std::string(attr3, attr3_len);
    value3_std = std::string(value3, value3_len);
    attr4_std = std::string(attr4, attr4_len);
    value4_std = std::string(value4, value4_len);
    self->obj->SetContentStore(contentStoreClass_std, attr1_std, value1_std, attr2_std, value2_std, attr3_std, value3_std, attr4_std, value4_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnStackHelper_Install__0(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::FaceContainer > retval;
    const char *nodeName;
    Py_ssize_t nodeName_len;
    std::string nodeName_std;
    const char *keywords[] = {"nodeName", NULL};
    PyNs3NdnFaceContainer *py_FaceContainer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &nodeName, &nodeName_len)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nodeName_std = std::string(nodeName, nodeName_len);
    retval = self->obj->Install(nodeName_std);
    if (!(const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_FaceContainer = NULL;
    } else {
        py_FaceContainer = (PyNs3NdnFaceContainer *) wrapper_lookup_iter->second;
        Py_INCREF(py_FaceContainer);
    }
    
    if (py_FaceContainer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))), &PyNs3NdnFaceContainer_Type);
        py_FaceContainer = PyObject_New(PyNs3NdnFaceContainer, wrapper_type);
    
        py_FaceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval))->Ref();
        py_FaceContainer->obj = const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_FaceContainer->obj] = (PyObject *) py_FaceContainer;
    }
    py_retval = Py_BuildValue((char *) "N", py_FaceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnStackHelper_Install__1(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::FaceContainer > retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    PyNs3NdnFaceContainer *py_FaceContainer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    retval = self->obj->Install(ns3::Ptr< ns3::Node  > (node_ptr));
    if (!(const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_FaceContainer = NULL;
    } else {
        py_FaceContainer = (PyNs3NdnFaceContainer *) wrapper_lookup_iter->second;
        Py_INCREF(py_FaceContainer);
    }
    
    if (py_FaceContainer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))), &PyNs3NdnFaceContainer_Type);
        py_FaceContainer = PyObject_New(PyNs3NdnFaceContainer, wrapper_type);
    
        py_FaceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval))->Ref();
        py_FaceContainer->obj = const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_FaceContainer->obj] = (PyObject *) py_FaceContainer;
    }
    py_retval = Py_BuildValue((char *) "N", py_FaceContainer);
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnStackHelper_Install__2(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::FaceContainer > retval;
    PyNs3NodeContainer *c;
    const char *keywords[] = {"c", NULL};
    PyNs3NdnFaceContainer *py_FaceContainer;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NodeContainer_Type, &c)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    retval = self->obj->Install(*((PyNs3NodeContainer *) c)->obj);
    if (!(const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_FaceContainer = NULL;
    } else {
        py_FaceContainer = (PyNs3NdnFaceContainer *) wrapper_lookup_iter->second;
        Py_INCREF(py_FaceContainer);
    }
    
    if (py_FaceContainer == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval)))), &PyNs3NdnFaceContainer_Type);
        py_FaceContainer = PyObject_New(PyNs3NdnFaceContainer, wrapper_type);
    
        py_FaceContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval))->Ref();
        py_FaceContainer->obj = const_cast<ns3::ndn::FaceContainer *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_FaceContainer->obj] = (PyObject *) py_FaceContainer;
    }
    py_retval = Py_BuildValue((char *) "N", py_FaceContainer);
    return py_retval;
}

PyObject * _wrap_PyNs3NdnStackHelper_Install(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3NdnStackHelper_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnStackHelper_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnStackHelper_Install__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnStackHelper_SetForwardingStrategy(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *forwardingStrategyClass;
    Py_ssize_t forwardingStrategyClass_len;
    std::string forwardingStrategyClass_std;
    const char *attr1;
    Py_ssize_t attr1_len;
    std::string attr1_std;
    const char *value1;
    Py_ssize_t value1_len;
    std::string value1_std;
    const char *attr2;
    Py_ssize_t attr2_len;
    std::string attr2_std;
    const char *value2;
    Py_ssize_t value2_len;
    std::string value2_std;
    const char *attr3;
    Py_ssize_t attr3_len;
    std::string attr3_std;
    const char *value3;
    Py_ssize_t value3_len;
    std::string value3_std;
    const char *attr4;
    Py_ssize_t attr4_len;
    std::string attr4_std;
    const char *value4;
    Py_ssize_t value4_len;
    std::string value4_std;
    const char *keywords[] = {"forwardingStrategyClass", "attr1", "value1", "attr2", "value2", "attr3", "value3", "attr4", "value4", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#s#s#s#", (char **) keywords, &forwardingStrategyClass, &forwardingStrategyClass_len, &attr1, &attr1_len, &value1, &value1_len, &attr2, &attr2_len, &value2, &value2_len, &attr3, &attr3_len, &value3, &value3_len, &attr4, &attr4_len, &value4, &value4_len)) {
        return NULL;
    }
    forwardingStrategyClass_std = std::string(forwardingStrategyClass, forwardingStrategyClass_len);
    attr1_std = std::string(attr1, attr1_len);
    value1_std = std::string(value1, value1_len);
    attr2_std = std::string(attr2, attr2_len);
    value2_std = std::string(value2, value2_len);
    attr3_std = std::string(attr3, attr3_len);
    value3_std = std::string(value3, value3_len);
    attr4_std = std::string(attr4, attr4_len);
    value4_std = std::string(value4, value4_len);
    self->obj->SetForwardingStrategy(forwardingStrategyClass_std, attr1_std, value1_std, attr2_std, value2_std, attr3_std, value3_std, attr4_std, value4_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnStackHelper_AddRoute__0(PyNs3NdnStackHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *nodeName;
    Py_ssize_t nodeName_len;
    std::string nodeName_std;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    unsigned int faceId;
    int32_t metric;
    const char *keywords[] = {"nodeName", "prefix", "faceId", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#Ii", (char **) keywords, &nodeName, &nodeName_len, &prefix, &prefix_len, &faceId, &metric)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nodeName_std = std::string(nodeName, nodeName_len);
    prefix_std = std::string(prefix, prefix_len);
    ns3::ndn::StackHelper::AddRoute(nodeName_std, prefix_std, faceId, metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnStackHelper_AddRoute__1(PyNs3NdnStackHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    unsigned int faceId;
    int32_t metric;
    const char *keywords[] = {"node", "prefix", "faceId", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#Ii", (char **) keywords, &PyNs3Node_Type, &node, &prefix, &prefix_len, &faceId, &metric)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    prefix_std = std::string(prefix, prefix_len);
    ns3::ndn::StackHelper::AddRoute(ns3::Ptr< ns3::Node  > (node_ptr), prefix_std, faceId, metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnStackHelper_AddRoute__2(PyNs3NdnStackHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    PyNs3NdnFace *face;
    ns3::ndn::Face *face_ptr;
    int32_t metric;
    const char *keywords[] = {"node", "prefix", "face", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!i", (char **) keywords, &PyNs3Node_Type, &node, &prefix, &prefix_len, &PyNs3NdnFace_Type, &face, &metric)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    prefix_std = std::string(prefix, prefix_len);
    face_ptr = (face ? face->obj : NULL);
    ns3::ndn::StackHelper::AddRoute(ns3::Ptr< ns3::Node  > (node_ptr), prefix_std, ns3::Ptr< ns3::ndn::Face  > (face_ptr), metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnStackHelper_AddRoute__3(PyNs3NdnStackHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    PyNs3Node *otherNode;
    ns3::Node *otherNode_ptr;
    int32_t metric;
    const char *keywords[] = {"node", "prefix", "otherNode", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#O!i", (char **) keywords, &PyNs3Node_Type, &node, &prefix, &prefix_len, &PyNs3Node_Type, &otherNode, &metric)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    prefix_std = std::string(prefix, prefix_len);
    otherNode_ptr = (otherNode ? otherNode->obj : NULL);
    ns3::ndn::StackHelper::AddRoute(ns3::Ptr< ns3::Node  > (node_ptr), prefix_std, ns3::Ptr< ns3::Node  > (otherNode_ptr), metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnStackHelper_AddRoute__4(PyNs3NdnStackHelper *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    const char *nodeName;
    Py_ssize_t nodeName_len;
    std::string nodeName_std;
    const char *prefix;
    Py_ssize_t prefix_len;
    std::string prefix_std;
    const char *otherNodeName;
    Py_ssize_t otherNodeName_len;
    std::string otherNodeName_std;
    int32_t metric;
    const char *keywords[] = {"nodeName", "prefix", "otherNodeName", "metric", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#i", (char **) keywords, &nodeName, &nodeName_len, &prefix, &prefix_len, &otherNodeName, &otherNodeName_len, &metric)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    nodeName_std = std::string(nodeName, nodeName_len);
    prefix_std = std::string(prefix, prefix_len);
    otherNodeName_std = std::string(otherNodeName, otherNodeName_len);
    ns3::ndn::StackHelper::AddRoute(nodeName_std, prefix_std, otherNodeName_std, metric);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnStackHelper_AddRoute(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[5] = {0,};
    retval = _wrap_PyNs3NdnStackHelper_AddRoute__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnStackHelper_AddRoute__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3NdnStackHelper_AddRoute__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    retval = _wrap_PyNs3NdnStackHelper_AddRoute__3(self, args, kwargs, &exceptions[3]);
    if (!exceptions[3]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        return retval;
    }
    retval = _wrap_PyNs3NdnStackHelper_AddRoute__4(self, args, kwargs, &exceptions[4]);
    if (!exceptions[4]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        Py_DECREF(exceptions[2]);
        Py_DECREF(exceptions[3]);
        return retval;
    }
    error_list = PyList_New(5);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyList_SET_ITEM(error_list, 3, PyObject_Str(exceptions[3]));
    Py_DECREF(exceptions[3]);
    PyList_SET_ITEM(error_list, 4, PyObject_Str(exceptions[4]));
    Py_DECREF(exceptions[4]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


PyObject *
_wrap_PyNs3NdnStackHelper_SetPit(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *pitClass;
    Py_ssize_t pitClass_len;
    std::string pitClass_std;
    const char *attr1;
    Py_ssize_t attr1_len;
    std::string attr1_std;
    const char *value1;
    Py_ssize_t value1_len;
    std::string value1_std;
    const char *attr2;
    Py_ssize_t attr2_len;
    std::string attr2_std;
    const char *value2;
    Py_ssize_t value2_len;
    std::string value2_std;
    const char *attr3;
    Py_ssize_t attr3_len;
    std::string attr3_std;
    const char *value3;
    Py_ssize_t value3_len;
    std::string value3_std;
    const char *attr4;
    Py_ssize_t attr4_len;
    std::string attr4_std;
    const char *value4;
    Py_ssize_t value4_len;
    std::string value4_std;
    const char *keywords[] = {"pitClass", "attr1", "value1", "attr2", "value2", "attr3", "value3", "attr4", "value4", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#s#s#s#", (char **) keywords, &pitClass, &pitClass_len, &attr1, &attr1_len, &value1, &value1_len, &attr2, &attr2_len, &value2, &value2_len, &attr3, &attr3_len, &value3, &value3_len, &attr4, &attr4_len, &value4, &value4_len)) {
        return NULL;
    }
    pitClass_std = std::string(pitClass, pitClass_len);
    attr1_std = std::string(attr1, attr1_len);
    value1_std = std::string(value1, value1_len);
    attr2_std = std::string(attr2, attr2_len);
    value2_std = std::string(value2, value2_len);
    attr3_std = std::string(attr3, attr3_len);
    value3_std = std::string(value3, value3_len);
    attr4_std = std::string(attr4, attr4_len);
    value4_std = std::string(value4, value4_len);
    self->obj->SetPit(pitClass_std, attr1_std, value1_std, attr2_std, value2_std, attr3_std, value3_std, attr4_std, value4_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnStackHelper_SetDefaultRoutes(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool needSet;
    PyObject *py_needSet;
    const char *keywords[] = {"needSet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &py_needSet)) {
        return NULL;
    }
    needSet = (bool) PyObject_IsTrue(py_needSet);
    self->obj->SetDefaultRoutes(needSet);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnStackHelper_SetFib(PyNs3NdnStackHelper *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *fibClass;
    Py_ssize_t fibClass_len;
    std::string fibClass_std;
    const char *attr1;
    Py_ssize_t attr1_len;
    std::string attr1_std;
    const char *value1;
    Py_ssize_t value1_len;
    std::string value1_std;
    const char *attr2;
    Py_ssize_t attr2_len;
    std::string attr2_std;
    const char *value2;
    Py_ssize_t value2_len;
    std::string value2_std;
    const char *attr3;
    Py_ssize_t attr3_len;
    std::string attr3_std;
    const char *value3;
    Py_ssize_t value3_len;
    std::string value3_std;
    const char *attr4;
    Py_ssize_t attr4_len;
    std::string attr4_std;
    const char *value4;
    Py_ssize_t value4_len;
    std::string value4_std;
    const char *keywords[] = {"fibClass", "attr1", "value1", "attr2", "value2", "attr3", "value3", "attr4", "value4", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#s#s#s#s#s#s#s#s#", (char **) keywords, &fibClass, &fibClass_len, &attr1, &attr1_len, &value1, &value1_len, &attr2, &attr2_len, &value2, &value2_len, &attr3, &attr3_len, &value3, &value3_len, &attr4, &attr4_len, &value4, &value4_len)) {
        return NULL;
    }
    fibClass_std = std::string(fibClass, fibClass_len);
    attr1_std = std::string(attr1, attr1_len);
    value1_std = std::string(value1, value1_len);
    attr2_std = std::string(attr2, attr2_len);
    value2_std = std::string(value2, value2_len);
    attr3_std = std::string(attr3, attr3_len);
    value3_std = std::string(value3, value3_len);
    attr4_std = std::string(attr4, attr4_len);
    value4_std = std::string(value4, value4_len);
    self->obj->SetFib(fibClass_std, attr1_std, value1_std, attr2_std, value2_std, attr3_std, value3_std, attr4_std, value4_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3NdnStackHelper_methods[] = {
    {(char *) "EnableLimits", (PyCFunction) _wrap_PyNs3NdnStackHelper_EnableLimits, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3NdnStackHelper_InstallAll, METH_NOARGS, NULL },
    {(char *) "SetStackAttributes", (PyCFunction) _wrap_PyNs3NdnStackHelper_SetStackAttributes, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetContentStore", (PyCFunction) _wrap_PyNs3NdnStackHelper_SetContentStore, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnStackHelper_Install, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetForwardingStrategy", (PyCFunction) _wrap_PyNs3NdnStackHelper_SetForwardingStrategy, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "AddRoute", (PyCFunction) _wrap_PyNs3NdnStackHelper_AddRoute, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "SetPit", (PyCFunction) _wrap_PyNs3NdnStackHelper_SetPit, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDefaultRoutes", (PyCFunction) _wrap_PyNs3NdnStackHelper_SetDefaultRoutes, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetFib", (PyCFunction) _wrap_PyNs3NdnStackHelper_SetFib, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnStackHelper__tp_dealloc(PyNs3NdnStackHelper *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnStackHelper_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnStackHelper_wrapper_registry.end()) {
        PyNs3NdnStackHelper_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::StackHelper *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnStackHelper__tp_richcompare (PyNs3NdnStackHelper *PYBINDGEN_UNUSED(self), PyNs3NdnStackHelper *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnStackHelper_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnStackHelper_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.StackHelper",            /* tp_name */
    sizeof(PyNs3NdnStackHelper),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnStackHelper__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnStackHelper__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnStackHelper_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnStackHelper__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnUnknownHeaderException_wrapper_registry;


static int
_wrap_PyNs3NdnUnknownHeaderException__tp_init__0(PyNs3NdnUnknownHeaderException *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::UnknownHeaderException();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnUnknownHeaderException__tp_init__1(PyNs3NdnUnknownHeaderException *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnUnknownHeaderException *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnUnknownHeaderException_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::UnknownHeaderException(*((PyNs3NdnUnknownHeaderException *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnUnknownHeaderException__tp_init(PyNs3NdnUnknownHeaderException *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnUnknownHeaderException__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnUnknownHeaderException__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyNs3NdnUnknownHeaderException__copy__(PyNs3NdnUnknownHeaderException *self)
{

    PyNs3NdnUnknownHeaderException *py_copy;
    py_copy = PyObject_New(PyNs3NdnUnknownHeaderException, &PyNs3NdnUnknownHeaderException_Type);
    py_copy->obj = new ns3::ndn::UnknownHeaderException(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnUnknownHeaderException_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnUnknownHeaderException_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnUnknownHeaderException__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnUnknownHeaderException__tp_dealloc(PyNs3NdnUnknownHeaderException *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnUnknownHeaderException_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnUnknownHeaderException_wrapper_registry.end()) {
        PyNs3NdnUnknownHeaderException_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::UnknownHeaderException *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnUnknownHeaderException__tp_richcompare (PyNs3NdnUnknownHeaderException *PYBINDGEN_UNUSED(self), PyNs3NdnUnknownHeaderException *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnUnknownHeaderException_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnUnknownHeaderException_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.UnknownHeaderException",            /* tp_name */
    sizeof(PyNs3NdnUnknownHeaderException),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnUnknownHeaderException__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnUnknownHeaderException__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnUnknownHeaderException_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnUnknownHeaderException__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



std::map<void*, PyObject*> PyNs3NdnWire_wrapper_registry;


static int
_wrap_PyNs3NdnWire__tp_init__0(PyNs3NdnWire *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Wire();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3NdnWire__tp_init__1(PyNs3NdnWire *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3NdnWire *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnWire_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::ndn::Wire(*((PyNs3NdnWire *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3NdnWire__tp_init(PyNs3NdnWire *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnWire__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnWire__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3NdnWire_ToName(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Name > retval;
    const char *wire;
    Py_ssize_t wire_len;
    std::string wire_std;
    int wireFormat = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_DEFAULT);
    const char *keywords[] = {"wire", "wireFormat", NULL};
    PyNs3NdnName *py_Name;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|i", (char **) keywords, &wire, &wire_len, &wireFormat)) {
        return NULL;
    }
    wire_std = std::string(wire, wire_len);
    if (wireFormat > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::ToName(wire_std, wireFormat);
    if (!(const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Name = NULL;
    } else {
        py_Name = (PyNs3NdnName *) wrapper_lookup_iter->second;
        Py_INCREF(py_Name);
    }
    
    if (py_Name == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval)))), &PyNs3NdnName_Type);
        py_Name = PyObject_New(PyNs3NdnName, wrapper_type);
    
        py_Name->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval))->Ref();
        py_Name->obj = const_cast<ns3::ndn::Name *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Name->obj] = (PyObject *) py_Name;
    }
    py_retval = Py_BuildValue((char *) "N", py_Name);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_FromInterestStr(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    int wireFormat = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_DEFAULT);
    const char *keywords[] = {"interest", "wireFormat", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|i", (char **) keywords, &PyNs3NdnInterest_Type, &interest, &wireFormat)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    if (wireFormat > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::FromInterestStr(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), wireFormat);
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_ToData(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Data > retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int type = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_AUTODETECT);
    const char *keywords[] = {"packet", "type", NULL};
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|i", (char **) keywords, &PyNs3Packet_Type, &packet, &type)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (type > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::ToData(ns3::Ptr< ns3::Packet  > (packet_ptr), type);
    if (!(const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = Py_BuildValue((char *) "N", py_Data);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_FromName(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3NdnName *name;
    ns3::ndn::Name *name_ptr;
    int wireFormat = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_DEFAULT);
    const char *keywords[] = {"name", "wireFormat", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|i", (char **) keywords, &PyNs3NdnName_Type, &name, &wireFormat)) {
        return NULL;
    }
    name_ptr = (name ? name->obj : NULL);
    if (wireFormat > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::FromName(ns3::Ptr< ns3::ndn::Name  > (name_ptr), wireFormat);
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_ToInterest(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Interest > retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    int type = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_AUTODETECT);
    const char *keywords[] = {"packet", "type", NULL};
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|i", (char **) keywords, &PyNs3Packet_Type, &packet, &type)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (type > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::ToInterest(ns3::Ptr< ns3::Packet  > (packet_ptr), type);
    if (!(const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = Py_BuildValue((char *) "N", py_Interest);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_FromData(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    int wireFormat = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_DEFAULT);
    const char *keywords[] = {"data", "wireFormat", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|i", (char **) keywords, &PyNs3NdnData_Type, &data, &wireFormat)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    if (wireFormat > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::FromData(ns3::Ptr< ns3::ndn::Data  > (data_ptr), wireFormat);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_FromInterest(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::Packet > retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    int wireFormat = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_DEFAULT);
    const char *keywords[] = {"interest", "wireFormat", NULL};
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|i", (char **) keywords, &PyNs3NdnInterest_Type, &interest, &wireFormat)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    if (wireFormat > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::FromInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), wireFormat);
    if (!(const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::Packet *> (ns3::PeekPointer (retval)))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (retval))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = Py_BuildValue((char *) "N", py_Packet);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_ToDataStr(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Data > retval;
    const char *wire;
    Py_ssize_t wire_len;
    std::string wire_std;
    int type = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_AUTODETECT);
    const char *keywords[] = {"wire", "type", NULL};
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|i", (char **) keywords, &wire, &wire_len, &type)) {
        return NULL;
    }
    wire_std = std::string(wire, wire_len);
    if (type > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::ToDataStr(wire_std, type);
    if (!(const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval)))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = Py_BuildValue((char *) "N", py_Data);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_FromDataStr(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    std::string retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    int wireFormat = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_DEFAULT);
    const char *keywords[] = {"data", "wireFormat", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!|i", (char **) keywords, &PyNs3NdnData_Type, &data, &wireFormat)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    if (wireFormat > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::FromDataStr(ns3::Ptr< ns3::ndn::Data  > (data_ptr), wireFormat);
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnWire_ToInterestStr(PyNs3NdnWire *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::Ptr< ns3::ndn::Interest > retval;
    const char *wire;
    Py_ssize_t wire_len;
    std::string wire_std;
    int type = ::int8_t(::ns3::ndn::Wire::WIRE_FORMAT_AUTODETECT);
    const char *keywords[] = {"wire", "type", NULL};
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|i", (char **) keywords, &wire, &wire_len, &type)) {
        return NULL;
    }
    wire_std = std::string(wire, wire_len);
    if (type > 0x7f) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    retval = ns3::ndn::Wire::ToInterestStr(wire_std, type);
    if (!(const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL) {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval)))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (retval));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = Py_BuildValue((char *) "N", py_Interest);
    return py_retval;
}


static PyObject*
_wrap_PyNs3NdnWire__copy__(PyNs3NdnWire *self)
{

    PyNs3NdnWire *py_copy;
    py_copy = PyObject_New(PyNs3NdnWire, &PyNs3NdnWire_Type);
    py_copy->obj = new ns3::ndn::Wire(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3NdnWire_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnWire_methods[] = {
    {(char *) "ToName", (PyCFunction) _wrap_PyNs3NdnWire_ToName, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "FromInterestStr", (PyCFunction) _wrap_PyNs3NdnWire_FromInterestStr, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "ToData", (PyCFunction) _wrap_PyNs3NdnWire_ToData, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "FromName", (PyCFunction) _wrap_PyNs3NdnWire_FromName, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "ToInterest", (PyCFunction) _wrap_PyNs3NdnWire_ToInterest, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "FromData", (PyCFunction) _wrap_PyNs3NdnWire_FromData, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "FromInterest", (PyCFunction) _wrap_PyNs3NdnWire_FromInterest, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "ToDataStr", (PyCFunction) _wrap_PyNs3NdnWire_ToDataStr, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "FromDataStr", (PyCFunction) _wrap_PyNs3NdnWire_FromDataStr, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "ToInterestStr", (PyCFunction) _wrap_PyNs3NdnWire_ToInterestStr, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnWire__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnWire__tp_dealloc(PyNs3NdnWire *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3NdnWire_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3NdnWire_wrapper_registry.end()) {
        PyNs3NdnWire_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::ndn::Wire *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnWire__tp_richcompare (PyNs3NdnWire *PYBINDGEN_UNUSED(self), PyNs3NdnWire *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnWire_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnWire_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Wire",            /* tp_name */
    sizeof(PyNs3NdnWire),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnWire__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnWire__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnWire_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnWire__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnApiFace__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnApiFace *self)
{
    PyObject *py_retval;
    PyNs3NdnApiFace__PythonHelper *helper = dynamic_cast< PyNs3NdnApiFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApiFace__PythonHelper::_wrap_Receive(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3NdnApiFace__PythonHelper *helper = dynamic_cast< PyNs3NdnApiFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Receive of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Receive__parent_caller(ns3::Ptr< ns3::Packet  > (p_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnApiFace__PythonHelper::_wrap_DoInitialize(PyNs3NdnApiFace *self)
{
    PyObject *py_retval;
    PyNs3NdnApiFace__PythonHelper *helper = dynamic_cast< PyNs3NdnApiFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApiFace__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnApiFace *self)
{
    PyObject *py_retval;
    PyNs3NdnApiFace__PythonHelper *helper = dynamic_cast< PyNs3NdnApiFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnApiFace__PythonHelper::_wrap_Send(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3NdnApiFace__PythonHelper *helper = dynamic_cast< PyNs3NdnApiFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Send of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Send__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnApiFace__PythonHelper::_wrap_DoDispose(PyNs3NdnApiFace *self)
{
    PyObject *py_retval;
    PyNs3NdnApiFace__PythonHelper *helper = dynamic_cast< PyNs3NdnApiFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3NdnApiFace__PythonHelper::Shutdown()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ApiFace *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Shutdown"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::ApiFace::Shutdown();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = (ns3::ndn::ApiFace*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Shutdown", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnApiFace__PythonHelper::SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ApiFace *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ApiFace::SendInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = (ns3::ndn::ApiFace*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ApiFace::SendInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ApiFace::SendInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnApiFace__PythonHelper::SendData(ns3::Ptr< ns3::ndn::Data const > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::ApiFace *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ApiFace::SendData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = (ns3::ndn::ApiFace*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ApiFace::SendData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::ApiFace::SendData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnApiFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnApiFace__PythonHelper::ReceiveData(ns3::Ptr< ns3::ndn::Data > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnApiFace__PythonHelper::SetMetric(uint16_t metric)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Face::SetMetric(metric);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMetric", (char *) "i", (int) metric);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnApiFace__PythonHelper::ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3NdnApiFace__PythonHelper::GetMetric() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = const_cast< ns3::ndn::Face* >((const ns3::ndn::Face*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMetric", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnApiFace__PythonHelper::UnRegisterProtocolHandlers()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "UnRegisterProtocolHandlers"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Face::UnRegisterProtocolHandlers();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "UnRegisterProtocolHandlers", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnApiFace__PythonHelper::Receive(ns3::Ptr< ns3::Packet const > p)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (p)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (p))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (p))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (p));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnApiFace__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NdnApiFace__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnApiFace__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApiFace__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApiFace__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnApiFace__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3NdnApiFace__tp_init(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *keywords[] = {"node", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Node_Type, &node)) {
        return -1;
    }
    node_ptr = (node ? node->obj : NULL);
    if (Py_TYPE(self) != &PyNs3NdnApiFace_Type)
    {
        self->obj = new PyNs3NdnApiFace__PythonHelper(ns3::Ptr< ns3::Node  > (node_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnApiFace__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ndn::ApiFace(ns3::Ptr< ns3::Node  > (node_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3NdnApiFace_SendData(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    PyNs3NdnApiFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnApiFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &data)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->SendData(ns3::Ptr< ns3::ndn::Data  > (data_ptr))) : (self->obj->ns3::ndn::ApiFace::SendData(ns3::Ptr< ns3::ndn::Data  > (data_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApiFace_SetInterestFilter(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnName *prefix;
    ns3::ndn::Name *prefix_ptr;
    PyObject *onInterest;
    ns3::Ptr<PythonCallbackImpl0> onInterest_cb_impl;
    const char *keywords[] = {"prefix", "onInterest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!O", (char **) keywords, &PyNs3NdnName_Type, &prefix, &onInterest)) {
        return NULL;
    }
    prefix_ptr = (prefix ? prefix->obj : NULL);
    if (!PyCallable_Check(onInterest)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'onInterest' must be callbale");
        return NULL;
    }
    onInterest_cb_impl = ns3::Create<PythonCallbackImpl0> (onInterest);
    self->obj->SetInterestFilter(ns3::Ptr< ns3::ndn::Name  > (prefix_ptr), ns3::Callback<void, ns3::Ptr<ns3::ndn::Name const>, ns3::Ptr<ns3::ndn::Interest const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (onInterest_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApiFace_SendInterest(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnApiFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnApiFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->SendInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr))) : (self->obj->ns3::ndn::ApiFace::SendInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApiFace_ClearInterestFilter(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnName *prefix;
    ns3::ndn::Name *prefix_ptr;
    const char *keywords[] = {"prefix", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnName_Type, &prefix)) {
        return NULL;
    }
    prefix_ptr = (prefix ? prefix->obj : NULL);
    self->obj->ClearInterestFilter(ns3::Ptr< ns3::ndn::Name  > (prefix_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApiFace_Shutdown(PyNs3NdnApiFace *self)
{
    PyObject *py_retval;
    PyNs3NdnApiFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnApiFace__PythonHelper*> (self->obj);
    
    (helper_class == NULL)? (self->obj->Shutdown()) : (self->obj->ns3::ndn::ApiFace::Shutdown());
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApiFace_Put(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    const char *keywords[] = {"data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &data)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    self->obj->Put(ns3::Ptr< ns3::ndn::Data  > (data_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnApiFace_ExpressInterest(PyNs3NdnApiFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyObject *onData;
    ns3::Ptr<PythonCallbackImpl3> onData_cb_impl;
    PyObject *onTimeout;
    ns3::Ptr<PythonCallbackImpl2> onTimeout_cb_impl;
    const char *keywords[] = {"interest", "onData", "onTimeout", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!OO", (char **) keywords, &PyNs3NdnInterest_Type, &interest, &onData, &onTimeout)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    if (!PyCallable_Check(onData)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'onData' must be callbale");
        return NULL;
    }
    onData_cb_impl = ns3::Create<PythonCallbackImpl3> (onData);
    if (!PyCallable_Check(onTimeout)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'onTimeout' must be callbale");
        return NULL;
    }
    onTimeout_cb_impl = ns3::Create<PythonCallbackImpl2> (onTimeout);
    self->obj->ExpressInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr), ns3::Callback<void, ns3::Ptr<ns3::ndn::Interest const>, ns3::Ptr<ns3::ndn::Data const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (onData_cb_impl), ns3::Callback<void, ns3::Ptr<ns3::ndn::Interest const>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (onTimeout_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3NdnApiFace_methods[] = {
    {(char *) "SendData", (PyCFunction) _wrap_PyNs3NdnApiFace_SendData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetInterestFilter", (PyCFunction) _wrap_PyNs3NdnApiFace_SetInterestFilter, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SendInterest", (PyCFunction) _wrap_PyNs3NdnApiFace_SendInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ClearInterestFilter", (PyCFunction) _wrap_PyNs3NdnApiFace_ClearInterestFilter, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Shutdown", (PyCFunction) _wrap_PyNs3NdnApiFace_Shutdown, METH_NOARGS, NULL },
    {(char *) "Put", (PyCFunction) _wrap_PyNs3NdnApiFace_Put, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "ExpressInterest", (PyCFunction) _wrap_PyNs3NdnApiFace_ExpressInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnApiFace__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "Receive", (PyCFunction) PyNs3NdnApiFace__PythonHelper::_wrap_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnApiFace__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnApiFace__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "Send", (PyCFunction) PyNs3NdnApiFace__PythonHelper::_wrap_Send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnApiFace__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnApiFace__tp_clear(PyNs3NdnApiFace *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::ApiFace *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnApiFace__tp_traverse(PyNs3NdnApiFace *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnApiFace__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnApiFace__tp_dealloc(PyNs3NdnApiFace *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnApiFace__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnApiFace__tp_richcompare (PyNs3NdnApiFace *PYBINDGEN_UNUSED(self), PyNs3NdnApiFace *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnApiFace_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnApiFace_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.ApiFace",            /* tp_name */
    sizeof(PyNs3NdnApiFace),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnApiFace__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnApiFace__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnApiFace__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnApiFace__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnApiFace_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnApiFace, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnApiFace__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3NdnAppFace__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3NdnAppFace *self)
{
    PyObject *py_retval;
    PyNs3NdnAppFace__PythonHelper *helper = dynamic_cast< PyNs3NdnAppFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnAppFace__PythonHelper::_wrap_Receive(PyNs3NdnAppFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *p;
    ns3::Packet *p_ptr;
    PyNs3NdnAppFace__PythonHelper *helper = dynamic_cast< PyNs3NdnAppFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"p", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &p)) {
        return NULL;
    }
    p_ptr = (p ? p->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Receive of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Receive__parent_caller(ns3::Ptr< ns3::Packet  > (p_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnAppFace__PythonHelper::_wrap_DoInitialize(PyNs3NdnAppFace *self)
{
    PyObject *py_retval;
    PyNs3NdnAppFace__PythonHelper *helper = dynamic_cast< PyNs3NdnAppFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnAppFace__PythonHelper::_wrap_NotifyNewAggregate(PyNs3NdnAppFace *self)
{
    PyObject *py_retval;
    PyNs3NdnAppFace__PythonHelper *helper = dynamic_cast< PyNs3NdnAppFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3NdnAppFace__PythonHelper::_wrap_Send(PyNs3NdnAppFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *packet;
    ns3::Packet *packet_ptr;
    PyNs3NdnAppFace__PythonHelper *helper = dynamic_cast< PyNs3NdnAppFace__PythonHelper* >(self->obj);
    const char *keywords[] = {"packet", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &packet)) {
        return NULL;
    }
    packet_ptr = (packet ? packet->obj : NULL);
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method Send of class Face is protected and can only be called by a subclass");
        return NULL;
    }
    retval = helper->Send__parent_caller(ns3::Ptr< ns3::Packet  > (packet_ptr));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

PyObject *
PyNs3NdnAppFace__PythonHelper::_wrap_DoDispose(PyNs3NdnAppFace *self)
{
    PyObject *py_retval;
    PyNs3NdnAppFace__PythonHelper *helper = dynamic_cast< PyNs3NdnAppFace__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

bool
PyNs3NdnAppFace__PythonHelper::SendInterest(ns3::Ptr< ns3::ndn::Interest const > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::AppFace *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::AppFace::SendInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = (ns3::ndn::AppFace*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::AppFace::SendInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::AppFace::SendInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnAppFace__PythonHelper::SendData(ns3::Ptr< ns3::ndn::Data const > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::AppFace *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SendData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::AppFace::SendData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = (ns3::ndn::AppFace*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SendData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::AppFace::SendData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::AppFace::SendData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnAppFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnAppFace__PythonHelper::ReceiveData(ns3::Ptr< ns3::ndn::Data > data)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *py_Data;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveData"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Data = NULL;
    } else {
        py_Data = (PyNs3NdnData *) wrapper_lookup_iter->second;
        Py_INCREF(py_Data);
    }
    
    if (py_Data == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))), &PyNs3NdnData_Type);
        py_Data = PyObject_New(PyNs3NdnData, wrapper_type);
    
        py_Data->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data))->Ref();
        py_Data->obj = const_cast<ns3::ndn::Data *> (ns3::PeekPointer (data));
        PyNs3Empty_wrapper_registry[(void *) py_Data->obj] = (PyObject *) py_Data;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveData", (char *) "N", py_Data);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveData(data);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnAppFace__PythonHelper::SetMetric(uint16_t metric)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "SetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Face::SetMetric(metric);
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "SetMetric", (char *) "i", (int) metric);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnAppFace__PythonHelper::ReceiveInterest(ns3::Ptr< ns3::ndn::Interest > interest)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *py_Interest;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "ReceiveInterest"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Interest = NULL;
    } else {
        py_Interest = (PyNs3NdnInterest *) wrapper_lookup_iter->second;
        Py_INCREF(py_Interest);
    }
    
    if (py_Interest == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))), &PyNs3NdnInterest_Type);
        py_Interest = PyObject_New(PyNs3NdnInterest, wrapper_type);
    
        py_Interest->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest))->Ref();
        py_Interest->obj = const_cast<ns3::ndn::Interest *> (ns3::PeekPointer (interest));
        PyNs3Empty_wrapper_registry[(void *) py_Interest->obj] = (PyObject *) py_Interest;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "ReceiveInterest", (char *) "N", py_Interest);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::ReceiveInterest(interest);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

uint16_t
PyNs3NdnAppFace__PythonHelper::GetMetric() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    uint16_t retval;
    int tmp;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetMetric"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = const_cast< ns3::ndn::Face* >((const ns3::ndn::Face*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetMetric", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &tmp)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    if (tmp > 0xffff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::GetMetric();
    }
    retval = tmp;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnAppFace__PythonHelper::UnRegisterProtocolHandlers()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "UnRegisterProtocolHandlers"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ndn::Face::UnRegisterProtocolHandlers();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "UnRegisterProtocolHandlers", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

bool
PyNs3NdnAppFace__PythonHelper::Receive(ns3::Ptr< ns3::Packet const > p)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Receive"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (p)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (p))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (p))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (p));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Receive", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Receive(p);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

bool
PyNs3NdnAppFace__PythonHelper::Send(ns3::Ptr< ns3::Packet > packet)
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ndn::Face *self_obj_before;
    PyObject *py_retval;
    bool retval;
    PyNs3Packet *py_Packet;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    PyObject *py_boolretval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "Send"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    self_obj_before = reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj;
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = (ns3::ndn::Face*) this;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) const_cast<ns3::Packet *> (ns3::PeekPointer (packet)));
    if (wrapper_lookup_iter == PyNs3Empty_wrapper_registry.end()) {
        py_Packet = NULL;
    } else {
        py_Packet = (PyNs3Packet *) wrapper_lookup_iter->second;
        Py_INCREF(py_Packet);
    }
    
    if (py_Packet == NULL)
    {
        wrapper_type = PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map.lookup_wrapper(typeid(*const_cast<ns3::Packet *> (ns3::PeekPointer (packet))), &PyNs3Packet_Type);
        py_Packet = PyObject_New(PyNs3Packet, wrapper_type);
    
        py_Packet->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        const_cast<ns3::Packet *> (ns3::PeekPointer (packet))->Ref();
        py_Packet->obj = const_cast<ns3::Packet *> (ns3::PeekPointer (packet));
        PyNs3Empty_wrapper_registry[(void *) py_Packet->obj] = (PyObject *) py_Packet;
    }
    py_retval = PyObject_CallMethod(m_pyself, (char *) "Send", (char *) "N", py_Packet);
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O", &py_boolretval)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::ndn::Face::Send(packet);
    }
    retval = PyObject_IsTrue(py_boolretval);
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3NdnFace* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

ns3::TypeId
PyNs3NdnAppFace__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3NdnAppFace__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnAppFace__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnAppFace__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3NdnAppFace__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

static int
_wrap_PyNs3NdnAppFace__tp_init(PyNs3NdnAppFace *self, PyObject *args, PyObject *kwargs)
{
    PyNs3NdnApp *app;
    ns3::ndn::App *app_ptr;
    const char *keywords[] = {"app", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnApp_Type, &app)) {
        return -1;
    }
    app_ptr = (app ? app->obj : NULL);
    if (Py_TYPE(self) != &PyNs3NdnAppFace_Type)
    {
        self->obj = new PyNs3NdnAppFace__PythonHelper(ns3::Ptr< ns3::ndn::App  > (app_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3NdnAppFace__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::ndn::AppFace(ns3::Ptr< ns3::ndn::App  > (app_ptr));
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}


PyObject *
_wrap_PyNs3NdnAppFace_SendInterest(PyNs3NdnAppFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnInterest *interest;
    ns3::ndn::Interest *interest_ptr;
    PyNs3NdnAppFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnAppFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"interest", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnInterest_Type, &interest)) {
        return NULL;
    }
    interest_ptr = (interest ? interest->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->SendInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr))) : (self->obj->ns3::ndn::AppFace::SendInterest(ns3::Ptr< ns3::ndn::Interest  > (interest_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnAppFace_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::ndn::AppFace::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnAppFace_SendData(PyNs3NdnAppFace *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    bool retval;
    PyNs3NdnData *data;
    ns3::ndn::Data *data_ptr;
    PyNs3NdnAppFace__PythonHelper *helper_class = dynamic_cast<PyNs3NdnAppFace__PythonHelper*> (self->obj);
    const char *keywords[] = {"data", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnData_Type, &data)) {
        return NULL;
    }
    data_ptr = (data ? data->obj : NULL);
    retval = (helper_class == NULL)? (self->obj->SendData(ns3::Ptr< ns3::ndn::Data  > (data_ptr))) : (self->obj->ns3::ndn::AppFace::SendData(ns3::Ptr< ns3::ndn::Data  > (data_ptr)));
    py_retval = Py_BuildValue((char *) "N", PyBool_FromLong(retval));
    return py_retval;
}

static PyMethodDef PyNs3NdnAppFace_methods[] = {
    {(char *) "SendInterest", (PyCFunction) _wrap_PyNs3NdnAppFace_SendInterest, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3NdnAppFace_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SendData", (PyCFunction) _wrap_PyNs3NdnAppFace_SendData, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3NdnAppFace__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "Receive", (PyCFunction) PyNs3NdnAppFace__PythonHelper::_wrap_Receive, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3NdnAppFace__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3NdnAppFace__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "Send", (PyCFunction) PyNs3NdnAppFace__PythonHelper::_wrap_Send, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3NdnAppFace__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
PyNs3NdnAppFace__tp_clear(PyNs3NdnAppFace *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::ndn::AppFace *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3NdnAppFace__tp_traverse(PyNs3NdnAppFace *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3NdnAppFace__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3NdnAppFace__tp_dealloc(PyNs3NdnAppFace *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3NdnAppFace__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnAppFace__tp_richcompare (PyNs3NdnAppFace *PYBINDGEN_UNUSED(self), PyNs3NdnAppFace *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnAppFace_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnAppFace_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.AppFace",            /* tp_name */
    sizeof(PyNs3NdnAppFace),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnAppFace__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3NdnAppFace__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3NdnAppFace__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnAppFace__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnAppFace_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3NdnAppFace, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnAppFace__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnL3AggregateTracer__tp_init(PyNs3NdnL3AggregateTracer *self, PyObject *args, PyObject *kwargs)
{
    PyNs3NdnL3AggregateTracer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnL3AggregateTracer_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::ndn::L3AggregateTracer(*((PyNs3NdnL3AggregateTracer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3NdnL3AggregateTracer_InstallAll(PyNs3NdnL3AggregateTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|O!", (char **) keywords, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::L3AggregateTracer::InstallAll(file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnL3AggregateTracer_Destroy(void)
{
    PyObject *py_retval;
    
    ns3::ndn::L3AggregateTracer::Destroy();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnL3AggregateTracer_Install__0(PyNs3NdnL3AggregateTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *nodes;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"nodes", "file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#|O!", (char **) keywords, &PyNs3NodeContainer_Type, &nodes, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::L3AggregateTracer::Install(*((PyNs3NodeContainer *) nodes)->obj, file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnL3AggregateTracer_Install__1(PyNs3NdnL3AggregateTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"node", "file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#|O!", (char **) keywords, &PyNs3Node_Type, &node, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    file_std = std::string(file, file_len);
    ns3::ndn::L3AggregateTracer::Install(ns3::Ptr< ns3::Node  > (node_ptr), file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnL3AggregateTracer_Install(PyNs3NdnL3AggregateTracer *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnL3AggregateTracer_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnL3AggregateTracer_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3NdnL3AggregateTracer__copy__(PyNs3NdnL3AggregateTracer *self)
{

    PyNs3NdnL3AggregateTracer *py_copy;
    py_copy = PyObject_New(PyNs3NdnL3AggregateTracer, &PyNs3NdnL3AggregateTracer_Type);
    
    py_copy->obj = new ns3::ndn::L3AggregateTracer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnL3AggregateTracer_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3NdnL3AggregateTracer_InstallAll, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Destroy", (PyCFunction) _wrap_PyNs3NdnL3AggregateTracer_Destroy, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnL3AggregateTracer_Install, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnL3AggregateTracer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnL3AggregateTracer__tp_dealloc(PyNs3NdnL3AggregateTracer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::L3AggregateTracer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnL3AggregateTracer__tp_richcompare (PyNs3NdnL3AggregateTracer *PYBINDGEN_UNUSED(self), PyNs3NdnL3AggregateTracer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnL3AggregateTracer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnL3AggregateTracer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.L3AggregateTracer",            /* tp_name */
    sizeof(PyNs3NdnL3AggregateTracer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnL3AggregateTracer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnL3AggregateTracer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnL3AggregateTracer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnL3AggregateTracer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3NdnL3RateTracer__tp_init(PyNs3NdnL3RateTracer *self, PyObject *args, PyObject *kwargs)
{
    PyNs3NdnL3RateTracer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3NdnL3RateTracer_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::ndn::L3RateTracer(*((PyNs3NdnL3RateTracer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3NdnL3RateTracer_InstallAll(PyNs3NdnL3RateTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|O!", (char **) keywords, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::L3RateTracer::InstallAll(file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3NdnL3RateTracer_Destroy(void)
{
    PyObject *py_retval;
    
    ns3::ndn::L3RateTracer::Destroy();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}



PyObject *
_wrap_PyNs3NdnL3RateTracer_Install__0(PyNs3NdnL3RateTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3NodeContainer *nodes;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"nodes", "file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#|O!", (char **) keywords, &PyNs3NodeContainer_Type, &nodes, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::ndn::L3RateTracer::Install(*((PyNs3NodeContainer *) nodes)->obj, file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
_wrap_PyNs3NdnL3RateTracer_Install__1(PyNs3NdnL3RateTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyObject *py_retval;
    PyNs3Node *node;
    ns3::Node *node_ptr;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"node", "file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#|O!", (char **) keywords, &PyNs3Node_Type, &node, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return NULL;
    }
    node_ptr = (node ? node->obj : NULL);
    file_std = std::string(file, file_len);
    ns3::ndn::L3RateTracer::Install(ns3::Ptr< ns3::Node  > (node_ptr), file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject * _wrap_PyNs3NdnL3RateTracer_Install(PyNs3NdnL3RateTracer *self, PyObject *args, PyObject *kwargs)
{
    PyObject * retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3NdnL3RateTracer_Install__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3NdnL3RateTracer_Install__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return NULL;
}


static PyObject*
_wrap_PyNs3NdnL3RateTracer__copy__(PyNs3NdnL3RateTracer *self)
{

    PyNs3NdnL3RateTracer *py_copy;
    py_copy = PyObject_New(PyNs3NdnL3RateTracer, &PyNs3NdnL3RateTracer_Type);
    
    py_copy->obj = new ns3::ndn::L3RateTracer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3NdnL3RateTracer_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3NdnL3RateTracer_InstallAll, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Destroy", (PyCFunction) _wrap_PyNs3NdnL3RateTracer_Destroy, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Install", (PyCFunction) _wrap_PyNs3NdnL3RateTracer_Install, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3NdnL3RateTracer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3NdnL3RateTracer__tp_dealloc(PyNs3NdnL3RateTracer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::ndn::L3RateTracer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3NdnL3RateTracer__tp_richcompare (PyNs3NdnL3RateTracer *PYBINDGEN_UNUSED(self), PyNs3NdnL3RateTracer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3NdnL3RateTracer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3NdnL3RateTracer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.L3RateTracer",            /* tp_name */
    sizeof(PyNs3NdnL3RateTracer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3NdnL3RateTracer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3NdnL3RateTracer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3NdnL3RateTracer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3NdnL3RateTracer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__vector__lt___char___gt__Iter__tp_clear(Pystd__vector__lt___char___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___char___gt__Iter__tp_traverse(Pystd__vector__lt___char___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___char___gt____tp_dealloc(Pystd__vector__lt___char___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___char___gt__Iter__tp_dealloc(Pystd__vector__lt___char___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___char___gt____tp_iter(Pystd__vector__lt___char___gt__ *self)
{
    Pystd__vector__lt___char___gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___char___gt__Iter, &Pystd__vector__lt___char___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< char >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___char___gt__Iter__tp_iter(Pystd__vector__lt___char___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___char___gt__Iter__tp_iternext(Pystd__vector__lt___char___gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< char >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "c", (int) (*iter));
    return py_retval;
}

int _wrap_convert_py2c__char(PyObject *value, char *address)
{
    PyObject *py_retval;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "c", &*address)) {
        Py_DECREF(py_retval);
        return 0;
    }
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___char___gt__(PyObject *arg, std::vector< char > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___char___gt___Type)) {
        *container = *((Pystd__vector__lt___char___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            char item;
            if (!_wrap_convert_py2c__char(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___char___gt__ instance, or a list of char");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___char___gt____tp_init(Pystd__vector__lt___char___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< char >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___char___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___char___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Std__vector__lt___char___gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___char___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___char___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___char___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___char___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___char___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Std__vector__lt___char___gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___char___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___char___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___char___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___char___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___char___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___char___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_clear(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_traverse(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt____tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_dealloc(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt____tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__ *self)
{
    Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter *iter = PyObject_GC_New(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter, &Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::vector< ns3::Ptr< ns3::ndn::Face > >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_iter(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_iternext(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter *self)
{
    PyObject *py_retval;
    std::vector< ns3::Ptr< ns3::ndn::Face > >::iterator iter;
    PyNs3NdnFace *py_Face;
    std::map<void*, PyObject*>::const_iterator wrapper_lookup_iter;
    PyTypeObject *wrapper_type = 0;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    if (!(const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter))))) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    if (typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter))))).name() == typeid(PyNs3NdnFace__PythonHelper).name())
    {
        py_Face = reinterpret_cast< PyNs3NdnFace* >(reinterpret_cast< PyNs3NdnFace__PythonHelper* >(const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter))))->m_pyself);
        py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter)));
        Py_INCREF(py_Face);
    } else {
        wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter))));
        if (wrapper_lookup_iter == PyNs3ObjectBase_wrapper_registry.end()) {
            py_Face = NULL;
        } else {
            py_Face = (PyNs3NdnFace *) wrapper_lookup_iter->second;
            Py_INCREF(py_Face);
        }
    
        if (py_Face == NULL) {
            wrapper_type = PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.lookup_wrapper(typeid((*const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter))))), &PyNs3NdnFace_Type);
            py_Face = PyObject_GC_New(PyNs3NdnFace, wrapper_type);
            py_Face->inst_dict = NULL;
    
            py_Face->inst_dict = NULL;
            py_Face->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
            const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter)))->Ref();
            py_Face->obj = const_cast<ns3::ndn::Face *> (ns3::PeekPointer ((*iter)));
            PyNs3ObjectBase_wrapper_registry[(void *) py_Face->obj] = (PyObject *) py_Face;
        }
    }
    py_retval = Py_BuildValue((char *) "N", py_Face);
    return py_retval;
}

int _wrap_convert_py2c__ns3__Ptr__lt___ns3__ndn__Face___gt__(PyObject *value, ns3::Ptr< ns3::ndn::Face > *address)
{
    PyObject *py_retval;
    PyNs3NdnFace *tmp_Face;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3NdnFace_Type, &tmp_Face)) {
        Py_DECREF(py_retval);
        return 0;
    }
    // dangerous!
    *address = ns3::Ptr< ns3::ndn::Face  > (tmp_Face->obj);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__(PyObject *arg, std::vector< ns3::Ptr< ns3::ndn::Face > > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt___Type)) {
        *container = *((Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::Ptr< ns3::ndn::Face > item;
            if (!_wrap_convert_py2c__ns3__Ptr__lt___ns3__ndn__Face___gt__(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__ instance, or a list of ns3::Ptr< ns3::ndn::Face >");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt____tp_init(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::vector< ns3::Ptr< ns3::ndn::Face > >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.ndn.Std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter",            /* tp_name */
    sizeof(Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */









#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_ndn_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM.ndn",
    NULL,
    -1,
    ndnSIM_ndn_functions,
};
#endif

static PyObject *
initndnSIM_ndn(void)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_ndn_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM.ndn", ndnSIM_ndn_functions, NULL);
    #endif
    if (m == NULL) {
        return NULL;
    }
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::App), &PyNs3NdnApp_Type);
    /* Register the 'ns3::ndn::App' class */
    PyNs3NdnApp_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3NdnApp_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "App", (PyObject *) &PyNs3NdnApp_Type);
    PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____typeid_map.register_wrapper(typeid(ns3::ndn::AppDelayTracer), &PyNs3NdnAppDelayTracer_Type);
    /* Register the 'ns3::ndn::AppDelayTracer' class */
    PyNs3NdnAppDelayTracer_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type;
    if (PyType_Ready(&PyNs3NdnAppDelayTracer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "AppDelayTracer", (PyObject *) &PyNs3NdnAppDelayTracer_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnAppHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnAppHelper_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::AppHelper' class */
    if (PyType_Ready(&PyNs3NdnAppHelper_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "AppHelper", (PyObject *) &PyNs3NdnAppHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnBlob_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnBlob_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::Blob' class */
    if (PyType_Ready(&PyNs3NdnBlob_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Blob", (PyObject *) &PyNs3NdnBlob_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::ContentStore), &PyNs3NdnContentStore_Type);
    /* Register the 'ns3::ndn::ContentStore' class */
    PyNs3NdnContentStore_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnContentStore_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ContentStore", (PyObject *) &PyNs3NdnContentStore_Type);
    PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____typeid_map.register_wrapper(typeid(ns3::ndn::CsTracer), &PyNs3NdnCsTracer_Type);
    /* Register the 'ns3::ndn::CsTracer' class */
    PyNs3NdnCsTracer_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type;
    if (PyType_Ready(&PyNs3NdnCsTracer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "CsTracer", (PyObject *) &PyNs3NdnCsTracer_Type);
    PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.register_wrapper(typeid(ns3::ndn::Data), &PyNs3NdnData_Type);
    /* Register the 'ns3::ndn::Data' class */
    PyNs3NdnData_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type;
    if (PyType_Ready(&PyNs3NdnData_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Data", (PyObject *) &PyNs3NdnData_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnDataException_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnDataException_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::DataException' class */
    if (PyType_Ready(&PyNs3NdnDataException_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "DataException", (PyObject *) &PyNs3NdnDataException_Type);
    PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____typeid_map.register_wrapper(typeid(ns3::ndn::Exclude), &PyNs3NdnExclude_Type);
    /* Register the 'ns3::ndn::Exclude' class */
    PyNs3NdnExclude_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type;
    if (PyType_Ready(&PyNs3NdnExclude_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Exclude", (PyObject *) &PyNs3NdnExclude_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::Face), &PyNs3NdnFace_Type);
    /* Register the 'ns3::ndn::Face' class */
    PyNs3NdnFace_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnFace_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Face", (PyObject *) &PyNs3NdnFace_Type);
    PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map.register_wrapper(typeid(ns3::ndn::FaceContainer), &PyNs3NdnFaceContainer_Type);
    /* Register the 'ns3::ndn::FaceContainer' class */
    PyNs3NdnFaceContainer_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type;
    if (PyType_Ready(&PyNs3NdnFaceContainer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "FaceContainer", (PyObject *) &PyNs3NdnFaceContainer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::Fib), &PyNs3NdnFib_Type);
    /* Register the 'ns3::ndn::Fib' class */
    PyNs3NdnFib_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnFib_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Fib", (PyObject *) &PyNs3NdnFib_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::ForwardingStrategy), &PyNs3NdnForwardingStrategy_Type);
    /* Register the 'ns3::ndn::ForwardingStrategy' class */
    PyNs3NdnForwardingStrategy_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnForwardingStrategy_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ForwardingStrategy", (PyObject *) &PyNs3NdnForwardingStrategy_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnGlobalRoutingHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnGlobalRoutingHelper_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::GlobalRoutingHelper' class */
    if (PyType_Ready(&PyNs3NdnGlobalRoutingHelper_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "GlobalRoutingHelper", (PyObject *) &PyNs3NdnGlobalRoutingHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnHeaderHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnHeaderHelper_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::HeaderHelper' class */
    if (PyType_Ready(&PyNs3NdnHeaderHelper_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "HeaderHelper", (PyObject *) &PyNs3NdnHeaderHelper_Type);
    PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map.register_wrapper(typeid(ns3::ndn::Interest), &PyNs3NdnInterest_Type);
    /* Register the 'ns3::ndn::Interest' class */
    PyNs3NdnInterest_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt___Type;
    if (PyType_Ready(&PyNs3NdnInterest_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Interest", (PyObject *) &PyNs3NdnInterest_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnInterestException_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnInterestException_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::InterestException' class */
    if (PyType_Ready(&PyNs3NdnInterestException_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "InterestException", (PyObject *) &PyNs3NdnInterestException_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnIpFacesHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnIpFacesHelper_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::IpFacesHelper' class */
    if (PyType_Ready(&PyNs3NdnIpFacesHelper_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "IpFacesHelper", (PyObject *) &PyNs3NdnIpFacesHelper_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::L3Protocol), &PyNs3NdnL3Protocol_Type);
    /* Register the 'ns3::ndn::L3Protocol' class */
    
    PyNs3NdnL3ProtocolMeta_Type.tp_base = Py_TYPE(&PyNs3Object_Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3NdnL3ProtocolMeta_Type.tp_traverse = Py_TYPE(&PyNs3Object_Type)->tp_traverse;
    PyNs3NdnL3ProtocolMeta_Type.tp_clear = Py_TYPE(&PyNs3Object_Type)->tp_clear;
    PyNs3NdnL3ProtocolMeta_Type.tp_is_gc = Py_TYPE(&PyNs3Object_Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3NdnL3ProtocolMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3NdnL3ProtocolMeta_Type);
    
    PyNs3NdnL3Protocol_Type.tp_base = &PyNs3Object_Type;
    Py_TYPE(&PyNs3NdnL3Protocol_Type) = &PyNs3NdnL3ProtocolMeta_Type;
    if (PyType_Ready(&PyNs3NdnL3Protocol_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "L3Protocol", (PyObject *) &PyNs3NdnL3Protocol_Type);
    PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map.register_wrapper(typeid(ns3::ndn::L3Tracer), &PyNs3NdnL3Tracer_Type);
    /* Register the 'ns3::ndn::L3Tracer' class */
    PyNs3NdnL3Tracer_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type;
    if (PyType_Ready(&PyNs3NdnL3Tracer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "L3Tracer", (PyObject *) &PyNs3NdnL3Tracer_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::Limits), &PyNs3NdnLimits_Type);
    /* Register the 'ns3::ndn::Limits' class */
    PyNs3NdnLimits_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnLimits_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Limits", (PyObject *) &PyNs3NdnLimits_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnLinkControlHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnLinkControlHelper_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::LinkControlHelper' class */
    if (PyType_Ready(&PyNs3NdnLinkControlHelper_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "LinkControlHelper", (PyObject *) &PyNs3NdnLinkControlHelper_Type);
    PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.register_wrapper(typeid(ns3::ndn::Name), &PyNs3NdnName_Type);
    /* Register the 'ns3::ndn::Name' class */
    
    PyNs3NdnNameMeta_Type.tp_base = Py_TYPE(&PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type);
    /* Some fields need to be manually inheritted from the parent metaclass */
    PyNs3NdnNameMeta_Type.tp_traverse = Py_TYPE(&PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type)->tp_traverse;
    PyNs3NdnNameMeta_Type.tp_clear = Py_TYPE(&PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type)->tp_clear;
    PyNs3NdnNameMeta_Type.tp_is_gc = Py_TYPE(&PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type)->tp_is_gc;
    /* PyType tp_setattro is too restrictive */
    PyNs3NdnNameMeta_Type.tp_setattro = PyObject_GenericSetAttr;
    PyType_Ready(&PyNs3NdnNameMeta_Type);
    
    PyNs3NdnName_Type.tp_base = &PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type;
    Py_TYPE(&PyNs3NdnName_Type) = &PyNs3NdnNameMeta_Type;
    if (PyType_Ready(&PyNs3NdnName_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Name", (PyObject *) &PyNs3NdnName_Type);
    PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map.register_wrapper(typeid(ns3::ndn::NameChecker), &PyNs3NdnNameChecker_Type);
    /* Register the 'ns3::ndn::NameChecker' class */
    PyNs3NdnNameChecker_Type.tp_base = &PyNs3AttributeChecker_Type;
    if (PyType_Ready(&PyNs3NdnNameChecker_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "NameChecker", (PyObject *) &PyNs3NdnNameChecker_Type);
    PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map.register_wrapper(typeid(ns3::ndn::NameValue), &PyNs3NdnNameValue_Type);
    /* Register the 'ns3::ndn::NameValue' class */
    PyNs3NdnNameValue_Type.tp_base = &PyNs3AttributeValue_Type;
    if (PyType_Ready(&PyNs3NdnNameValue_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "NameValue", (PyObject *) &PyNs3NdnNameValue_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::NetDeviceFace), &PyNs3NdnNetDeviceFace_Type);
    /* Register the 'ns3::ndn::NetDeviceFace' class */
    PyNs3NdnNetDeviceFace_Type.tp_base = &PyNs3NdnFace_Type;
    if (PyType_Ready(&PyNs3NdnNetDeviceFace_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "NetDeviceFace", (PyObject *) &PyNs3NdnNetDeviceFace_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::Pit), &PyNs3NdnPit_Type);
    /* Register the 'ns3::ndn::Pit' class */
    PyNs3NdnPit_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnPit_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Pit", (PyObject *) &PyNs3NdnPit_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::RttEstimator), &PyNs3NdnRttEstimator_Type);
    /* Register the 'ns3::ndn::RttEstimator' class */
    PyNs3NdnRttEstimator_Type.tp_base = &PyNs3Object_Type;
    if (PyType_Ready(&PyNs3NdnRttEstimator_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RttEstimator", (PyObject *) &PyNs3NdnRttEstimator_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnRttHistory_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnRttHistory_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::RttHistory' class */
    if (PyType_Ready(&PyNs3NdnRttHistory_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "RttHistory", (PyObject *) &PyNs3NdnRttHistory_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnStackHelper_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnStackHelper_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::StackHelper' class */
    if (PyType_Ready(&PyNs3NdnStackHelper_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "StackHelper", (PyObject *) &PyNs3NdnStackHelper_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnUnknownHeaderException_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnUnknownHeaderException_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::UnknownHeaderException' class */
    if (PyType_Ready(&PyNs3NdnUnknownHeaderException_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "UnknownHeaderException", (PyObject *) &PyNs3NdnUnknownHeaderException_Type);
    PyModule_AddObject(m, (char *) "_PyNs3NdnWire_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3NdnWire_wrapper_registry, NULL));
    /* Register the 'ns3::ndn::Wire' class */
    if (PyType_Ready(&PyNs3NdnWire_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Wire", (PyObject *) &PyNs3NdnWire_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::ApiFace), &PyNs3NdnApiFace_Type);
    /* Register the 'ns3::ndn::ApiFace' class */
    PyNs3NdnApiFace_Type.tp_base = &PyNs3NdnFace_Type;
    if (PyType_Ready(&PyNs3NdnApiFace_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "ApiFace", (PyObject *) &PyNs3NdnApiFace_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::ndn::AppFace), &PyNs3NdnAppFace_Type);
    /* Register the 'ns3::ndn::AppFace' class */
    PyNs3NdnAppFace_Type.tp_base = &PyNs3NdnFace_Type;
    if (PyType_Ready(&PyNs3NdnAppFace_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "AppFace", (PyObject *) &PyNs3NdnAppFace_Type);
    PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map.register_wrapper(typeid(ns3::ndn::L3AggregateTracer), &PyNs3NdnL3AggregateTracer_Type);
    /* Register the 'ns3::ndn::L3AggregateTracer' class */
    PyNs3NdnL3AggregateTracer_Type.tp_base = &PyNs3NdnL3Tracer_Type;
    if (PyType_Ready(&PyNs3NdnL3AggregateTracer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "L3AggregateTracer", (PyObject *) &PyNs3NdnL3AggregateTracer_Type);
    PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map.register_wrapper(typeid(ns3::ndn::L3RateTracer), &PyNs3NdnL3RateTracer_Type);
    /* Register the 'ns3::ndn::L3RateTracer' class */
    PyNs3NdnL3RateTracer_Type.tp_base = &PyNs3NdnL3Tracer_Type;
    if (PyType_Ready(&PyNs3NdnL3RateTracer_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "L3RateTracer", (PyObject *) &PyNs3NdnL3RateTracer_Type);
    /* Register the 'std::vector< char >' class */
    if (PyType_Ready(&Pystd__vector__lt___char___gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___char___gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___char___gt__", (PyObject *) &Pystd__vector__lt___char___gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___char___gt__Iter", (PyObject *) &Pystd__vector__lt___char___gt__Iter_Type);
    /* Register the 'std::vector< ns3::Ptr< ns3::ndn::Face > >' class */
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt___Type)) {
        return NULL;
    }
    if (PyType_Ready(&Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter_Type)) {
        return NULL;
    }
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt___Type);
    PyModule_AddObject(m, (char *) "Std__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter", (PyObject *) &Pystd__vector__lt___ns3__Ptr__lt___ns3__ndn__Face___gt_____gt__Iter_Type);
    PyModule_AddObject(m, (char *) "DataHeader", (PyObject *) &PyNs3NdnData_Type);
    PyModule_AddObject(m, (char *) "TimeInterval", (PyObject *) &PyNs3Time_Type);
    PyModule_AddObject(m, (char *) "NameComponents", (PyObject *) &PyNs3NdnName_Type);
    PyModule_AddObject(m, (char *) "InterestHeader", (PyObject *) &PyNs3NdnInterest_Type);
    {
        PyObject *tmp_value;
         // ns3::ndn::Face::APPLICATION
        tmp_value = PyLong_FromLong(ns3::ndn::Face::APPLICATION);
        PyDict_SetItemString((PyObject*) PyNs3NdnFace_Type.tp_dict, "APPLICATION", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ndn::HeaderHelper::INTEREST_CCNB
        tmp_value = PyLong_FromLong(ns3::ndn::HeaderHelper::INTEREST_CCNB);
        PyDict_SetItemString((PyObject*) PyNs3NdnHeaderHelper_Type.tp_dict, "INTEREST_CCNB", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::HeaderHelper::CONTENT_OBJECT_CCNB
        tmp_value = PyLong_FromLong(ns3::ndn::HeaderHelper::CONTENT_OBJECT_CCNB);
        PyDict_SetItemString((PyObject*) PyNs3NdnHeaderHelper_Type.tp_dict, "CONTENT_OBJECT_CCNB", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::HeaderHelper::INTEREST_NDNSIM
        tmp_value = PyLong_FromLong(ns3::ndn::HeaderHelper::INTEREST_NDNSIM);
        PyDict_SetItemString((PyObject*) PyNs3NdnHeaderHelper_Type.tp_dict, "INTEREST_NDNSIM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::HeaderHelper::CONTENT_OBJECT_NDNSIM
        tmp_value = PyLong_FromLong(ns3::ndn::HeaderHelper::CONTENT_OBJECT_NDNSIM);
        PyDict_SetItemString((PyObject*) PyNs3NdnHeaderHelper_Type.tp_dict, "CONTENT_OBJECT_NDNSIM", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ndn::Interest::NORMAL_INTEREST
        tmp_value = PyLong_FromLong(ns3::ndn::Interest::NORMAL_INTEREST);
        PyDict_SetItemString((PyObject*) PyNs3NdnInterest_Type.tp_dict, "NORMAL_INTEREST", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::Interest::NACK_LOOP
        tmp_value = PyLong_FromLong(ns3::ndn::Interest::NACK_LOOP);
        PyDict_SetItemString((PyObject*) PyNs3NdnInterest_Type.tp_dict, "NACK_LOOP", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::Interest::NACK_CONGESTION
        tmp_value = PyLong_FromLong(ns3::ndn::Interest::NACK_CONGESTION);
        PyDict_SetItemString((PyObject*) PyNs3NdnInterest_Type.tp_dict, "NACK_CONGESTION", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::Interest::NACK_GIVEUP_PIT
        tmp_value = PyLong_FromLong(ns3::ndn::Interest::NACK_GIVEUP_PIT);
        PyDict_SetItemString((PyObject*) PyNs3NdnInterest_Type.tp_dict, "NACK_GIVEUP_PIT", tmp_value);
        Py_DECREF(tmp_value);
    }
    {
        PyObject *tmp_value;
         // ns3::ndn::Wire::WIRE_FORMAT_DEFAULT
        tmp_value = PyLong_FromLong(ns3::ndn::Wire::WIRE_FORMAT_DEFAULT);
        PyDict_SetItemString((PyObject*) PyNs3NdnWire_Type.tp_dict, "WIRE_FORMAT_DEFAULT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::Wire::WIRE_FORMAT_AUTODETECT
        tmp_value = PyLong_FromLong(ns3::ndn::Wire::WIRE_FORMAT_AUTODETECT);
        PyDict_SetItemString((PyObject*) PyNs3NdnWire_Type.tp_dict, "WIRE_FORMAT_AUTODETECT", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::Wire::WIRE_FORMAT_NDNSIM
        tmp_value = PyLong_FromLong(ns3::ndn::Wire::WIRE_FORMAT_NDNSIM);
        PyDict_SetItemString((PyObject*) PyNs3NdnWire_Type.tp_dict, "WIRE_FORMAT_NDNSIM", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::ndn::Wire::WIRE_FORMAT_CCNB
        tmp_value = PyLong_FromLong(ns3::ndn::Wire::WIRE_FORMAT_CCNB);
        PyDict_SetItemString((PyObject*) PyNs3NdnWire_Type.tp_dict, "WIRE_FORMAT_CCNB", tmp_value);
        Py_DECREF(tmp_value);
    }
    submodule = initndnSIM_ndn_cs();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "cs", submodule);
    submodule = initndnSIM_ndn_fib();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "fib", submodule);
    submodule = initndnSIM_ndn_fw();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "fw", submodule);
    submodule = initndnSIM_ndn_name();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "name", submodule);
    submodule = initndnSIM_ndn_pit();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "pit", submodule);
    submodule = initndnSIM_ndn_time();
    if (submodule == NULL) {
        return NULL;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "time", submodule);
    return m;
}
static PyMethodDef ndnSIM_functions[] = {
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


PyTypeObject *_PyNs3Address_Type;
std::map<void*, PyObject*> *_PyNs3Address_wrapper_registry;


PyTypeObject *_PyNs3ApplicationContainer_Type;
std::map<void*, PyObject*> *_PyNs3ApplicationContainer_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionList_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionList_wrapper_registry;


PyTypeObject *_PyNs3AttributeConstructionListItem_Type;
std::map<void*, PyObject*> *_PyNs3AttributeConstructionListItem_wrapper_registry;


PyTypeObject *_PyNs3Buffer_Type;
std::map<void*, PyObject*> *_PyNs3Buffer_wrapper_registry;


PyTypeObject *_PyNs3BufferIterator_Type;
std::map<void*, PyObject*> *_PyNs3BufferIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3ByteTagList_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagList_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIterator_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIterator_wrapper_registry;


PyTypeObject *_PyNs3ByteTagListIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3ByteTagListIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3CallbackBase_Type;
std::map<void*, PyObject*> *_PyNs3CallbackBase_wrapper_registry;


PyTypeObject *_PyNs3EventId_Type;
std::map<void*, PyObject*> *_PyNs3EventId_wrapper_registry;


PyTypeObject *_PyNs3Hasher_Type;
std::map<void*, PyObject*> *_PyNs3Hasher_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv4Mask_Type;
std::map<void*, PyObject*> *_PyNs3Ipv4Mask_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Address_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Address_wrapper_registry;


PyTypeObject *_PyNs3Ipv6Prefix_Type;
std::map<void*, PyObject*> *_PyNs3Ipv6Prefix_wrapper_registry;


PyTypeObject *_PyNs3NetDeviceContainer_Type;
std::map<void*, PyObject*> *_PyNs3NetDeviceContainer_wrapper_registry;


PyTypeObject *_PyNs3NodeContainer_Type;
std::map<void*, PyObject*> *_PyNs3NodeContainer_wrapper_registry;


PyTypeObject *_PyNs3ObjectBase_Type;
std::map<void*, PyObject*> *_PyNs3ObjectBase_wrapper_registry;


PyTypeObject *_PyNs3ObjectDeleter_Type;
std::map<void*, PyObject*> *_PyNs3ObjectDeleter_wrapper_registry;


PyTypeObject *_PyNs3ObjectFactory_Type;
std::map<void*, PyObject*> *_PyNs3ObjectFactory_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadata_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadata_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItem_wrapper_registry;


PyTypeObject *_PyNs3PacketMetadataItemIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketMetadataItemIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIterator_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIterator_wrapper_registry;


PyTypeObject *_PyNs3PacketTagIteratorItem_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagIteratorItem_wrapper_registry;


PyTypeObject *_PyNs3PacketTagList_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagList_wrapper_registry;


PyTypeObject *_PyNs3PacketTagListTagData_Type;
std::map<void*, PyObject*> *_PyNs3PacketTagListTagData_wrapper_registry;


PyTypeObject *_PyNs3RandomVariable_Type;
std::map<void*, PyObject*> *_PyNs3RandomVariable_wrapper_registry;


PyTypeObject *_PyNs3RngSeedManager_Type;
std::map<void*, PyObject*> *_PyNs3RngSeedManager_wrapper_registry;


PyTypeObject *_PyNs3SequenceNumber32_Type;
std::map<void*, PyObject*> *_PyNs3SequenceNumber32_wrapper_registry;


PyTypeObject *_PyNs3SequentialVariable_Type;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map;


PyTypeObject *_PyNs3Simulator_Type;
std::map<void*, PyObject*> *_PyNs3Simulator_wrapper_registry;


PyTypeObject *_PyNs3Tag_Type;


PyTypeObject *_PyNs3TagBuffer_Type;
std::map<void*, PyObject*> *_PyNs3TagBuffer_wrapper_registry;


PyTypeObject *_PyNs3TriangularVariable_Type;


PyTypeObject *_PyNs3TypeId_Type;
std::map<void*, PyObject*> *_PyNs3TypeId_wrapper_registry;


PyTypeObject *_PyNs3TypeIdAttributeInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdAttributeInformation_wrapper_registry;


PyTypeObject *_PyNs3TypeIdTraceSourceInformation_Type;
std::map<void*, PyObject*> *_PyNs3TypeIdTraceSourceInformation_wrapper_registry;


PyTypeObject *_PyNs3UniformVariable_Type;


PyTypeObject *_PyNs3WeibullVariable_Type;


PyTypeObject *_PyNs3ZetaVariable_Type;


PyTypeObject *_PyNs3ZipfVariable_Type;


PyTypeObject *_PyNs3Empty_Type;
std::map<void*, PyObject*> *_PyNs3Empty_wrapper_registry;


PyTypeObject *_PyNs3Int64x64_t_Type;
std::map<void*, PyObject*> *_PyNs3Int64x64_t_wrapper_registry;


PyTypeObject *_PyNs3Chunk_Type;


PyTypeObject *_PyNs3ConstantVariable_Type;


PyTypeObject *_PyNs3DeterministicVariable_Type;


PyTypeObject *_PyNs3EmpiricalVariable_Type;


PyTypeObject *_PyNs3ErlangVariable_Type;


PyTypeObject *_PyNs3ExponentialVariable_Type;


PyTypeObject *_PyNs3GammaVariable_Type;


PyTypeObject *_PyNs3Header_Type;


PyTypeObject *_PyNs3IntEmpiricalVariable_Type;


PyTypeObject *_PyNs3LogNormalVariable_Type;


PyTypeObject *_PyNs3NormalVariable_Type;


PyTypeObject *_PyNs3Object_Type;


PyTypeObject *_PyNs3ObjectAggregateIterator_Type;
std::map<void*, PyObject*> *_PyNs3ObjectAggregateIterator_wrapper_registry;


PyTypeObject *_PyNs3ParetoVariable_Type;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map;


PyTypeObject *_PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt___Type;
pybindgen::TypeMap *_PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map;


PyTypeObject *_PyNs3Time_Type;
std::map<void*, PyObject*> *_PyNs3Time_wrapper_registry;


PyTypeObject *_PyNs3TopologyReader_Type;


PyTypeObject *_PyNs3TopologyReaderLink_Type;
std::map<void*, PyObject*> *_PyNs3TopologyReaderLink_wrapper_registry;


PyTypeObject *_PyNs3TraceSourceAccessor_Type;


PyTypeObject *_PyNs3Trailer_Type;


PyTypeObject *_PyNs3Application_Type;


PyTypeObject *_PyNs3AttributeAccessor_Type;


PyTypeObject *_PyNs3AttributeChecker_Type;


PyTypeObject *_PyNs3AttributeValue_Type;


PyTypeObject *_PyNs3BooleanChecker_Type;


PyTypeObject *_PyNs3BooleanValue_Type;


PyTypeObject *_PyNs3CallbackChecker_Type;


PyTypeObject *_PyNs3CallbackImplBase_Type;


PyTypeObject *_PyNs3CallbackValue_Type;


PyTypeObject *_PyNs3DoubleValue_Type;


PyTypeObject *_PyNs3EmptyAttributeValue_Type;


PyTypeObject *_PyNs3EnumChecker_Type;


PyTypeObject *_PyNs3EnumValue_Type;


PyTypeObject *_PyNs3EventImpl_Type;


PyTypeObject *_PyNs3IntegerValue_Type;


PyTypeObject *_PyNs3Ipv4AddressChecker_Type;


PyTypeObject *_PyNs3Ipv4AddressValue_Type;


PyTypeObject *_PyNs3Ipv4MaskChecker_Type;


PyTypeObject *_PyNs3Ipv4MaskValue_Type;


PyTypeObject *_PyNs3Ipv6AddressChecker_Type;


PyTypeObject *_PyNs3Ipv6AddressValue_Type;


PyTypeObject *_PyNs3Ipv6PrefixChecker_Type;


PyTypeObject *_PyNs3Ipv6PrefixValue_Type;


PyTypeObject *_PyNs3NetDevice_Type;


PyTypeObject *_PyNs3NixVector_Type;


PyTypeObject *_PyNs3Node_Type;


PyTypeObject *_PyNs3ObjectFactoryChecker_Type;


PyTypeObject *_PyNs3ObjectFactoryValue_Type;


PyTypeObject *_PyNs3Packet_Type;


PyTypeObject *_PyNs3RandomVariableChecker_Type;


PyTypeObject *_PyNs3RandomVariableValue_Type;


PyTypeObject *_PyNs3TimeValue_Type;


PyTypeObject *_PyNs3TypeIdChecker_Type;


PyTypeObject *_PyNs3TypeIdValue_Type;


PyTypeObject *_PyNs3UintegerValue_Type;


PyTypeObject *_PyNs3AddressChecker_Type;


PyTypeObject *_PyNs3AddressValue_Type;


std::map<void*, PyObject*> PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry;


static int
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init__0(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init__1(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status >(*((PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init__2(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    ns3::ndn::fib::FaceMetric::Status  v;
    const char *keywords[] = {"v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &v)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status >(v);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[3] = {0,};
    retval = _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    retval = _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init__2(self, args, kwargs, &exceptions[2]);
    if (!exceptions[2]) {
        Py_DECREF(exceptions[0]);
        Py_DECREF(exceptions[1]);
        return retval;
    }
    error_list = PyList_New(3);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyList_SET_ITEM(error_list, 2, PyObject_Str(exceptions[2]));
    Py_DECREF(exceptions[2]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Set(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    ns3::ndn::fib::FaceMetric::Status  v;
    const char *keywords[] = {"v", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &v)) {
        return NULL;
    }
    self->obj->Set(v);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Disconnect(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CallbackBase *cb;
    const char *path;
    Py_ssize_t path_len;
    const char *keywords[] = {"cb", "path", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#", (char **) keywords, &PyNs3CallbackBase_Type, &cb, &path, &path_len)) {
        return NULL;
    }
    self->obj->Disconnect(*((PyNs3CallbackBase *) cb)->obj, std::string(path, path_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Get(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self)
{
    PyObject *py_retval;
    ns3::ndn::fib::FaceMetric::Status retval;
    
    retval = self->obj->Get();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}


PyObject *
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_ConnectWithoutContext(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    self->obj->ConnectWithoutContext(*((PyNs3CallbackBase *) cb)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_DisconnectWithoutContext(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CallbackBase *cb;
    const char *keywords[] = {"cb", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CallbackBase_Type, &cb)) {
        return NULL;
    }
    self->obj->DisconnectWithoutContext(*((PyNs3CallbackBase *) cb)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Connect(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3CallbackBase *cb;
    const char *path;
    Py_ssize_t path_len;
    const char *keywords[] = {"cb", "path", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!s#", (char **) keywords, &PyNs3CallbackBase_Type, &cb, &path, &path_len)) {
        return NULL;
    }
    self->obj->Connect(*((PyNs3CallbackBase *) cb)->obj, std::string(path, path_len));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__copy__(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self)
{

    PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *py_copy;
    py_copy = PyObject_New(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus, &PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type);
    py_copy->obj = new ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_methods[] = {
    {(char *) "Set", (PyCFunction) _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Set, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Disconnect", (PyCFunction) _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Disconnect, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Get", (PyCFunction) _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Get, METH_NOARGS, NULL },
    {(char *) "ConnectWithoutContext", (PyCFunction) _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_ConnectWithoutContext, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "DisconnectWithoutContext", (PyCFunction) _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_DisconnectWithoutContext, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Connect", (PyCFunction) _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Connect, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_dealloc(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry.end()) {
        PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
        ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status > *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_richcompare (PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *PYBINDGEN_UNUSED(self), PyNs3TracedValue__Ns3NdnFibFaceMetricStatus *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.TracedValue__Ns3NdnFibFaceMetricStatus",            /* tp_name */
    sizeof(PyNs3TracedValue__Ns3NdnFibFaceMetricStatus),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_init__0(PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_init__1(PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> >(*((PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_init(PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____copy__(PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__, &PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> >(*((PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____copy__(PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__, &PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> >(*((PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____copy__(PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__, &PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> >(*((PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____copy__(PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__, &PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> >(*((PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____copy__(PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__, &PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> >(*((PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____copy__(PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__, &PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> >(*((PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____copy__(PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__, &PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> >(*((PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____copy__(PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__, &PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> >(*((PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____copy__(PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__, &PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




pybindgen::TypeMap PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map;



static int
_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_init__0(PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> >();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_init__1(PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *o;
    const char *keywords[] = {"o", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type, &o)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> >(*((PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *) o)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_init(PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Cleanup(void)
{
    PyObject *py_retval;
    
    ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> >::Cleanup();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____copy__(PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *self)
{

    PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *py_copy;
    py_copy = PyObject_New(PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__, &PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type);
    
    py_copy->obj = new ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> >(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___methods[] = {
    {(char *) "Cleanup", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Cleanup, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_dealloc(PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> > *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_richcompare (PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *PYBINDGEN_UNUSED(self), PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__ *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__",            /* tp_name */
    sizeof(PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3AnnotatedTopologyReader__tp_init(PyNs3AnnotatedTopologyReader *self, PyObject *args, PyObject *kwargs)
{
    const char *path;
    Py_ssize_t path_len;
    std::string path_std;
    double scale = 1.0e+0;
    const char *keywords[] = {"path", "scale", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|d", (char **) keywords, &path, &path_len, &scale)) {
        return -1;
    }
    path_std = std::string(path, path_len);
    self->obj = new ns3::AnnotatedTopologyReader(path_std, scale);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_AssignIpv4Addresses(PyNs3AnnotatedTopologyReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Ipv4Address *base;
    const char *keywords[] = {"base", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Ipv4Address_Type, &base)) {
        return NULL;
    }
    self->obj->AssignIpv4Addresses(*((PyNs3Ipv4Address *) base)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_SetMobilityModel(PyNs3AnnotatedTopologyReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *model;
    Py_ssize_t model_len;
    std::string model_std;
    const char *keywords[] = {"model", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &model, &model_len)) {
        return NULL;
    }
    model_std = std::string(model, model_len);
    self->obj->SetMobilityModel(model_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_GetLinks(PyNs3AnnotatedTopologyReader *self)
{
    PyObject *py_retval;
    std::list< ns3::TopologyReader::Link > retval;
    Pystd__list__lt___ns3__TopologyReader__Link___gt__ *py_std__list__lt___ns3__TopologyReader__Link___gt__;
    
    retval = self->obj->GetLinks();
    py_std__list__lt___ns3__TopologyReader__Link___gt__ = PyObject_New(Pystd__list__lt___ns3__TopologyReader__Link___gt__, &Pystd__list__lt___ns3__TopologyReader__Link___gt___Type);
    py_std__list__lt___ns3__TopologyReader__Link___gt__->obj = new std::list< ns3::TopologyReader::Link >(retval);
    py_retval = Py_BuildValue((char *) "N", py_std__list__lt___ns3__TopologyReader__Link___gt__);
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_Read(PyNs3AnnotatedTopologyReader *self)
{
    PyObject *py_retval;
    PyNs3NodeContainer *py_NodeContainer;
    
    ns3::NodeContainer retval = self->obj->Read();
    py_NodeContainer = PyObject_New(PyNs3NodeContainer, &PyNs3NodeContainer_Type);
    py_NodeContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NodeContainer->obj = new ns3::NodeContainer(retval);
    PyNs3NodeContainer_wrapper_registry[(void *) py_NodeContainer->obj] = (PyObject *) py_NodeContainer;
    py_retval = Py_BuildValue((char *) "N", py_NodeContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_SaveGraphviz(PyNs3AnnotatedTopologyReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    const char *keywords[] = {"file", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &file, &file_len)) {
        return NULL;
    }
    file_std = std::string(file, file_len);
    self->obj->SaveGraphviz(file_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_SaveTopology(PyNs3AnnotatedTopologyReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    const char *keywords[] = {"file", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &file, &file_len)) {
        return NULL;
    }
    file_std = std::string(file, file_len);
    self->obj->SaveTopology(file_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_GetNodes(PyNs3AnnotatedTopologyReader *self)
{
    PyObject *py_retval;
    PyNs3NodeContainer *py_NodeContainer;
    
    ns3::NodeContainer retval = self->obj->GetNodes();
    py_NodeContainer = PyObject_New(PyNs3NodeContainer, &PyNs3NodeContainer_Type);
    py_NodeContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NodeContainer->obj = new ns3::NodeContainer(retval);
    PyNs3NodeContainer_wrapper_registry[(void *) py_NodeContainer->obj] = (PyObject *) py_NodeContainer;
    py_retval = Py_BuildValue((char *) "N", py_NodeContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_ApplyOspfMetric(PyNs3AnnotatedTopologyReader *self)
{
    PyObject *py_retval;
    
    self->obj->ApplyOspfMetric();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3AnnotatedTopologyReader_SetBoundingBox(PyNs3AnnotatedTopologyReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    double ulx;
    double uly;
    double lrx;
    double lry;
    const char *keywords[] = {"ulx", "uly", "lrx", "lry", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "dddd", (char **) keywords, &ulx, &uly, &lrx, &lry)) {
        return NULL;
    }
    self->obj->SetBoundingBox(ulx, uly, lrx, lry);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3AnnotatedTopologyReader_methods[] = {
    {(char *) "AssignIpv4Addresses", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_AssignIpv4Addresses, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetMobilityModel", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_SetMobilityModel, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetLinks", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_GetLinks, METH_NOARGS, NULL },
    {(char *) "Read", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_Read, METH_NOARGS, NULL },
    {(char *) "SaveGraphviz", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_SaveGraphviz, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SaveTopology", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_SaveTopology, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetNodes", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_GetNodes, METH_NOARGS, NULL },
    {(char *) "ApplyOspfMetric", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_ApplyOspfMetric, METH_NOARGS, NULL },
    {(char *) "SetBoundingBox", (PyCFunction) _wrap_PyNs3AnnotatedTopologyReader_SetBoundingBox, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3AnnotatedTopologyReader__tp_dealloc(PyNs3AnnotatedTopologyReader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::AnnotatedTopologyReader *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3AnnotatedTopologyReader__tp_richcompare (PyNs3AnnotatedTopologyReader *PYBINDGEN_UNUSED(self), PyNs3AnnotatedTopologyReader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3AnnotatedTopologyReader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3AnnotatedTopologyReader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.AnnotatedTopologyReader",            /* tp_name */
    sizeof(PyNs3AnnotatedTopologyReader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3AnnotatedTopologyReader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3AnnotatedTopologyReader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3AnnotatedTopologyReader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3AnnotatedTopologyReader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




PyObject *
PyNs3CallbackBasedApp__PythonHelper::_wrap_NotifyConstructionCompleted(PyNs3CallbackBasedApp *self)
{
    PyObject *py_retval;
    PyNs3CallbackBasedApp__PythonHelper *helper = dynamic_cast< PyNs3CallbackBasedApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyConstructionCompleted of class ObjectBase is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyConstructionCompleted__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3CallbackBasedApp__PythonHelper::_wrap_StartApplication(PyNs3CallbackBasedApp *self)
{
    PyObject *py_retval;
    PyNs3CallbackBasedApp__PythonHelper *helper = dynamic_cast< PyNs3CallbackBasedApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method StartApplication of class CallbackBasedApp is protected and can only be called by a subclass");
        return NULL;
    }
    helper->StartApplication__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3CallbackBasedApp__PythonHelper::_wrap_DoInitialize(PyNs3CallbackBasedApp *self)
{
    PyObject *py_retval;
    PyNs3CallbackBasedApp__PythonHelper *helper = dynamic_cast< PyNs3CallbackBasedApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoInitialize of class Application is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoInitialize__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3CallbackBasedApp__PythonHelper::_wrap_NotifyNewAggregate(PyNs3CallbackBasedApp *self)
{
    PyObject *py_retval;
    PyNs3CallbackBasedApp__PythonHelper *helper = dynamic_cast< PyNs3CallbackBasedApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method NotifyNewAggregate of class Object is protected and can only be called by a subclass");
        return NULL;
    }
    helper->NotifyNewAggregate__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3CallbackBasedApp__PythonHelper::_wrap_StopApplication(PyNs3CallbackBasedApp *self)
{
    PyObject *py_retval;
    PyNs3CallbackBasedApp__PythonHelper *helper = dynamic_cast< PyNs3CallbackBasedApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method StopApplication of class CallbackBasedApp is protected and can only be called by a subclass");
        return NULL;
    }
    helper->StopApplication__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

PyObject *
PyNs3CallbackBasedApp__PythonHelper::_wrap_DoDispose(PyNs3CallbackBasedApp *self)
{
    PyObject *py_retval;
    PyNs3CallbackBasedApp__PythonHelper *helper = dynamic_cast< PyNs3CallbackBasedApp__PythonHelper* >(self->obj);
    
    if (helper == NULL) {
        PyErr_SetString(PyExc_TypeError, "Method DoDispose of class Application is protected and can only be called by a subclass");
        return NULL;
    }
    helper->DoDispose__parent_caller();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

void
PyNs3CallbackBasedApp__PythonHelper::StartApplication()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CallbackBasedApp *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StartApplication"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::CallbackBasedApp::StartApplication();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = (ns3::CallbackBasedApp*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StartApplication", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3CallbackBasedApp__PythonHelper::StopApplication()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::CallbackBasedApp *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "StopApplication"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::CallbackBasedApp::StopApplication();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj;
    reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = (ns3::CallbackBasedApp*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "StopApplication", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3CallbackBasedApp* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3CallbackBasedApp__PythonHelper::DoDispose()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Application *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoDispose"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Application::DoDispose();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Application* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Application* >(m_pyself)->obj = (ns3::Application*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoDispose", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3CallbackBasedApp__PythonHelper::DoInitialize()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Application *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "DoInitialize"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Application::DoInitialize();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Application* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Application* >(m_pyself)->obj = (ns3::Application*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "DoInitialize", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Application* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

ns3::TypeId
PyNs3CallbackBasedApp__PythonHelper::GetInstanceTypeId() const
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    PyNs3TypeId *tmp_TypeId;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "GetInstanceTypeId"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = const_cast< ns3::Object* >((const ns3::Object*) this);
    py_retval = PyObject_CallMethod(m_pyself, (char *) "GetInstanceTypeId", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    py_retval = Py_BuildValue((char*) "(N)", py_retval);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TypeId_Type, &tmp_TypeId)) {
        PyErr_Print();
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return ns3::Object::GetInstanceTypeId();
    }
    ns3::TypeId retval = *tmp_TypeId->obj;
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return retval;
}

void
PyNs3CallbackBasedApp__PythonHelper::NotifyNewAggregate()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::Object *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyNewAggregate"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::Object::NotifyNewAggregate();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3Object* >(m_pyself)->obj;
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = (ns3::Object*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyNewAggregate", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3Object* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}

void
PyNs3CallbackBasedApp__PythonHelper::NotifyConstructionCompleted()
{
    PyGILState_STATE __py_gil_state;
    PyObject *py_method;
    ns3::ObjectBase *self_obj_before;
    PyObject *py_retval;
    
    __py_gil_state = (PyEval_ThreadsInitialized() ? PyGILState_Ensure() : (PyGILState_STATE) 0);
    py_method = PyObject_GetAttrString(m_pyself, (char *) "NotifyConstructionCompleted"); PyErr_Clear();
    if (py_method == NULL || Py_TYPE(py_method) == &PyCFunction_Type) {
        ns3::ObjectBase::NotifyConstructionCompleted();
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    self_obj_before = reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj;
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = (ns3::ObjectBase*) this;
    py_retval = PyObject_CallMethod(m_pyself, (char *) "NotifyConstructionCompleted", (char *) "");
    if (py_retval == NULL) {
        PyErr_Print();
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    if (py_retval != Py_None) {
        PyErr_SetString(PyExc_TypeError, "function/method should return None");
        Py_DECREF(py_retval);
        reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
        Py_XDECREF(py_method);
        if (PyEval_ThreadsInitialized())
            PyGILState_Release(__py_gil_state);
        return;
    }
    Py_DECREF(py_retval);
    reinterpret_cast< PyNs3ObjectBase* >(m_pyself)->obj = self_obj_before;
    Py_XDECREF(py_method);
    if (PyEval_ThreadsInitialized())
        PyGILState_Release(__py_gil_state);
    return;
}


static int
_wrap_PyNs3CallbackBasedApp__tp_init__0(PyNs3CallbackBasedApp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyNs3CallbackBasedApp *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3CallbackBasedApp_Type, &arg0)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3CallbackBasedApp_Type)
    {
        self->obj = new PyNs3CallbackBasedApp__PythonHelper(*((PyNs3CallbackBasedApp *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3CallbackBasedApp__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CallbackBasedApp(*((PyNs3CallbackBasedApp *) arg0)->obj);
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

static int
_wrap_PyNs3CallbackBasedApp__tp_init__1(PyNs3CallbackBasedApp *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    if (Py_TYPE(self) != &PyNs3CallbackBasedApp_Type)
    {
        self->obj = new PyNs3CallbackBasedApp__PythonHelper();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ((PyNs3CallbackBasedApp__PythonHelper*) self->obj)->set_pyobj((PyObject *)self);
        ns3::CompleteConstruct(self->obj);
    } else {
        // visibility: 'public'
        self->obj = new ns3::CallbackBasedApp();
        self->obj->Ref ();
        self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
        ns3::CompleteConstruct(self->obj);
    }
    return 0;
}

int _wrap_PyNs3CallbackBasedApp__tp_init(PyNs3CallbackBasedApp *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyNs3CallbackBasedApp__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyNs3CallbackBasedApp__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


PyObject *
_wrap_PyNs3CallbackBasedApp_GetTypeId(void)
{
    PyObject *py_retval;
    PyNs3TypeId *py_TypeId;
    
    ns3::TypeId retval = ns3::CallbackBasedApp::GetTypeId();
    py_TypeId = PyObject_New(PyNs3TypeId, &PyNs3TypeId_Type);
    py_TypeId->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_TypeId->obj = new ns3::TypeId(retval);
    PyNs3TypeId_wrapper_registry[(void *) py_TypeId->obj] = (PyObject *) py_TypeId;
    py_retval = Py_BuildValue((char *) "N", py_TypeId);
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackBasedApp_SetOnStartCallback(PyNs3CallbackBasedApp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *onStart;
    ns3::Ptr<PythonCallbackImpl6> onStart_cb_impl;
    const char *keywords[] = {"onStart", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &onStart)) {
        return NULL;
    }
    if (!PyCallable_Check(onStart)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'onStart' must be callbale");
        return NULL;
    }
    onStart_cb_impl = ns3::Create<PythonCallbackImpl6> (onStart);
    self->obj->SetOnStartCallback(ns3::Callback<void, ns3::Ptr<ns3::Application>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (onStart_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3CallbackBasedApp_SetOnStopCallback(PyNs3CallbackBasedApp *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyObject *onStart;
    ns3::Ptr<PythonCallbackImpl6> onStart_cb_impl;
    const char *keywords[] = {"onStart", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O", (char **) keywords, &onStart)) {
        return NULL;
    }
    if (!PyCallable_Check(onStart)) {
        PyErr_SetString(PyExc_TypeError, "parameter 'onStart' must be callbale");
        return NULL;
    }
    onStart_cb_impl = ns3::Create<PythonCallbackImpl6> (onStart);
    self->obj->SetOnStopCallback(ns3::Callback<void, ns3::Ptr<ns3::Application>, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty, ns3::empty> (onStart_cb_impl));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3CallbackBasedApp__copy__(PyNs3CallbackBasedApp *self)
{

    PyNs3CallbackBasedApp *py_copy;
    py_copy = PyObject_GC_New(PyNs3CallbackBasedApp, &PyNs3CallbackBasedApp_Type);
    py_copy->inst_dict = NULL;
    
    py_copy->obj = new ns3::CallbackBasedApp(*self->obj);
    py_copy->inst_dict = NULL;
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3ObjectBase_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3CallbackBasedApp_methods[] = {
    {(char *) "GetTypeId", (PyCFunction) _wrap_PyNs3CallbackBasedApp_GetTypeId, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "SetOnStartCallback", (PyCFunction) _wrap_PyNs3CallbackBasedApp_SetOnStartCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetOnStopCallback", (PyCFunction) _wrap_PyNs3CallbackBasedApp_SetOnStopCallback, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "NotifyConstructionCompleted", (PyCFunction) PyNs3CallbackBasedApp__PythonHelper::_wrap_NotifyConstructionCompleted, METH_NOARGS, NULL },
    {(char *) "StartApplication", (PyCFunction) PyNs3CallbackBasedApp__PythonHelper::_wrap_StartApplication, METH_NOARGS, NULL },
    {(char *) "DoInitialize", (PyCFunction) PyNs3CallbackBasedApp__PythonHelper::_wrap_DoInitialize, METH_NOARGS, NULL },
    {(char *) "NotifyNewAggregate", (PyCFunction) PyNs3CallbackBasedApp__PythonHelper::_wrap_NotifyNewAggregate, METH_NOARGS, NULL },
    {(char *) "StopApplication", (PyCFunction) PyNs3CallbackBasedApp__PythonHelper::_wrap_StopApplication, METH_NOARGS, NULL },
    {(char *) "DoDispose", (PyCFunction) PyNs3CallbackBasedApp__PythonHelper::_wrap_DoDispose, METH_NOARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3CallbackBasedApp__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
PyNs3CallbackBasedApp__tp_clear(PyNs3CallbackBasedApp *self)
{
    Py_CLEAR(self->inst_dict);
    if (self->obj) {
    ns3::CallbackBasedApp *tmp = self->obj;
    self->obj = NULL;
    tmp->Unref();
}
}


static int
PyNs3CallbackBasedApp__tp_traverse(PyNs3CallbackBasedApp *self, visitproc visit, void *arg)
{
    Py_VISIT(self->inst_dict);
    
    if (self->obj && typeid(*self->obj).name() == typeid(PyNs3CallbackBasedApp__PythonHelper).name()  && self->obj->GetReferenceCount() == 1)
        Py_VISIT((PyObject *) self);

    return 0;
}


static void
_wrap_PyNs3CallbackBasedApp__tp_dealloc(PyNs3CallbackBasedApp *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3ObjectBase_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3ObjectBase_wrapper_registry.end()) {
        PyNs3ObjectBase_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    PyNs3CallbackBasedApp__tp_clear(self);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3CallbackBasedApp__tp_richcompare (PyNs3CallbackBasedApp *PYBINDGEN_UNUSED(self), PyNs3CallbackBasedApp *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3CallbackBasedApp_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3CallbackBasedApp_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.CallbackBasedApp",            /* tp_name */
    sizeof(PyNs3CallbackBasedApp),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3CallbackBasedApp__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_BASETYPE|Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)PyNs3CallbackBasedApp__tp_traverse,     /* tp_traverse */
    (inquiry)PyNs3CallbackBasedApp__tp_clear,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3CallbackBasedApp__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3CallbackBasedApp_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    offsetof(PyNs3CallbackBasedApp, inst_dict),                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3CallbackBasedApp__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3L2Tracer__tp_init(void)
{
    PyErr_SetString(PyExc_TypeError, "class 'L2Tracer' cannot be constructed (have pure virtual methods but no helper class)");
    return -1;
}


PyObject *
_wrap_PyNs3L2Tracer_Drop(PyNs3L2Tracer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *arg0;
    ns3::Packet *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->Drop(ns3::Ptr< ns3::Packet  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3L2Tracer_Connect(PyNs3L2Tracer *self)
{
    PyObject *py_retval;
    
    self->obj->Connect();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3L2Tracer_methods[] = {
    {(char *) "Drop", (PyCFunction) _wrap_PyNs3L2Tracer_Drop, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "Connect", (PyCFunction) _wrap_PyNs3L2Tracer_Connect, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3L2Tracer__tp_dealloc(PyNs3L2Tracer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::L2Tracer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}



static PyObject *
_wrap_PyNs3L2Tracer__tp_str(PyNs3L2Tracer *self)
{
    std::ostringstream oss;
    oss << *self->obj;
    return PyUnicode_FromString(oss.str ().c_str ());
}


static PyObject*
_wrap_PyNs3L2Tracer__tp_richcompare (PyNs3L2Tracer *PYBINDGEN_UNUSED(self), PyNs3L2Tracer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3L2Tracer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3L2Tracer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.L2Tracer",            /* tp_name */
    sizeof(PyNs3L2Tracer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3L2Tracer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)_wrap_PyNs3L2Tracer__tp_str,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3L2Tracer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3L2Tracer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3L2Tracer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3RocketfuelWeightsReader__tp_init(PyNs3RocketfuelWeightsReader *self, PyObject *args, PyObject *kwargs)
{
    const char *path;
    Py_ssize_t path_len;
    std::string path_std;
    double scale = 1.0e+0;
    const char *keywords[] = {"path", "scale", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|d", (char **) keywords, &path, &path_len, &scale)) {
        return -1;
    }
    path_std = std::string(path, path_len);
    self->obj = new ns3::RocketfuelWeightsReader(path_std, scale);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3RocketfuelWeightsReader_Read(PyNs3RocketfuelWeightsReader *self)
{
    PyObject *py_retval;
    PyNs3NodeContainer *py_NodeContainer;
    
    ns3::NodeContainer retval = self->obj->Read();
    py_NodeContainer = PyObject_New(PyNs3NodeContainer, &PyNs3NodeContainer_Type);
    py_NodeContainer->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_NodeContainer->obj = new ns3::NodeContainer(retval);
    PyNs3NodeContainer_wrapper_registry[(void *) py_NodeContainer->obj] = (PyObject *) py_NodeContainer;
    py_retval = Py_BuildValue((char *) "N", py_NodeContainer);
    return py_retval;
}


PyObject *
_wrap_PyNs3RocketfuelWeightsReader_SetFileType(PyNs3RocketfuelWeightsReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    int inputType;
    const char *keywords[] = {"inputType", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &inputType)) {
        return NULL;
    }
    if (inputType > 0xff) {
        PyErr_SetString(PyExc_ValueError, "Out of range");
        return NULL;
    }
    self->obj->SetFileType(inputType);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RocketfuelWeightsReader_SetDefaultBandwidth(PyNs3RocketfuelWeightsReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *bw;
    Py_ssize_t bw_len;
    std::string bw_std;
    const char *keywords[] = {"bw", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &bw, &bw_len)) {
        return NULL;
    }
    bw_std = std::string(bw, bw_len);
    self->obj->SetDefaultBandwidth(bw_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RocketfuelWeightsReader_GetDefaultBandwidth(PyNs3RocketfuelWeightsReader *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetDefaultBandwidth();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3RocketfuelWeightsReader_Commit(PyNs3RocketfuelWeightsReader *self)
{
    PyObject *py_retval;
    
    self->obj->Commit();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3RocketfuelWeightsReader_GetDefaultQueue(PyNs3RocketfuelWeightsReader *self)
{
    PyObject *py_retval;
    std::string retval;
    
    retval = self->obj->GetDefaultQueue();
    py_retval = Py_BuildValue((char *) "s#", (retval).c_str(), (retval).size());
    return py_retval;
}


PyObject *
_wrap_PyNs3RocketfuelWeightsReader_SetDefaultQueue(PyNs3RocketfuelWeightsReader *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *queue;
    Py_ssize_t queue_len;
    std::string queue_std;
    const char *keywords[] = {"queue", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#", (char **) keywords, &queue, &queue_len)) {
        return NULL;
    }
    queue_std = std::string(queue, queue_len);
    self->obj->SetDefaultQueue(queue_std);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}

static PyMethodDef PyNs3RocketfuelWeightsReader_methods[] = {
    {(char *) "Read", (PyCFunction) _wrap_PyNs3RocketfuelWeightsReader_Read, METH_NOARGS, NULL },
    {(char *) "SetFileType", (PyCFunction) _wrap_PyNs3RocketfuelWeightsReader_SetFileType, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetDefaultBandwidth", (PyCFunction) _wrap_PyNs3RocketfuelWeightsReader_SetDefaultBandwidth, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "GetDefaultBandwidth", (PyCFunction) _wrap_PyNs3RocketfuelWeightsReader_GetDefaultBandwidth, METH_NOARGS, NULL },
    {(char *) "Commit", (PyCFunction) _wrap_PyNs3RocketfuelWeightsReader_Commit, METH_NOARGS, NULL },
    {(char *) "GetDefaultQueue", (PyCFunction) _wrap_PyNs3RocketfuelWeightsReader_GetDefaultQueue, METH_NOARGS, NULL },
    {(char *) "SetDefaultQueue", (PyCFunction) _wrap_PyNs3RocketfuelWeightsReader_SetDefaultQueue, METH_KEYWORDS|METH_VARARGS, NULL },
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3RocketfuelWeightsReader__tp_dealloc(PyNs3RocketfuelWeightsReader *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::RocketfuelWeightsReader *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3RocketfuelWeightsReader__tp_richcompare (PyNs3RocketfuelWeightsReader *PYBINDGEN_UNUSED(self), PyNs3RocketfuelWeightsReader *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3RocketfuelWeightsReader_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3RocketfuelWeightsReader_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.RocketfuelWeightsReader",            /* tp_name */
    sizeof(PyNs3RocketfuelWeightsReader),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3RocketfuelWeightsReader__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3RocketfuelWeightsReader__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3RocketfuelWeightsReader_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3RocketfuelWeightsReader__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static int
_wrap_PyNs3L2RateTracer__tp_init(PyNs3L2RateTracer *self, PyObject *args, PyObject *kwargs)
{
    PyNs3L2RateTracer *arg0;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3L2RateTracer_Type, &arg0)) {
        return -1;
    }
    self->obj = new ns3::L2RateTracer(*((PyNs3L2RateTracer *) arg0)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}


PyObject *
_wrap_PyNs3L2RateTracer_InstallAll(PyNs3L2RateTracer *PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    const char *file;
    Py_ssize_t file_len;
    std::string file_std;
    PyNs3Time *averagingPeriod = NULL;
    const char *keywords[] = {"file", "averagingPeriod", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "s#|O!", (char **) keywords, &file, &file_len, &PyNs3Time_Type, &averagingPeriod)) {
        return NULL;
    }
    file_std = std::string(file, file_len);
    ns3::L2RateTracer::InstallAll(file_std, (averagingPeriod ? (*((PyNs3Time *) averagingPeriod)->obj) : ns3::Seconds(0)));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3L2RateTracer_Destroy(void)
{
    PyObject *py_retval;
    
    ns3::L2RateTracer::Destroy();
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3L2RateTracer_Drop(PyNs3L2RateTracer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Packet *arg0;
    ns3::Packet *arg0_ptr;
    const char *keywords[] = {"arg0", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Packet_Type, &arg0)) {
        return NULL;
    }
    arg0_ptr = (arg0 ? arg0->obj : NULL);
    self->obj->Drop(ns3::Ptr< ns3::Packet  > (arg0_ptr));
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


PyObject *
_wrap_PyNs3L2RateTracer_SetAveragingPeriod(PyNs3L2RateTracer *self, PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    PyNs3Time *period;
    const char *keywords[] = {"period", NULL};
    
    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyNs3Time_Type, &period)) {
        return NULL;
    }
    self->obj->SetAveragingPeriod(*((PyNs3Time *) period)->obj);
    Py_INCREF(Py_None);
    py_retval = Py_None;
    return py_retval;
}


static PyObject*
_wrap_PyNs3L2RateTracer__copy__(PyNs3L2RateTracer *self)
{

    PyNs3L2RateTracer *py_copy;
    py_copy = PyObject_New(PyNs3L2RateTracer, &PyNs3L2RateTracer_Type);
    
    py_copy->obj = new ns3::L2RateTracer(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    PyNs3Empty_wrapper_registry[(void *) py_copy->obj] = (PyObject *) py_copy;
    return (PyObject*) py_copy;
}

static PyMethodDef PyNs3L2RateTracer_methods[] = {
    {(char *) "InstallAll", (PyCFunction) _wrap_PyNs3L2RateTracer_InstallAll, METH_KEYWORDS|METH_VARARGS|METH_STATIC, NULL },
    {(char *) "Destroy", (PyCFunction) _wrap_PyNs3L2RateTracer_Destroy, METH_NOARGS|METH_STATIC, NULL },
    {(char *) "Drop", (PyCFunction) _wrap_PyNs3L2RateTracer_Drop, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "SetAveragingPeriod", (PyCFunction) _wrap_PyNs3L2RateTracer_SetAveragingPeriod, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "__copy__", (PyCFunction) _wrap_PyNs3L2RateTracer__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyNs3L2RateTracer__tp_dealloc(PyNs3L2RateTracer *self)
{
    std::map<void*, PyObject*>::iterator wrapper_lookup_iter;
    wrapper_lookup_iter = PyNs3Empty_wrapper_registry.find((void *) self->obj);
    if (wrapper_lookup_iter != PyNs3Empty_wrapper_registry.end()) {
        PyNs3Empty_wrapper_registry.erase(wrapper_lookup_iter);
    }
    
    if (self->obj) {
        ns3::L2RateTracer *tmp = self->obj;
        self->obj = NULL;
        tmp->Unref();
    }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyNs3L2RateTracer__tp_richcompare (PyNs3L2RateTracer *PYBINDGEN_UNUSED(self), PyNs3L2RateTracer *other, int opid)
{
    
    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyNs3L2RateTracer_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyNs3L2RateTracer_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.L2RateTracer",            /* tp_name */
    sizeof(PyNs3L2RateTracer),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyNs3L2RateTracer__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyNs3L2RateTracer__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyNs3L2RateTracer_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    0,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyNs3L2RateTracer__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- containers --- */



static void
Pystd__map__lt___std__string__std__string___gt__Iter__tp_clear(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__map__lt___std__string__std__string___gt__Iter__tp_traverse(Pystd__map__lt___std__string__std__string___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__map__lt___std__string__std__string___gt____tp_dealloc(Pystd__map__lt___std__string__std__string___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_dealloc(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__map__lt___std__string__std__string___gt____tp_iter(Pystd__map__lt___std__string__std__string___gt__ *self)
{
    Pystd__map__lt___std__string__std__string___gt__Iter *iter = PyObject_GC_New(Pystd__map__lt___std__string__std__string___gt__Iter, &Pystd__map__lt___std__string__std__string___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::map< std::string, std::string >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iter(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iternext(Pystd__map__lt___std__string__std__string___gt__Iter *self)
{
    PyObject *py_retval;
    std::map< std::string, std::string >::iterator iter;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_retval = Py_BuildValue((char *) "s#s#", (iter->first).c_str(), (iter->first).size(), (iter->second).c_str(), (iter->second).size());
    return py_retval;
}

int _wrap_convert_py2c__std__string(PyObject *value, std::string *address)
{
    PyObject *py_retval;
    const char *retval_ptr;
    Py_ssize_t retval_len;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "s#", &retval_ptr, &retval_len)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = std::string(retval_ptr, retval_len);
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(PyObject *arg, std::map< std::string, std::string > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__map__lt___std__string__std__string___gt___Type)) {
        *container = *((Pystd__map__lt___std__string__std__string___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            PyObject *tup = PyList_GET_ITEM(arg, i);
            if (!PyTuple_Check(tup) || PyTuple_Size(tup) != 2) {
                PyErr_SetString(PyExc_TypeError, "items must be tuples with two elements");
                return 0;
            }
            std::pair< std::string, std::string > item;
            if (!_wrap_convert_py2c__std__string(PyTuple_GET_ITEM(tup, 0), &item.first)) {
                return 0;
            }
            if (!_wrap_convert_py2c__std__string(PyTuple_GET_ITEM(tup, 1), &item.second)) {
                return 0;
            }
            container->insert(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__map__lt___std__string__std__string___gt__ instance, or a list of std::string");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__map__lt___std__string__std__string___gt____tp_init(Pystd__map__lt___std__string__std__string___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::map< std::string, std::string >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__map__lt___std__string__std__string___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__map__lt___std__string__std__string___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.Std__map__lt___std__string__std__string___gt__",            /* tp_name */
    sizeof(Pystd__map__lt___std__string__std__string___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___std__string__std__string___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___std__string__std__string___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__map__lt___std__string__std__string___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__map__lt___std__string__std__string___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.Std__map__lt___std__string__std__string___gt__Iter",            /* tp_name */
    sizeof(Pystd__map__lt___std__string__std__string___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__map__lt___std__string__std__string___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__map__lt___std__string__std__string___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__map__lt___std__string__std__string___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};




static void
Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_clear(Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

}


static int
Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_traverse(Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter *self, visitproc visit, void *arg)
{
    Py_VISIT((PyObject *) self->container);
    return 0;
}


static void
_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt____tp_dealloc(Pystd__list__lt___ns3__TopologyReader__Link___gt__ *self)
{
    delete self->obj;
    self->obj = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static void
_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_dealloc(Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter *self)
{
    Py_CLEAR(self->container);
    delete self->iterator;
    self->iterator = NULL;

    Py_TYPE(self)->tp_free((PyObject*)self);
}


static PyObject*
_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt____tp_iter(Pystd__list__lt___ns3__TopologyReader__Link___gt__ *self)
{
    Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter *iter = PyObject_GC_New(Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter, &Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter_Type);
    Py_INCREF(self);
    iter->container = self;
    iter->iterator = new std::list< ns3::TopologyReader::Link >::iterator(self->obj->begin());
    return (PyObject*) iter;
}


static PyObject*
_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_iter(Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter *self)
{
    Py_INCREF(self);
    return (PyObject*) self;
}

static PyObject* _wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_iternext(Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter *self)
{
    PyObject *py_retval;
    std::list< ns3::TopologyReader::Link >::iterator iter;
    PyNs3TopologyReaderLink *py_Link;
    
    iter = *self->iterator;
    if (iter == self->container->obj->end()) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    ++(*self->iterator);
    py_Link = PyObject_New(PyNs3TopologyReaderLink, &PyNs3TopologyReaderLink_Type);
    py_Link->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    py_Link->obj = new ns3::TopologyReader::Link((*iter));
    PyNs3TopologyReaderLink_wrapper_registry[(void *) py_Link->obj] = (PyObject *) py_Link;
    py_retval = Py_BuildValue((char *) "N", py_Link);
    return py_retval;
}

int _wrap_convert_py2c__ns3__TopologyReader__Link(PyObject *value, ns3::TopologyReader::Link *address)
{
    PyObject *py_retval;
    PyNs3TopologyReaderLink *tmp_Link;
    
    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "O!", &PyNs3TopologyReaderLink_Type, &tmp_Link)) {
        Py_DECREF(py_retval);
        return 0;
    }
    *address = *tmp_Link->obj;
    Py_DECREF(py_retval);
    return 1;
}


int _wrap_convert_py2c__std__list__lt___ns3__TopologyReader__Link___gt__(PyObject *arg, std::list< ns3::TopologyReader::Link > *container)
{
    if (PyObject_IsInstance(arg, (PyObject*) &Pystd__list__lt___ns3__TopologyReader__Link___gt___Type)) {
        *container = *((Pystd__list__lt___ns3__TopologyReader__Link___gt__*)arg)->obj;
    } else if (PyList_Check(arg)) {
        container->clear();
        Py_ssize_t size = PyList_Size(arg);
        for (Py_ssize_t i = 0; i < size; i++) {
            ns3::TopologyReader::Link item;
            if (!_wrap_convert_py2c__ns3__TopologyReader__Link(PyList_GET_ITEM(arg, i), &item)) {
                return 0;
            }
            container->push_back(item);
        }
    } else {
        PyErr_SetString(PyExc_TypeError, "parameter must be None, a Std__list__lt___ns3__TopologyReader__Link___gt__ instance, or a list of ns3::TopologyReader::Link");
        return 0;
    }
    return 1;
}


static int
_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt____tp_init(Pystd__list__lt___ns3__TopologyReader__Link___gt__ *self, PyObject *args, PyObject *kwargs)
{
    const char *keywords[] = {"arg", NULL};
    PyObject *arg = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "|O", (char **) keywords, &arg)) {
        return -1;
    }

    self->obj = new std::list< ns3::TopologyReader::Link >;

    if (arg == NULL)
        return 0;

    if (!_wrap_convert_py2c__std__list__lt___ns3__TopologyReader__Link___gt__(arg, self->obj)) {
        delete self->obj;
        self->obj = NULL;
        return -1;
    }
    return 0;
}

PyTypeObject Pystd__list__lt___ns3__TopologyReader__Link___gt___Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.Std__list__lt___ns3__TopologyReader__Link___gt__",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__TopologyReader__Link___gt__),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt____tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt____tp_iter,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt____tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};

PyTypeObject Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "ndnSIM.Std__list__lt___ns3__TopologyReader__Link___gt__Iter",            /* tp_name */
    sizeof(Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_traverse,     /* tp_traverse */
    (inquiry)Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_clear,             /* tp_clear */
    (richcmpfunc)NULL,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_iter,          /* tp_iter */
    (iternextfunc)_wrap_Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter__tp_iternext,     /* tp_iternext */
    (struct PyMethodDef*)NULL, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    NULL,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)NULL,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


/* --- enumerations --- */















#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef ndnSIM_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ndnSIM",
    NULL,
    -1,
    ndnSIM_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(ndnSIM)
{
    PyObject *m;
    PyObject *submodule;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&ndnSIM_moduledef);
    #else
    m = Py_InitModule3((char *) "ndnSIM", ndnSIM_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    PyModule_AddIntConstant(m, (char *) "STD_IOS_IN", std::ios::in);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_OUT", std::ios::out);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_ATE", std::ios::ate);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_APP", std::ios::app);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_TRUNC", std::ios::trunc);
    PyModule_AddIntConstant(m, (char *) "STD_IOS_BINARY", std::ios::binary);
    /* Import the 'ns3::Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ApplicationContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ApplicationContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ApplicationContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ApplicationContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ApplicationContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ApplicationContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeConstructionList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::AttributeConstructionList::Item' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeConstructionListItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3AttributeConstructionListItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3AttributeConstructionListItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3AttributeConstructionListItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Buffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Buffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Buffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Buffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Buffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Buffer::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BufferIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3BufferIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3BufferIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3BufferIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ByteTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Iterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ByteTagList::Iterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ByteTagListIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ByteTagListIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ByteTagListIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::CallbackBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3CallbackBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3CallbackBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3CallbackBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::EventId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3EventId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3EventId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3EventId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Hasher' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Hasher_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Hasher");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Hasher_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Hasher_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Hasher_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv4Mask' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4Mask_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4Mask");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv4Mask_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv4Mask_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv4Mask_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Address' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Address_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Address");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Address_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Address_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Address_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Ipv6Prefix' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6Prefix_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6Prefix");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Ipv6Prefix_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Ipv6Prefix_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Ipv6Prefix_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NetDeviceContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDeviceContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDeviceContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NetDeviceContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NetDeviceContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NetDeviceContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::NodeContainer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NodeContainer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NodeContainer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3NodeContainer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3NodeContainer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3NodeContainer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectBase_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectBase_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectBase_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectDeleter' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectDeleter_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectDeleter_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectDeleter_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ObjectFactory' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactory_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactory");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectFactory_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectFactory_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectFactory_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadata_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketMetadata");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadata_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadata_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadata_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketMetadata::ItemIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketMetadataItemIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ItemIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketMetadataItemIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketMetadataItemIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagIterator::Item' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagIteratorItem_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Item");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagIteratorItem_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagIteratorItem_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagIteratorItem_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagList_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "PacketTagList");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagList_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagList_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagList_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::PacketTagList::TagData' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3PacketTagListTagData_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagData");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3PacketTagListTagData_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3PacketTagListTagData_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3PacketTagListTagData_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::RandomVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3RandomVariable_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3RandomVariable_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3RandomVariable_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::RngSeedManager' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RngSeedManager_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RngSeedManager");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3RngSeedManager_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3RngSeedManager_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3RngSeedManager_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SequenceNumber32' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SequenceNumber32_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SequenceNumber32");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SequenceNumber32_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3SequenceNumber32_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3SequenceNumber32_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SequentialVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SequentialVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SequentialVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Object, ns3::ObjectBase, ns3::ObjectDeleter >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Simulator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Simulator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Simulator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Simulator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Simulator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Simulator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Tag' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Tag_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Tag");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TagBuffer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TagBuffer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TagBuffer");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TagBuffer_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TagBuffer_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TagBuffer_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TriangularVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TriangularVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TriangularVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeId' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeId_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeId");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeId_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeId_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeId_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::AttributeInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdAttributeInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdAttributeInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdAttributeInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TypeId::TraceSourceInformation' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdTraceSourceInformation_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceInformation");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TypeIdTraceSourceInformation_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TypeIdTraceSourceInformation_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::UniformVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UniformVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UniformVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::WeibullVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3WeibullVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "WeibullVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZetaVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZetaVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZetaVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ZipfVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ZipfVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ZipfVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::empty' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Empty_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "empty");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Empty_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Empty_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Empty_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::int64x64_t' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Int64x64_t_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "int64x64_t");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Int64x64_t_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Int64x64_t_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Int64x64_t_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Chunk' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Chunk_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Chunk");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ConstantVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ConstantVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ConstantVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DeterministicVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DeterministicVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DeterministicVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmpiricalVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmpiricalVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmpiricalVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ErlangVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ErlangVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ErlangVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ExponentialVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ExponentialVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ExponentialVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::GammaVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3GammaVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "GammaVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Header' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Header_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Header");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::IntEmpiricalVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntEmpiricalVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntEmpiricalVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::LogNormalVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3LogNormalVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "LogNormalVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NormalVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NormalVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NormalVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Object_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Object");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Object::AggregateIterator' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectAggregateIterator_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AggregateIterator");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3ObjectAggregateIterator_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3ObjectAggregateIterator_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3ObjectAggregateIterator_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::ParetoVariable' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ParetoVariable_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ParetoVariable");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeAccessor, ns3::empty, ns3::DefaultDeleter<ns3::AttributeAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeChecker, ns3::empty, ns3::DefaultDeleter<ns3::AttributeChecker> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeChecker_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeChecker__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::AttributeValue, ns3::empty, ns3::DefaultDeleter<ns3::AttributeValue> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3AttributeValue_Ns3Empty_Ns3DefaultDeleter__lt__ns3AttributeValue__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::CallbackImplBase, ns3::empty, ns3::DefaultDeleter<ns3::CallbackImplBase> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3CallbackImplBase_Ns3Empty_Ns3DefaultDeleter__lt__ns3CallbackImplBase__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::EventImpl, ns3::empty, ns3::DefaultDeleter<ns3::EventImpl> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3EventImpl_Ns3Empty_Ns3DefaultDeleter__lt__ns3EventImpl__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Hash::Implementation, ns3::empty, ns3::DefaultDeleter<ns3::Hash::Implementation> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3HashImplementation_Ns3Empty_Ns3DefaultDeleter__lt__ns3HashImplementation__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::NixVector, ns3::empty, ns3::DefaultDeleter<ns3::NixVector> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NixVector_Ns3Empty_Ns3DefaultDeleter__lt__ns3NixVector__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::Packet, ns3::empty, ns3::DefaultDeleter<ns3::Packet> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3Packet_Ns3Empty_Ns3DefaultDeleter__lt__ns3Packet__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::TopologyReader, ns3::empty, ns3::DefaultDeleter<ns3::TopologyReader> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::TopologyReader, ns3::empty, ns3::DefaultDeleter<ns3::TopologyReader> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::TraceSourceAccessor, ns3::empty, ns3::DefaultDeleter<ns3::TraceSourceAccessor> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3TraceSourceAccessor_Ns3Empty_Ns3DefaultDeleter__lt__ns3TraceSourceAccessor__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::SimpleRefCount< ns3::ndn::Interest, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Interest> >' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt___Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt__");
    
        if (PyErr_Occurred()) PyErr_Clear();
        /* Import the 'ns3::SimpleRefCount< ns3::ndn::Interest, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Interest> >' class type map from module 'ns.core' */
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map");
        if (_cobj == NULL) {
            _PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map = new pybindgen::TypeMap;
            PyErr_Clear();
        } else {
            _PyNs3SimpleRefCount__Ns3NdnInterest_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnInterest__gt____typeid_map = reinterpret_cast<pybindgen::TypeMap*> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::Time' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Time_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Time");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3Time_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3Time_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3Time_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TopologyReader' class from module 'ns.topology_read' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.topology_read");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TopologyReader_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TopologyReader");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TopologyReader::Link' class from module 'ns.topology_read' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.topology_read");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TopologyReaderLink_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Link");
    
        if (PyErr_Occurred()) PyErr_Clear();
        PyObject *_cobj = PyObject_GetAttrString(module, (char*) "_PyNs3TopologyReaderLink_wrapper_registry");
        if (_cobj == NULL) {
            _PyNs3TopologyReaderLink_wrapper_registry = NULL;
            PyErr_Clear();
        } else {
            _PyNs3TopologyReaderLink_wrapper_registry = reinterpret_cast< std::map<void*, PyObject*> *> (PyCObject_AsVoidPtr (_cobj));
            Py_DECREF(_cobj);
        }
    }
    /* Import the 'ns3::TraceSourceAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TraceSourceAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TraceSourceAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Trailer' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Trailer_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Trailer");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Application' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Application_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Application");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeAccessor' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeAccessor_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeAccessor");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::BooleanValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3BooleanValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "BooleanValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackImplBase' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackImplBase_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackImplBase");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::CallbackValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3CallbackValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "CallbackValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::DoubleValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3DoubleValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "DoubleValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EmptyAttributeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EmptyAttributeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EmptyAttributeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EnumValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EnumValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EnumValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::EventImpl' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3EventImpl_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "EventImpl");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::IntegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3IntegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "IntegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv4MaskValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv4MaskValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv4MaskValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Ipv6PrefixValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Ipv6PrefixValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Ipv6PrefixValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NetDevice' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NetDevice_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NetDevice");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::NixVector' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3NixVector_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "NixVector");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Node' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Node_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Node");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::ObjectFactoryValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3ObjectFactoryValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "ObjectFactoryValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::Packet' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3Packet_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "Packet");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomVariableChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomVariableChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomVariableChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::RandomVariableValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3RandomVariableValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "RandomVariableValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TimeValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TimeValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TimeValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdChecker' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::TypeIdValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3TypeIdValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "TypeIdValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::UintegerValue' class from module 'ns.core' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.core");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3UintegerValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "UintegerValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressChecker' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressChecker_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressChecker");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    /* Import the 'ns3::AddressValue' class from module 'ns.network' */
    {
        PyObject *module = PyImport_ImportModule((char*) "ns.network");
        if (module == NULL) {
            return MOD_ERROR;
        }
        _PyNs3AddressValue_Type = (PyTypeObject*) PyObject_GetAttrString(module, (char*) "AddressValue");
    
        if (PyErr_Occurred()) PyErr_Clear();
    }
    PyModule_AddObject(m, (char *) "_PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry", PyCObject_FromVoidPtr(&PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_wrapper_registry, NULL));
    /* Register the 'ns3::TracedValue< ns3::ndn::fib::FaceMetric::Status >' class */
    if (PyType_Ready(&PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "TracedValue__Ns3NdnFibFaceMetricStatus", (PyObject *) &PyNs3TracedValue__Ns3NdnFibFaceMetricStatus_Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> >), &PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::L2Tracer, ns3::empty, ns3::DefaultDeleter<ns3::L2Tracer> >' class */
    PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> >), &PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::AppDelayTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::AppDelayTracer> >' class */
    PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnAppDelayTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnAppDelayTracer__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> >), &PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::CsTracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::CsTracer> >' class */
    PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnCsTracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsTracer__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> >), &PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::Data, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Data> >' class */
    PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnData_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnData__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> >), &PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::Exclude, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Exclude> >' class */
    PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnExclude_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnExclude__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> >), &PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::FaceContainer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::FaceContainer> >' class */
    PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnFaceContainer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnFaceContainer__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> >), &PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::L3Tracer, ns3::empty, ns3::DefaultDeleter<ns3::ndn::L3Tracer> >' class */
    PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnL3Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnL3Tracer__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> >), &PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::Name, ns3::empty, ns3::DefaultDeleter<ns3::ndn::Name> >' class */
    PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnName_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnName__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> >), &PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::cs::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::cs::Entry> >' class */
    PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnCsEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnCsEntry__gt___Type);
    PyModule_AddObject(m, (char *) "_PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map", PyCObject_FromVoidPtr(&PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map, NULL));
    PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt____typeid_map.register_wrapper(typeid(ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> >), &PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type);
    /* Register the 'ns3::SimpleRefCount< ns3::ndn::pit::Entry, ns3::empty, ns3::DefaultDeleter<ns3::ndn::pit::Entry> >' class */
    PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type.tp_base = &PyNs3Empty_Type;
    if (PyType_Ready(&PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt__", (PyObject *) &PyNs3SimpleRefCount__Ns3NdnPitEntry_Ns3Empty_Ns3DefaultDeleter__lt__ns3NdnPitEntry__gt___Type);
    PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map.register_wrapper(typeid(ns3::AnnotatedTopologyReader), &PyNs3AnnotatedTopologyReader_Type);
    /* Register the 'ns3::AnnotatedTopologyReader' class */
    PyNs3AnnotatedTopologyReader_Type.tp_base = &PyNs3TopologyReader_Type;
    if (PyType_Ready(&PyNs3AnnotatedTopologyReader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "AnnotatedTopologyReader", (PyObject *) &PyNs3AnnotatedTopologyReader_Type);
    PyNs3SimpleRefCount__Ns3Object_Ns3ObjectBase_Ns3ObjectDeleter__typeid_map.register_wrapper(typeid(ns3::CallbackBasedApp), &PyNs3CallbackBasedApp_Type);
    /* Register the 'ns3::CallbackBasedApp' class */
    PyNs3CallbackBasedApp_Type.tp_base = &PyNs3Application_Type;
    if (PyType_Ready(&PyNs3CallbackBasedApp_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "CallbackBasedApp", (PyObject *) &PyNs3CallbackBasedApp_Type);
    PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____typeid_map.register_wrapper(typeid(ns3::L2Tracer), &PyNs3L2Tracer_Type);
    /* Register the 'ns3::L2Tracer' class */
    PyNs3L2Tracer_Type.tp_base = &PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt___Type;
    if (PyType_Ready(&PyNs3L2Tracer_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "L2Tracer", (PyObject *) &PyNs3L2Tracer_Type);
    PyNs3SimpleRefCount__Ns3TopologyReader_Ns3Empty_Ns3DefaultDeleter__lt__ns3TopologyReader__gt____typeid_map.register_wrapper(typeid(ns3::RocketfuelWeightsReader), &PyNs3RocketfuelWeightsReader_Type);
    /* Register the 'ns3::RocketfuelWeightsReader' class */
    PyNs3RocketfuelWeightsReader_Type.tp_base = &PyNs3AnnotatedTopologyReader_Type;
    if (PyType_Ready(&PyNs3RocketfuelWeightsReader_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "RocketfuelWeightsReader", (PyObject *) &PyNs3RocketfuelWeightsReader_Type);
    PyNs3SimpleRefCount__Ns3L2Tracer_Ns3Empty_Ns3DefaultDeleter__lt__ns3L2Tracer__gt____typeid_map.register_wrapper(typeid(ns3::L2RateTracer), &PyNs3L2RateTracer_Type);
    /* Register the 'ns3::L2RateTracer' class */
    PyNs3L2RateTracer_Type.tp_base = &PyNs3L2Tracer_Type;
    if (PyType_Ready(&PyNs3L2RateTracer_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "L2RateTracer", (PyObject *) &PyNs3L2RateTracer_Type);
    /* Register the 'std::map< std::string, std::string >' class */
    if (PyType_Ready(&Pystd__map__lt___std__string__std__string___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__map__lt___std__string__std__string___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__map__lt___std__string__std__string___gt__", (PyObject *) &Pystd__map__lt___std__string__std__string___gt___Type);
    PyModule_AddObject(m, (char *) "Std__map__lt___std__string__std__string___gt__Iter", (PyObject *) &Pystd__map__lt___std__string__std__string___gt__Iter_Type);
    /* Register the 'std::list< ns3::TopologyReader::Link >' class */
    if (PyType_Ready(&Pystd__list__lt___ns3__TopologyReader__Link___gt___Type)) {
        return MOD_ERROR;
    }
    if (PyType_Ready(&Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__TopologyReader__Link___gt__", (PyObject *) &Pystd__list__lt___ns3__TopologyReader__Link___gt___Type);
    PyModule_AddObject(m, (char *) "Std__list__lt___ns3__TopologyReader__Link___gt__Iter", (PyObject *) &Pystd__list__lt___ns3__TopologyReader__Link___gt__Iter_Type);
    PyModule_AddObject(m, (char *) "SeedManager", (PyObject *) &PyNs3RngSeedManager_Type);
    {
        PyObject *tmp_value;
         // ns3::RocketfuelWeightsReader::LINKS
        tmp_value = PyLong_FromLong(ns3::RocketfuelWeightsReader::LINKS);
        PyDict_SetItemString((PyObject*) PyNs3RocketfuelWeightsReader_Type.tp_dict, "LINKS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RocketfuelWeightsReader::WEIGHTS
        tmp_value = PyLong_FromLong(ns3::RocketfuelWeightsReader::WEIGHTS);
        PyDict_SetItemString((PyObject*) PyNs3RocketfuelWeightsReader_Type.tp_dict, "WEIGHTS", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RocketfuelWeightsReader::LATENCIES
        tmp_value = PyLong_FromLong(ns3::RocketfuelWeightsReader::LATENCIES);
        PyDict_SetItemString((PyObject*) PyNs3RocketfuelWeightsReader_Type.tp_dict, "LATENCIES", tmp_value);
        Py_DECREF(tmp_value);
         // ns3::RocketfuelWeightsReader::POSITIONS
        tmp_value = PyLong_FromLong(ns3::RocketfuelWeightsReader::POSITIONS);
        PyDict_SetItemString((PyObject*) PyNs3RocketfuelWeightsReader_Type.tp_dict, "POSITIONS", tmp_value);
        Py_DECREF(tmp_value);
    }
    submodule = initndnSIM_FatalImpl();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "FatalImpl", submodule);
    submodule = initndnSIM_Hash();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "Hash", submodule);
    submodule = initndnSIM_internal();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "internal", submodule);
    submodule = initndnSIM_ndn();
    if (submodule == NULL) {
        return MOD_ERROR;
    }
    Py_INCREF(submodule);
    PyModule_AddObject(m, (char *) "ndn", submodule);
    return MOD_RETURN(m);
}
